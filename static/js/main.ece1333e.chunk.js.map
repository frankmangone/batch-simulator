{"version":3,"sources":["context/DataContext.tsx","GlobalStyles.tsx","constants/compoundColors.tsx","constants/compoundSymbols.tsx","components/Reactor.tsx","layouts/MainLayout.tsx","components/Button.tsx","components/PageTitle.tsx","components/CardButton.tsx","helpers/validators.tsx","components/compounds/CompoundCard.tsx","components/Error.tsx","components/Input.tsx","components/EditModal.tsx","components/compounds/CompoundEditModal.tsx","components/compounds/CompoundList.tsx","pages/CompoundsPage.tsx","components/Notice.tsx","components/reactions/ReactionPreview.tsx","components/reactions/ReactionCard.tsx","components/reactions/ReactionCompoundCard.tsx","components/reactions/ReactionCompoundList.tsx","components/Select.tsx","components/reactions/ReactionEditModal.tsx","components/reactions/ReactionList.tsx","pages/ReactionsPage.tsx","pages/ResultsPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CompoundType","GlobalStyles","createGlobalStyle","COMPOUND_COLORS_CODES","COMPOUND_COLORS","orange","yellow","lime","green1","green2","waterGreen1","waterGreen2","skyBlue1","skyBlue2","blue1","blue2","violet1","violet2","pink1","pink2","pink3","red1","red2","COMPOUND_SYMBOLS","defaultValue","compounds","addCompound","editCompound","updateCompound","removeCompound","editedCompoundId","undefined","reactions","addReaction","editReaction","removeReaction","editedReactionId","addCompoundToReaction","updateReactionCompound","removeReactionCompound","DataContext","createContext","useData","useContext","DataStore","props","children","useState","currentColor","setCurrentColor","setCompounds","setReactions","setEditedCompoundId","setEditedReactionId","availableSymbol","foundSymbols","Array","length","fill","forEach","compound","index","indexOf","symbol","i","getCompoundKey","compoundType","Reactant","Provider","value","updatedCompounds","push","id","randomstring","generate","color","concentration","name","updatedCompound","compoundId","updatedReactions","JSON","parse","stringify","reaction","reactants","filter","reactionCompound","products","slice","kineticModel","kineticConstants","key","stoichiometricCoefficient","reactionIndex","compoundIndex","updatedReactionCompound","reactionCompounds","ReactorWrapper","styled","div","ReactorInterior","ReactorLiquid","Reactor","MainLayout","MainLayoutWrapper","SideContent","to","MainContent","Button","button","colorsBase","colorsHover","PageTitle","h2","CardButton","validateNotEmpty","CompoundCard","validateUnicity","symbolInput","setSymbolInput","liquidRef","useRef","useEffect","current","document","getElementById","CompoundCardWrapper","CompoundCardInner","onMouseEnter","style","backgroundColor","onMouseLeave","SymbolInput","onBlur","onChange","event","target","onClick","CompoundColorBullet","className","li","input","ErrorWrapper","Error","Input","errors","EditModal","closing","setClosing","handleClose","closeModal","setTimeout","CompoundEditModalWrapper","CompoundEditModalInner","CloseButton","CompoundEditModal","findIndex","comp","field","formik","useFormik","initialValues","validate","values","threshold","equal","onSubmit","handleSubmit","SymbolFieldInput","htmlFor","autoComplete","handleChange","FieldInput","type","SubmitButton","CompoundList","editedCompound","find","CompoundListWrapper","map","ul","CompoundsPage","Notice","p","ReactionPreview","ReactionPreviewWrapper","c","size","CompoundWrapper","CompoundTile","ReactionCard","ReactionCardWrapper","ReactionCompoundCard","coefficientInput","setCoefficientInput","ReactionCompoundCardWrapper","parseFloat","ReactionCompoundList","Select","alignment","defaultDisplayValue","initialValue","onSelectionChange","selectOptions","selecting","setSelecting","currentValue","setCurrentValue","selectRef","clickOutsideHandler","useCallback","contains","toggleSelecting","window","removeEventListener","addEventListener","selectValue","currentValueOption","option","SelectWrapper","SelectValue","collapsedDisplayText","SelectOptions","SelectOption","displayText","ReactionEditModal","rea","selectReactantIndex","setSelectReactantIndex","selectProductIndex","setSelectProductIndex","selectReactantInitialValue","selectProductInitialValue","CompoundsInputSection","CompoundInputWrapper","AddCompound","CompoundInputInner","Product","ReactionList","editedReactionIndex","editedReaction","ReactionsPage","ResultsPage","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ece1333e.chunk.js","sourcesContent":["import { createContext, useContext, useState } from \"react\"\nimport randomstring from \"randomstring\"\n\n/* Constants */\nimport { COMPOUND_COLORS_CODES } from \"../constants/compoundColors\"\nimport { COMPOUND_SYMBOLS } from \"../constants/compoundSymbols\"\n\n/* Types */\nimport { ICompound } from \"../types/Compound\"\nimport { IReaction, IReactionCompound } from \"../types/Reaction\"\nimport { IFCWithChildren } from \"../types/FCWithChildren\"\n\n/**\n * To mark whether if a compound is a reactant or a product,\n * the following enum is used\n *  */\nexport enum CompoundType {\n  Reactant = 0,\n  Product,\n}\n\ninterface IDefaultValue {\n  /* Compounds */\n  compounds: ICompound[]\n  addCompound: () => void\n  editCompound: (index?: number) => void\n  updateCompound: (index: number, updatedCompound: ICompound) => void\n  removeCompound: (index: number) => void\n  editedCompoundId: string | undefined\n\n  /* Reactions */\n  reactions: IReaction[]\n  addReaction: () => void\n  editReaction: (index?: number) => void\n  removeReaction: (index: number) => void\n  editedReactionId: string | undefined\n  addCompoundToReaction: (\n    reactionIndex: number,\n    compoundId: string,\n    compoundType: CompoundType\n  ) => void\n  updateReactionCompound: (\n    reactionIndex: number,\n    compoundIndex: number,\n    compoundType: CompoundType,\n    updatedReactionCompound: IReactionCompound\n  ) => void\n  removeReactionCompound: (\n    reactionIndex: number,\n    compoundIndex: number,\n    compoundType: CompoundType\n  ) => void\n}\n\nconst defaultValue: IDefaultValue = {\n  /* Compounds */\n  compounds: [],\n  addCompound: () => {},\n  editCompound: () => {},\n  updateCompound: () => {},\n  removeCompound: () => {},\n  editedCompoundId: undefined,\n\n  /* Reactions */\n  reactions: [],\n  addReaction: () => {},\n  editReaction: () => {},\n  removeReaction: () => {},\n  editedReactionId: undefined,\n  addCompoundToReaction: () => {},\n  updateReactionCompound: () => {},\n  removeReactionCompound: () => {},\n}\n\n// Context Provider component\nexport const DataContext = createContext(defaultValue)\n\n// Hook to use the context values\nexport const useData = () => {\n  return useContext(DataContext)\n}\n\n/**\n * Store component to abstract logic from root component\n */\nexport const DataStore: React.FC<IFCWithChildren> = (props) => {\n  const { children } = props\n  const [currentColor, setCurrentColor] = useState<number>(0)\n  const [compounds, setCompounds] = useState<ICompound[]>([])\n  const [reactions, setReactions] = useState<IReaction[]>([])\n\n  // To keep track of edited elements:\n  const [editedCompoundId, setEditedCompoundId] = useState<string | undefined>(\n    undefined\n  )\n  const [editedReactionId, setEditedReactionId] = useState<string | undefined>(\n    undefined\n  )\n\n  /**\n   * Helper functions\n   */\n  const nextColor = () => {\n    if (currentColor === COMPOUND_COLORS_CODES.length - 1) {\n      setCurrentColor(0)\n      return\n    }\n    setCurrentColor(currentColor + 1)\n  }\n\n  const availableSymbol = (): string => {\n    const foundSymbols = new Array(COMPOUND_SYMBOLS.length).fill(false)\n\n    compounds.forEach((compound) => {\n      const index = COMPOUND_SYMBOLS.indexOf(compound.symbol)\n      if (index !== -1) foundSymbols[index] = true\n    })\n    for (let i = 0; i < foundSymbols.length; i++) {\n      if (!foundSymbols[i]) {\n        return COMPOUND_SYMBOLS[i]\n      }\n    }\n    return \"\"\n  }\n\n  /**\n   * Compounds state handling\n   */\n  const addCompound = (): void => {\n    const updatedCompounds = [...compounds]\n\n    updatedCompounds.push({\n      id: randomstring.generate(8),\n      color: COMPOUND_COLORS_CODES[currentColor],\n      concentration: 0,\n      symbol: availableSymbol(),\n      name: \"\",\n    })\n    nextColor()\n    setCompounds(updatedCompounds)\n  }\n\n  const editCompound = (index?: number) => {\n    if (typeof index === \"undefined\") {\n      setEditedCompoundId(undefined)\n      return\n    }\n    const id = compounds[index].id\n    setEditedCompoundId(id)\n  }\n\n  const updateCompound = (index: number, updatedCompound: ICompound) => {\n    const updatedCompounds = [...compounds]\n    updatedCompounds[index] = updatedCompound\n    setCompounds(updatedCompounds)\n  }\n\n  const removeCompound = (index: number): void => {\n    const compoundId = compounds[index].id\n\n    /**\n     * Remove from reactions that have this compound\n     */\n    const updatedReactions = JSON.parse(JSON.stringify(reactions))\n    updatedReactions.forEach((reaction: IReaction) => {\n      reaction.reactants = reaction.reactants.filter(\n        (reactionCompound: IReactionCompound) =>\n          reactionCompound.compoundId !== compoundId\n      )\n\n      reaction.products = reaction.products.filter(\n        (reactionCompound: IReactionCompound) =>\n          reactionCompound.compoundId !== compoundId\n      )\n    })\n    setReactions(updatedReactions)\n\n    /**\n     * Remove from compounds array\n     */\n    setCompounds([\n      ...compounds.slice(0, index),\n      ...compounds.slice(index + 1, compounds.length),\n    ])\n  }\n\n  /**\n   * Reactions state handling\n   */\n\n  const addReaction = (): void => {\n    const updatedReactions = [...reactions]\n\n    updatedReactions.push({\n      id: randomstring.generate(8),\n      reactants: [],\n      products: [],\n      kineticModel: 0,\n      kineticConstants: {},\n    })\n    setReactions(updatedReactions)\n  }\n\n  const editReaction = (index?: number) => {\n    if (typeof index === \"undefined\") {\n      setEditedReactionId(undefined)\n      return\n    }\n    const id = reactions[index].id\n    setEditedReactionId(id)\n  }\n\n  const removeReaction = (index: number): void => {\n    setReactions([\n      ...reactions.slice(0, index),\n      ...reactions.slice(index + 1, reactions.length),\n    ])\n  }\n\n  /**\n   * Handle reaction compound state\n   */\n  const getCompoundKey = (\n    compoundType: CompoundType\n  ): \"products\" | \"reactants\" => {\n    if (compoundType === CompoundType.Reactant) return \"reactants\"\n    return \"products\"\n  }\n\n  const addCompoundToReaction = (\n    index: number,\n    compoundId: string,\n    compoundType: CompoundType\n  ): void => {\n    const updatedReactions = [...reactions]\n\n    /* Determine which array to push to */\n    const key = getCompoundKey(compoundType)\n\n    updatedReactions[index][key].push({\n      compoundId,\n      stoichiometricCoefficient: 1,\n    })\n\n    setReactions(updatedReactions)\n  }\n\n  const updateReactionCompound = (\n    reactionIndex: number,\n    compoundIndex: number,\n    compoundType: CompoundType,\n    updatedReactionCompound: IReactionCompound\n  ): void => {\n    const updatedReactions = [...reactions]\n\n    /* Determine which array to push to */\n    const key = getCompoundKey(compoundType)\n\n    const updatedCompounds = [...updatedReactions[reactionIndex][key]]\n    updatedCompounds[compoundIndex] = updatedReactionCompound\n    updatedReactions[reactionIndex][key] = updatedCompounds\n\n    setReactions(updatedReactions)\n  }\n\n  const removeReactionCompound = (\n    reactionIndex: number,\n    compoundIndex: number,\n    compoundType: CompoundType\n  ) => {\n    const key = getCompoundKey(compoundType)\n\n    const updatedReactions = JSON.parse(JSON.stringify(reactions))\n\n    let reactionCompounds = reactions[reactionIndex][key]\n    reactionCompounds = [\n      ...reactionCompounds.slice(0, compoundIndex),\n      ...reactionCompounds.slice(compoundIndex + 1, reactionCompounds.length),\n    ]\n\n    updatedReactions[reactionIndex][key] = reactionCompounds\n    setReactions(updatedReactions)\n  }\n\n  return (\n    <DataContext.Provider\n      value={{\n        /* Compounds */\n        compounds,\n        addCompound,\n        editCompound,\n        updateCompound,\n        removeCompound,\n        editedCompoundId,\n\n        /* Reactions */\n        reactions,\n        addReaction,\n        editReaction,\n        removeReaction,\n        editedReactionId,\n        addCompoundToReaction,\n        updateReactionCompound,\n        removeReactionCompound,\n      }}\n    >\n      {children}\n    </DataContext.Provider>\n  )\n}\n","import { createGlobalStyle } from \"styled-components\"\n\nconst GlobalStyles = createGlobalStyle`\n  :root {\n    --color-primary-darkest: hsl(213,48%,15%);\n    --color-primary-darker: hsl(213,48%,30%);\n    --color-primary-dark: hsl(213,48%,50%);\n    --color-primary-normal: hsl(213,48%,70%);\n    --color-primary-light: hsl(213,48%,85%);\n    --color-primary-lighter: hsl(213,48%,95%);\n\n    --color-triadic-green-darker: hsl(93,40%,30%);\n    --color-triadic-green-dark: hsl(93,40%,45%);\n    --color-triadic-green-normal: hsl(93,40%,70%);\n    --color-triadic-green-light: hsl(93,40%,85%);\n    --color-triadic-green-lighter: hsl(93,40%,95%);\n\n    --color-triadic-red-darker: hsl(333,48%,30%);\n    --color-triadic-red-dark: hsl(333,48%,45%);\n    --color-triadic-red-normal: hsl(333,48%,70%);\n    --color-triadic-red-light: hsl(333,48%,85%);\n    --color-triadic-red-lighter: hsl(333,48%,95%);\n\n    --color-grey-dark: hsl(213, 20%, 30%);\n    --color-grey-normal: hsl(213, 20%, 45%);\n    --color-grey-light: hsl(213, 20%, 70%);\n    --color-grey-lighter: hsl(213, 20%, 85%);\n    --color-grey-lightest: hsl(213, 20%, 95%);\n  }\n  \n  body {\n    margin: 0;\n    margin-top: 30px;\n    background-color: var(--color-grey-lighter);\n    font-family: 'Mulish', sans-serif;\n  }\n\n  a, button {\n    cursor: pointer;\n  }\n\n  a, button, input {\n    transition: all 0.15s ease-in-out;\n  }\n\n  input {\n    background-color: rgba(0, 0, 0, 0.1);\n    border: none;\n    border-radius: 5px;\n    flex-grow: 1;\n    font-family: 'Mulish', sans-serif;\n    min-width: 0;\n    width: 0;\n    margin-left: 1rem;\n    outline: none;\n    padding: 0.5rem 1rem;\n\n    &:hover,\n    &:focus {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n\n    &:autofill {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n\n    &:focus {\n      box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.4);\n    }\n  }\n\n  /**\n   * Remove arrows from number inputs\n   */\n  \n  /* Chrome, Safari, Edge, Opera */\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  /* Firefox */\n  input[type=number] {\n    -moz-appearance: textfield;\n  }\n\n  @keyframes slide-in {\n    from {\n      opacity: 0;\n      transform: translateY(-20px);\n    }\n\n    to {\n      opacity: 1;\n      transform: translateY(0px);\n    }\n  }\n\n  @keyframes slide-out {\n    from {\n      opacity: 1;\n      transform: translateY(0px);\n    }\n    \n    to {\n      opacity: 0;\n      transform: translateY(-20px);\n    }\n  }\n`\n\nexport default GlobalStyles\n","export const COMPOUND_COLORS_CODES = [\n  \"blue1\",\n  \"pink3\",\n  \"yellow\",\n  \"skyBlue2\",\n  \"red2\",\n  \"green1\",\n  \"skyBlue1\",\n  \"orange\",\n  \"violet1\",\n  \"pink1\",\n  \"lime\",\n  \"waterGreen2\",\n  \"red1\",\n  \"blue2\",\n  \"green2\",\n  \"pink2\",\n  \"waterGreen1\",\n  \"violet2\",\n]\n\nexport const COMPOUND_COLORS = {\n  orange: \"hsl(30, 80%, 65%)\",\n  yellow: \"hsl(50, 80%, 65%)\",\n  lime: \"hsl(70, 80%, 65%)\",\n  green1: \"hsl(90, 80%, 65%)\",\n  green2: \"hsl(110, 80%, 65%)\",\n  waterGreen1: \"hsl(130, 80%, 65%)\",\n  waterGreen2: \"hsl(150, 80%, 65%)\",\n  skyBlue1: \"hsl(170, 80%, 65%)\",\n  skyBlue2: \"hsl(190, 80%, 65%)\",\n  blue1: \"hsl(210, 80%, 65%)\",\n  blue2: \"hsl(230, 80%, 65%)\",\n  violet1: \"hsl(250, 80%, 65%)\",\n  violet2: \"hsl(270, 80%, 65%)\",\n  pink1: \"hsl(290, 80%, 65%)\",\n  pink2: \"hsl(310, 80%, 65%)\",\n  pink3: \"hsl(330, 80%, 65%)\",\n  red1: \"hsl(350, 80%, 65%)\",\n  red2: \"hsl(10, 80%, 65%)\",\n}\n","export const COMPOUND_SYMBOLS = [\n  'A',\n  'B',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z'\n]","import styled from \"styled-components\"\n\nconst Reactor: React.FC = () => {\n  return (\n    <ReactorWrapper>\n      <ReactorInterior>\n        <ReactorLiquid id=\"liquid\" />\n      </ReactorInterior>\n    </ReactorWrapper>\n  )\n}\n\nconst ReactorWrapper = styled.div`\n  position: relative;\n  background-color: var(--color-grey-normal);\n  border-radius: 5px;\n  height: 220px;\n  margin-bottom: 40px;\n`\n\nconst ReactorInterior = styled.div`\n  position: absolute;\n  top: 10px;\n  bottom: 10px;\n  left: 10px;\n  right: 10px;\n\n  background-color: var(--color-grey-lighter);\n  border-radius: 2px;\n  overflow: hidden;\n`\n\nconst ReactorLiquid = styled.div`\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  transition: background-color 0.2s ease-in-out;\n\n  background-color: var(--color-grey-lightest);\n  height: 70%;\n  width: 100%;\n`\n\nexport default Reactor\n","import styled from \"styled-components\"\nimport { Link } from \"react-router-dom\"\n\n/* Components */\nimport { FiChevronRight } from \"react-icons/fi\"\nimport Reactor from \"../components/Reactor\"\n\ninterface IProps {\n  children: JSX.Element | JSX.Element[]\n}\n\nconst MainLayout: React.FC<IProps> = (props) => {\n  const { children } = props\n  return (\n    <MainLayoutWrapper>\n      <SideContent>\n        <Reactor />\n        <nav>\n          <Link to=\"/compounds\">\n            <p>Compounds</p>\n            <FiChevronRight />\n          </Link>\n          <Link to=\"/reactions\">\n            <p>Reactions</p>\n            <FiChevronRight />\n          </Link>\n          <Link to=\"/results\">\n            <p>Results</p>\n            <FiChevronRight />\n          </Link>\n        </nav>\n      </SideContent>\n      <MainContent>{children}</MainContent>\n    </MainLayoutWrapper>\n  )\n}\n\nexport default MainLayout\n\nconst MainLayoutWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-left: 20px;\n  margin-right: 20px;\n`\n\nconst SideContent = styled.div`\n  flex-basis: 180px;\n  flex-shrink: 0;\n  margin-right: 20px;\n\n  nav {\n    display: flex;\n    flex-direction: column;\n\n    a {\n      align-items: center;\n      background-color: var(--color-grey-light);\n      border-radius: 5px;\n      color: var(--color-grey-lightest);\n      display: flex;\n      font-size: 1.2rem;\n      justify-content: space-between;\n      margin-bottom: 10px;\n      padding: 5px 10px;\n      text-decoration: none;\n\n      &:hover {\n        background-color: var(--color-grey-dark);\n      }\n\n      p {\n        margin: 0;\n      }\n    }\n  }\n`\n\nconst MainContent = styled.div`\n  background: var(--color-grey-light);\n  border-radius: 5px;\n  flex-basis: 750px;\n  min-height: 600px;\n  padding: 20px;\n  position: relative;\n`\n","import styled from \"styled-components\"\n\ninterface IButton {\n  color?: string\n}\n\nconst Button = styled.button<IButton>`\n  align-items: center;\n  border-radius: 5px;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  font-size: 1.1rem;\n  justify-content: space-between;\n  padding: 5px 10px;\n  text-decoration: none;\n\n  ${(props) => colorsBase(props.color)}\n\n  &:hover {\n    ${(props) => colorsHover(props.color)}\n  }\n`\n\nexport default Button\n\nconst colorsBase = (color?: string) => {\n  switch (color) {\n    case \"green\":\n      return `\n        background-color: var(--color-triadic-green-normal);\n        color: var(--color-grey-lightest);\n      `\n    default:\n      return `\n        background-color: var(--color-primary-dark);\n        color: var(--color-grey-lightest);\n      `\n  }\n}\n\nconst colorsHover = (color?: string) => {\n  switch (color) {\n    case \"green\":\n      return `\n        background-color: var(--color-triadic-green-dark);\n      `\n    default:\n      return `\n        background-color: var(--color-primary-darker);\n      `\n  }\n}\n","import styled from \"styled-components\"\n\nconst PageTitle = styled.h2`\n  color: var(--color-grey-lightest);\n  font-size: 20px;\n  margin-top: 0;\n`\n\nexport default PageTitle\n","import styled from \"styled-components\"\n\nconst CardButton = styled.button`\n  align-items: center;\n  align-self: stretch;\n  background-color: unset;\n  border: none;\n  border-radius: 5px;\n  color: var(--color-grey-dark);\n  cursor: pointer;\n  display: flex;\n  opacity: 0;\n  font-size: 1.5em;\n  margin-left: 0.2rem;\n  padding: 0.5rem;\n  transition: all 0.15s ease-in-out;\n  z-index: 2;\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`\n\nexport default CardButton\n","/**\n * Validates if field is not empty, which equates to\n * not being undefined, null,\n * In the case it is a string, check that it is not empty.\n * In the case of a number, 0 is valid.\n *  */\nexport const validateNotEmpty = (value: unknown) => {\n  if (value === \"\") return false\n  if (typeof value === \"number\") return true\n  if (!value) return false\n  return true\n}\n\n/**\n * Validates if field is greater than, only if the value is numeric.\n * Otherwise, returns false.\n *  */\nexport const validateGreaterThan = (\n  value: unknown,\n  threshold: number,\n  equal: boolean\n) => {\n  if (typeof value !== \"number\") return false\n  if (value > threshold) return true\n  if (value === threshold && equal) return true\n  return false\n}\n","import styled from \"styled-components\"\n\n/* Components */\nimport CardButton from \"../CardButton\"\nimport { FiEdit, FiTrash2 } from \"react-icons/fi\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Hooks */\nimport { useEffect, useRef, useState } from \"react\"\n\n/* Helpers */\nimport { validateNotEmpty } from \"../../helpers/validators\"\n\n/* Types */\nimport { ICompound } from \"../../types/Compound\"\n\ninterface ICompoundCardProps {\n  compound: ICompound\n  editCompound: () => void\n  updateCompound: (compound: ICompound) => void\n  validateUnicity: (field: string, value: any) => boolean\n  removeCompound: () => void\n}\n\nconst CompoundCard: React.FC<ICompoundCardProps> = (props) => {\n  const {\n    compound,\n    editCompound,\n    updateCompound,\n    removeCompound,\n    validateUnicity,\n  } = props\n  const [symbolInput, setSymbolInput] = useState<string>(compound.symbol)\n\n  /* Reference to Reactor liquid to change color on hover */\n  const liquidRef = useRef<HTMLElement>()\n\n  useEffect(() => {\n    liquidRef.current = document.getElementById(\"liquid\") || undefined\n  }, [])\n\n  /**\n   * Update symbol input on compound update\n   */\n  useEffect(() => {\n    setSymbolInput(compound.symbol)\n  }, [compound])\n\n  /**\n   * Form submission handling\n   */\n  const handleSymbolChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSymbolInput(event.target.value)\n  }\n\n  const validateAndUpdateSymbol = () => {\n    if (\n      validateNotEmpty(symbolInput) &&\n      validateUnicity(\"symbol\", symbolInput)\n    ) {\n      /* Update symbol */\n      const updatedCompound = { ...compound }\n      updatedCompound.symbol = symbolInput\n      updateCompound(updatedCompound)\n    } else {\n      /* Reset input initial state */\n      setSymbolInput(compound.symbol)\n    }\n  }\n\n  /**\n   * Toggling\n   */\n\n  return (\n    <CompoundCardWrapper>\n      <CompoundCardInner\n        onMouseEnter={() => {\n          // @ts-ignore\n          liquidRef.current.style.backgroundColor =\n            COMPOUND_COLORS[compound.color as keyof typeof COMPOUND_COLORS]\n        }}\n        onMouseLeave={() => {\n          // @ts-ignore\n          liquidRef.current.style.backgroundColor = \"hsl(213, 20%, 95%)\"\n        }}\n      >\n        <SymbolInput\n          value={symbolInput}\n          onBlur={validateAndUpdateSymbol}\n          onChange={handleSymbolChange}\n        />\n\n        {/* Button to toggle modal edition */}\n        <CardButton onClick={editCompound}>\n          <FiEdit />\n        </CardButton>\n\n        {/* Button to delete the compound */}\n        <CardButton onClick={removeCompound}>\n          <FiTrash2 />\n        </CardButton>\n\n        {/* Bullet to display the color associated with the compound */}\n        <CompoundColorBullet\n          className=\"bullet\"\n          color={compound.color as keyof typeof COMPOUND_COLORS}\n        />\n      </CompoundCardInner>\n    </CompoundCardWrapper>\n  )\n}\n\nexport default CompoundCard\n\n/**\n * Styled components\n */\n\nconst CompoundCardWrapper = styled.li`\n  flex-basis: 33%;\n`\n\nconst CompoundCardInner = styled.div`\n  margin: 5px;\n  padding: 20px;\n  position: relative;\n\n  align-items: center;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: var(--color-grey-lighter);\n  border-radius: 5px;\n  display: flex;\n  color: var(--color-grey-lightest);\n  cursor: pointer;\n  overflow: hidden;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    & {\n      box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n      transform: translateY(-2px);\n    }\n\n    & > button {\n      opacity: 1;\n    }\n\n    & > .bullet {\n      transform: scale(25);\n      border-color: var(--color-grey-lighter);\n    }\n    & > .symbol-input:after {\n      margin-left: 0%;\n      width: auto;\n    }\n  }\n\n  button {\n    padding: 0.8rem;\n  }\n`\n\ninterface ICompoundColorBulletProps {\n  color: keyof typeof COMPOUND_COLORS\n}\n\nconst CompoundColorBullet = styled.div<ICompoundColorBulletProps>`\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  top: 10px;\n  right: 10px;\n  border-radius: 50%;\n  transition: all 0.2s ease-in-out;\n  z-index: 1;\n\n  background-color: ${(props) => COMPOUND_COLORS[props.color]};\n  border: 1px solid var(--color-grey-light);\n`\n\nconst SymbolInput = styled.input`\n  font-size: 2rem;\n  margin-left: 0;\n  margin-right: 0.5rem;\n  z-index: 2;\n`\n","import styled from \"styled-components\"\n\n/* Types */\nimport { IFCWithChildren } from \"../types/FCWithChildren\"\n\nconst Error: React.FC<IFCWithChildren> = (props) => {\n  const { children } = props\n  return <ErrorWrapper className=\"error\">{children}</ErrorWrapper>\n}\n\nconst ErrorWrapper = styled.div`\n  position: absolute;\n  bottom: 0rem;\n  right: 0rem;\n\n  background-color: var(--color-triadic-red-dark);\n  border-radius: 5px;\n  box-shadow: 0px 0px 4px var(--color-triadic-red-darker);\n  color: white;\n  padding: 0.5rem;\n  pointer-events: none;\n  opacity: 0;\n  transform: translateY(105%);\n  z-index: 4;\n`\n\nexport default Error\n","import styled from \"styled-components\"\n\ninterface IInputProps extends React.HTMLProps<HTMLInputElement> {\n  errors?: boolean\n}\n\nconst Input = styled.input<IInputProps>`\n  ${(props) =>\n    props.errors\n      ? `\n    box-shadow: 0px 0px 4px 1px var(--color-triadic-red-dark),\n      inset 0px 0px 0px 1px var(--color-triadic-red-dark) !important;\n  `\n      : \"\"}\n`\n\nexport default Input\n","import styled from \"styled-components\"\n\n/* Components */\nimport { FiX } from \"react-icons/fi\"\n\n/* Hooks */\nimport { useEffect } from \"react\"\n\n/* Types */\nimport { IFCWithChildren } from \"../types/FCWithChildren\"\n\nexport interface IClosing {\n  closing?: boolean\n}\n\ntype IEditModalProps = IClosing &\n  IFCWithChildren & {\n    setClosing: (closing: boolean) => void\n    handleClose: () => void\n  }\n\nconst EditModal: React.FC<IEditModalProps> = (props) => {\n  const { children, closing, setClosing, handleClose } = props\n\n  const closeModal = () => {\n    /**\n     * Animate and close modal after slide animation\n     */\n    setClosing(true)\n    setTimeout(() => {\n      handleClose()\n    }, 250)\n  }\n\n  useEffect(() => {\n    if (closing) {\n      closeModal()\n    }\n    // eslint-disable-next-line\n  }, [closing])\n\n  return (\n    <CompoundEditModalWrapper closing={closing}>\n      <CompoundEditModalInner closing={closing}>\n        <CloseButton onClick={closeModal} closing={closing}>\n          <FiX />\n        </CloseButton>\n        {children}\n      </CompoundEditModalInner>\n    </CompoundEditModalWrapper>\n  )\n}\n\nexport default EditModal\n\nconst CompoundEditModalWrapper = styled.div<IClosing>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  min-height: 100%;\n  background-color: var(--color-grey-light);\n\n  animation-name: dim-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  border-radius: 5px;\n  display: flex;\n\n  /* Override animation upon modal close */\n  ${(props) =>\n    props.closing\n      ? `\n    animation-name: dim-out;\n    animation-timing-function: ease-in-out;\n    animation-duration: 0.25s;\n    animation-iteration-count: 1;\n    animation-fill-mode: forwards;\n  `\n      : \"\"}\n\n  @keyframes dim-in {\n    from {\n      background-color: rgba(0, 0, 0, 0);\n    }\n\n    to {\n      background-color: rgba(0, 0, 0, 0.2);\n    }\n  }\n\n  @keyframes dim-out {\n    from {\n      background-color: rgba(0, 0, 0, 0.2);\n    }\n\n    to {\n      background-color: rgba(0, 0, 0, 0);\n    }\n  }\n`\n\nconst CompoundEditModalInner = styled.div<IClosing>`\n  align-self: stretch;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: var(--color-grey-lighter);\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  border-radius: 5px;\n  flex-grow: 1;\n  margin: 10px;\n  padding: 2rem;\n  padding-top: 3.5rem;\n  position: relative;\n  z-index: 3;\n\n  /* Override animation upon modal close */\n  ${(props) =>\n    props.closing\n      ? `\n    animation-name: slide-out;\n    animation-timing-function: ease-in-out;\n    animation-duration: 0.25s;\n    animation-iteration-count: 1;\n    animation-fill-mode: forwards;\n  `\n      : \"\"}\n\n  label {\n    color: var(--color-grey-dark);\n  }\n\n  input {\n    background-color: rgba(0, 0, 0, 0.1);\n    border-radius: 5px;\n    flex-grow: 1;\n    min-width: 0;\n    margin-left: 1rem;\n    padding: 0.5rem 1rem;\n\n    &:hover,\n    &:focus {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n\n    &:autofill {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n\n    &:focus {\n      box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.4);\n    }\n  }\n`\n\nconst CloseButton = styled.button<IClosing>`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n\n  align-items: center;\n  background-color: unset;\n  border: none;\n  border-radius: 5px;\n  display: flex;\n  ${(props) => (props.closing ? \"disabled: true;\" : \"\")}\n  font-size: 1.3rem;\n  padding: 0.5rem;\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`\n","import styled from \"styled-components\"\nimport { useFormik } from \"formik\"\n\n/* Components */\nimport Button from \"../Button\"\nimport Error from \"../Error\"\nimport Input from \"../Input\"\nimport EditModal from \"../EditModal\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Helpers */\nimport { validateNotEmpty, validateGreaterThan } from \"../../helpers/validators\"\n\n/* Hooks */\nimport { useState } from \"react\"\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { ICompound } from \"../../types/Compound\"\n\ninterface ICompoundEditModalProps {\n  compound: ICompound\n  closeModal: () => void\n}\n\nconst CompoundEditModal: React.FC<ICompoundEditModalProps> = (props) => {\n  const { compound, closeModal } = props\n  const { compounds, updateCompound } = useData()\n  const [closing, setClosing] = useState<boolean>(false)\n  const compoundIndex = compounds.findIndex((comp) => comp.id === compound.id)\n\n  /**\n   * Validate method for Formik\n   */\n  interface IErrors {\n    symbol?: string\n    concentration?: string\n    name?: string\n  }\n\n  const validate = (values: ICompound) => {\n    const errors: IErrors = {}\n\n    /* Symbol validation */\n    if (!validateNotEmpty(values.symbol))\n      errors.symbol = \"Symbol cannot be empty\"\n    else if (!validateUnicity(\"symbol\", values.symbol))\n      errors.symbol = \"Symbol is already used\"\n\n    /* Concentration validation */\n    if (!validateNotEmpty(values.concentration))\n      errors.concentration = \"Concentration cannot be empty\"\n    else if (!validateGreaterThan(values.concentration, 0, true))\n      errors.concentration = \"Concentration cannot be lower than 0\"\n\n    return errors\n  }\n\n  const validateUnicity = (field: string, value: any): boolean => {\n    for (var i = 0; i < compounds.length; i++) {\n      // @ts-ignore\n      if (i !== compoundIndex && compounds[i][field] === value) {\n        return false\n      }\n    }\n    return true\n  }\n\n  /**\n   * Formik form initialization\n   */\n  const formik = useFormik({\n    // @ts-ignore\n    initialValues: {\n      symbol: compound.symbol,\n      concentration: compound.concentration,\n      name: compound.name,\n    },\n    validate,\n    onSubmit: (values) => {\n      const updatedCompound = { ...compound, ...values }\n      updateCompound(compoundIndex, updatedCompound)\n      setClosing(true)\n    },\n  })\n\n  return (\n    <EditModal\n      closing={closing}\n      setClosing={setClosing}\n      handleClose={closeModal}\n    >\n      <form onSubmit={formik.handleSubmit}>\n        <SymbolFieldInput color={compound.color}>\n          <label htmlFor=\"symbol\">Symbol:</label>\n          <Input\n            errors={!!formik.errors.symbol}\n            name=\"symbol\"\n            autoComplete=\"off\"\n            color={compound.color}\n            onChange={formik.handleChange}\n            value={formik.values.symbol}\n          />\n          {formik.errors.symbol && <Error>{formik.errors.symbol}</Error>}\n        </SymbolFieldInput>\n\n        <FieldInput>\n          <label htmlFor=\"concentration\">Concentration [mol/L]:</label>\n          <Input\n            errors={!!formik.errors.concentration}\n            name=\"concentration\"\n            type=\"number\"\n            onChange={formik.handleChange}\n            value={formik.values.concentration}\n          />\n          {formik.errors.concentration && (\n            <Error>{formik.errors.concentration}</Error>\n          )}\n        </FieldInput>\n\n        <FieldInput>\n          <label htmlFor=\"name\">Compound name (optional):</label>\n          <input\n            name=\"name\"\n            autoComplete=\"off\"\n            onChange={formik.handleChange}\n            value={formik.values.name}\n          />\n        </FieldInput>\n        <SubmitButton color=\"green\" type=\"submit\">\n          Done\n        </SubmitButton>\n      </form>\n    </EditModal>\n  )\n}\n\nexport default CompoundEditModal\n\n/**\n * Styled components\n */\n\nconst FieldInput = styled.div`\n  display: flex;\n  align-items: center;\n  align-self: stretch;\n  padding: 0.5rem;\n  position: relative;\n\n  &:hover > .error {\n    opacity: 1 !important;\n  }\n`\n\ninterface ISymbolInputProps {\n  color: string\n}\n\nconst SymbolFieldInput = styled(FieldInput)<ISymbolInputProps>`\n  align-items: flex-start;\n  background-color: ${(props) =>\n    COMPOUND_COLORS[props.color as keyof typeof COMPOUND_COLORS]};\n  border-radius: 5px;\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  margin-bottom: 0.5rem;\n  padding: 1rem;\n\n  label {\n    font-size: 1.5rem;\n  }\n\n  input {\n    font-size: 3rem;\n    margin-left: 1rem;\n    width: 0;\n  }\n`\n\nconst SubmitButton = styled(Button)`\n  font-size: 1.2rem;\n  justify-content: center;\n  margin-top: 2rem;\n  margin-left: 10%;\n  padding: 0.5rem;\n  width: 80%;\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport CompoundCard from \"./CompoundCard\"\nimport CompoundEditModal from \"./CompoundEditModal\"\n\n/* Hooks */\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { ICompound } from \"../../types/Compound\"\n\ninterface ICompoundListProps {\n  compounds: ICompound[]\n}\n\nconst CompoundList: React.FC<ICompoundListProps> = (props) => {\n  const { compounds } = props\n  const { editedCompoundId, editCompound, updateCompound, removeCompound } =\n    useData()\n\n  const editedCompound = editedCompoundId\n    ? compounds.find((compound) => compound.id === editedCompoundId)\n    : undefined\n\n  return (\n    <CompoundListWrapper>\n      {compounds.map((compound, index) => (\n        <CompoundCard\n          key={index}\n          compound={compound}\n          editCompound={(): void => {\n            editCompound(index)\n          }}\n          updateCompound={(compound: ICompound): void => {\n            updateCompound(index, compound)\n          }}\n          removeCompound={(): void => {\n            removeCompound(index)\n          }}\n          validateUnicity={(field: string, value: any): boolean => {\n            for (var i = 0; i < compounds.length; i++) {\n              // @ts-ignore\n              if (i !== index && compounds[i][field] === value) {\n                return false\n              }\n            }\n            return true\n          }}\n        />\n      ))}\n\n      {/* Edit modal */}\n      {editedCompoundId && (\n        <CompoundEditModal\n          compound={editedCompound as ICompound}\n          closeModal={() => editCompound()}\n        />\n      )}\n    </CompoundListWrapper>\n  )\n}\n\nexport default CompoundList\n\n/**\n * Styled components\n */\n\nconst CompoundListWrapper = styled.ul`\n  align-self: stretch;\n  display: flex;\n  flex-wrap: wrap;\n  list-style-type: none;\n  padding-left: 0;\n`\n","/* Components */\nimport Button from \"../components/Button\"\nimport PageTitle from \"../components/PageTitle\"\nimport CompoundList from \"../components/compounds/CompoundList\"\nimport { FiPlus } from \"react-icons/fi\"\n\n/* Hooks */\nimport { useEffect } from \"react\"\nimport { useData } from \"../context/DataContext\"\n\nconst CompoundsPage: React.FC = () => {\n  const { compounds, addCompound, editCompound } = useData()\n\n  useEffect(() => {\n    return () => {\n      /* Sets edited compound to undefined on dismount */\n      editCompound()\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <>\n      <PageTitle>Compounds</PageTitle>\n      <Button color=\"green\" onClick={addCompound}>\n        Add <FiPlus />\n      </Button>\n      <CompoundList compounds={compounds} />\n    </>\n  )\n}\n\nexport default CompoundsPage\n","import styled from \"styled-components\"\n\nconst Notice = styled.p`\n  color: var(--color-grey-normal);\n  font-style: italic;\n  margin: 0.5rem;\n`\n\nexport default Notice\n","import styled from \"styled-components\"\n\n/* Components */\nimport { Fragment } from \"react\"\nimport Notice from \"../Notice\"\nimport { FiArrowRight, FiPlus } from \"react-icons/fi\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Hooks */\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { ICompound } from \"../../types/Compound\"\nimport { IReaction } from \"../../types/Reaction\"\n\ninterface IReactionPreviewProps {\n  reaction: IReaction\n}\n\nconst ReactionPreview: React.FC<IReactionPreviewProps> = (props) => {\n  const { reaction } = props\n  const { compounds } = useData()\n\n  return (\n    <ReactionPreviewWrapper>\n      {reaction.reactants.length === 0 && reaction.products.length === 0 && (\n        <Notice>No reaction data</Notice>\n      )}\n\n      {reaction.reactants.map((reactionCompound, index) => {\n        const compound = compounds.find(\n          (c) => c.id === reactionCompound.compoundId\n        ) as ICompound\n\n        return (\n          <Fragment key={reactionCompound.compoundId}>\n            {index !== 0 && <FiPlus size={25} />}\n            <CompoundWrapper>\n              <p>{reactionCompound.stoichiometricCoefficient}</p>\n              <CompoundTile\n                color={compound.color as keyof typeof COMPOUND_COLORS}\n              >\n                {compound.symbol}\n              </CompoundTile>\n            </CompoundWrapper>\n          </Fragment>\n        )\n      })}\n\n      {reaction.reactants.length > 0 && reaction.products.length > 0 && (\n        <FiArrowRight size={25} />\n      )}\n\n      {reaction.products.map((reactionCompound, index) => {\n        const compound = compounds.find(\n          (c) => c.id === reactionCompound.compoundId\n        ) as ICompound\n\n        return (\n          <Fragment key={reactionCompound.compoundId}>\n            {index !== 0 && <FiPlus size={25} />}\n            <CompoundWrapper>\n              <p>{reactionCompound.stoichiometricCoefficient}</p>\n              <CompoundTile\n                color={compound.color as keyof typeof COMPOUND_COLORS}\n              >\n                {compound.symbol}\n              </CompoundTile>\n            </CompoundWrapper>\n          </Fragment>\n        )\n      })}\n    </ReactionPreviewWrapper>\n  )\n}\n\nexport default ReactionPreview\n\nconst ReactionPreviewWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-grow: 1;\n`\n\nconst CompoundWrapper = styled.div`\n  align-items: flex-end;\n  display: flex;\n  margin: 0 0.5rem;\n\n  p {\n    color: var(--color-grey-dark);\n    font-size: 1.6rem;\n    margin: 0 0 0.2rem 0;\n  }\n`\n\ninterface ICompoundColorBulletProps {\n  color: keyof typeof COMPOUND_COLORS\n}\n\nconst CompoundTile = styled.div<ICompoundColorBulletProps>`\n  background-color: ${(props) => COMPOUND_COLORS[props.color]};\n  border-radius: 5px;\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  color: var(--color-grey-dark);\n  font-size: 1.6rem;\n  margin: 0 0.5rem;\n  padding: 0.5rem 0.9rem;\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport CardButton from \"../CardButton\"\nimport ReactionPreview from \"./ReactionPreview\"\nimport { FiEdit, FiTrash2 } from \"react-icons/fi\"\n\n/* Types */\nimport { IReaction } from \"../../types/Reaction\"\n\ninterface IReactionCardProps {\n  reaction: IReaction\n  editReaction: () => void\n  removeReaction: () => void\n}\n\nconst ReactionCard: React.FC<IReactionCardProps> = (props) => {\n  const { reaction, editReaction, removeReaction } = props\n\n  return (\n    <ReactionCardWrapper>\n      <ReactionPreview reaction={reaction} />\n      <CardButton onClick={editReaction}>\n        <FiEdit />\n      </CardButton>\n      <CardButton onClick={removeReaction}>\n        <FiTrash2 />\n      </CardButton>\n    </ReactionCardWrapper>\n  )\n}\n\nexport default ReactionCard\n\nconst ReactionCardWrapper = styled.div`\n  margin: 10px;\n  padding: 20px;\n  position: relative;\n\n  align-items: center;\n  align-self: stretch;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: var(--color-grey-lighter);\n  border-radius: 5px;\n  display: flex;\n  color: var(--color-grey-dark);\n  cursor: pointer;\n  overflow: hidden;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    background-color: var(--color-grey-lightest);\n\n    & {\n      box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n      transform: translateY(-2px);\n    }\n\n    & > button {\n      opacity: 1;\n    }\n\n    & > .bullet {\n      transform: scale(20);\n      border-color: var(--color-grey-lighter);\n    }\n    & > .symbol-input:after {\n      margin-left: 0%;\n      width: auto;\n    }\n  }\n\n  p {\n    flex-grow: 1;\n    margin: 0;\n  }\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport CardButton from \"../CardButton\"\nimport { FiTrash2 } from \"react-icons/fi\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Helpers */\nimport { validateNotEmpty } from \"../../helpers/validators\"\n\n/* Hooks */\nimport { useState } from \"react\"\n\n/* Types */\nimport { ICompound } from \"../../types/Compound\"\nimport { IReactionCompound } from \"../../types/Reaction\"\n\ninterface IReactionCompoundCardProps {\n  key: string\n  compound: ICompound\n  reactionCompound: IReactionCompound\n  updateReactionCompound: (updatedReactionCompound: IReactionCompound) => void\n  removeReactionCompound: () => void\n}\n\nconst ReactionCompoundCard: React.FC<IReactionCompoundCardProps> = (props) => {\n  const {\n    compound,\n    reactionCompound,\n    updateReactionCompound,\n    removeReactionCompound,\n  } = props\n\n  /* Coefficient is short for Stoichiometric Coefficient in this component */\n  const [coefficientInput, setCoefficientInput] = useState<number | \"\">(\n    reactionCompound.stoichiometricCoefficient\n  )\n\n  const handleCoefficientChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    if (event.target.value === \"\") {\n      setCoefficientInput(\"\")\n      return\n    }\n    setCoefficientInput(parseFloat(event.target.value))\n  }\n\n  const validateAndUpdateCoefficient = () => {\n    if (validateNotEmpty(coefficientInput)) {\n      updateReactionCompound({\n        ...reactionCompound,\n        stoichiometricCoefficient: coefficientInput as number,\n      })\n      return\n    }\n    setCoefficientInput(reactionCompound.stoichiometricCoefficient)\n  }\n\n  return (\n    <ReactionCompoundCardWrapper\n      color={compound.color as keyof typeof COMPOUND_COLORS}\n    >\n      <h1>{compound.symbol}</h1>\n      <input\n        value={coefficientInput}\n        type=\"number\"\n        onChange={handleCoefficientChange}\n        onBlur={validateAndUpdateCoefficient}\n      />\n      <CardButton onClick={removeReactionCompound}>\n        <FiTrash2 />\n      </CardButton>\n    </ReactionCompoundCardWrapper>\n  )\n}\n\nexport default ReactionCompoundCard\n\ninterface IReactionCompoundCardWrapperProps {\n  color: keyof typeof COMPOUND_COLORS\n}\n\nconst ReactionCompoundCardWrapper = styled.div<IReactionCompoundCardWrapperProps>`\n  margin: 5px;\n  padding: 20px;\n  position: relative;\n\n  align-items: center;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: ${(props) => COMPOUND_COLORS[props.color]};\n  border-radius: 5px;\n  color: var(--color-grey-dark);\n  display: flex;\n  cursor: pointer;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    & {\n      box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n      transform: translateY(-2px);\n    }\n  }\n\n  h1 {\n    flex-grow: 1;\n    font-size: 1.8rem;\n    margin: 0;\n  }\n\n  input {\n    font-size: 1.3rem;\n    width: 0px;\n  }\n\n  button {\n    opacity: 1;\n    margin-left: 0.5rem;\n  }\n`\n","/* Components */\nimport ReactionCompoundCard from \"./ReactionCompoundCard\"\n\n/* Hooks */\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { ICompound } from \"../../types/Compound\"\nimport { IReactionCompound } from \"../../types/Reaction\"\nimport { CompoundType } from \"../../context/DataContext\"\n\ninterface IReactionCompoundListProps {\n  compoundType: CompoundType\n  reactionCompounds: IReactionCompound[]\n  reactionIndex: number\n}\n\nconst ReactionCompoundList: React.FC<IReactionCompoundListProps> = (props) => {\n  const { reactionCompounds, reactionIndex, compoundType } = props\n  const { compounds, updateReactionCompound, removeReactionCompound } =\n    useData()\n\n  return (\n    <>\n      {reactionCompounds.map((reactionCompound) => {\n        const compound = compounds.find(\n          (c) => c.id === reactionCompound.compoundId\n        ) as ICompound\n        /**\n         * compoundIndex is the index in the reaction object (reactants or products)\n         *  */\n        const compoundIndex = reactionCompounds.findIndex(\n          (c) => c.compoundId === reactionCompound.compoundId\n        ) as number\n\n        return (\n          <ReactionCompoundCard\n            key={reactionCompound.compoundId}\n            compound={compound}\n            reactionCompound={reactionCompound}\n            updateReactionCompound={(\n              updatedReactionCompound: IReactionCompound\n            ) => {\n              updateReactionCompound(\n                reactionIndex,\n                compoundIndex,\n                compoundType,\n                updatedReactionCompound\n              )\n            }}\n            removeReactionCompound={() => {\n              removeReactionCompound(reactionIndex, compoundIndex, compoundType)\n            }}\n          />\n        )\n      })}\n    </>\n  )\n}\n\nexport default ReactionCompoundList\n","import styled from \"styled-components\"\nimport randomstring from \"randomstring\"\n\n/* Components */\nimport { FiChevronDown } from \"react-icons/fi\"\n\n// Hooks\nimport { useEffect, useState, useRef, useCallback } from \"react\"\n\ninterface ISelectProps<T> {\n  defaultDisplayValue: string\n  initialValue?: ISelectOption<T>\n  selectOptions: ISelectOption<T>[]\n  onSelectionChange: (value?: T) => void\n  alignment?: string\n}\n\ninterface ISelectOption<T> {\n  value?: T\n  displayText?: string\n  collapsedDisplayText?: string\n}\n\n/* Reusable custom select component */\nconst Select = <T extends string | number>(props: ISelectProps<T>) => {\n  // Destructure props\n  const {\n    alignment,\n    defaultDisplayValue,\n    initialValue,\n    onSelectionChange,\n    selectOptions,\n  } = props\n\n  // Set state variables\n  const [selecting, setSelecting] = useState<boolean>(false)\n  const [currentValue, setCurrentValue] = useState<T | undefined>(undefined)\n\n  // Use ref for id value\n  const id = useRef<string>(randomstring.generate(8))\n\n  /*\n   * Save a ref select component, for event add and remove listeners\n   * when clicking outside\n   */\n  const selectRef = useRef<HTMLElement | null>(null)\n  // const dropdownRef = useRef<HTMLElement | null>(null)\n\n  useEffect(() => {\n    // Save initialValue provided as prop to currentValue, if present\n    if (initialValue) setCurrentValue(initialValue.value)\n\n    // Save ref to rendered Select component\n    selectRef.current = document.getElementById(id.current)\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  /*\n   * Set ref to dropdown when visible\n   */\n  useEffect(() => {\n    if (selecting) selectRef.current = document.getElementById(id.current)\n    else selectRef.current = null\n  }, [selecting])\n\n  /*\n   * A useCallback hook here is needed so that the exact same function is passed\n   * to both addEventListener and removeEventListener\n   *\n   * https://dev.to/marcostreng/how-to-really-remove-eventlisteners-in-react-3och\n   */\n  const clickOutsideHandler = useCallback((event: any): void => {\n    // TODO: Better typing\n    // Uses tips from:\n    // https://stackoverflow.com/questions/152975/how-do-i-detect-a-click-outside-an-element/3028037#3028037\n\n    if (!selectRef.current?.contains(event.target)) {\n      toggleSelecting()\n      // Change state manually because clickOutsideHandler can't have toggleSelecting as a dependency\n      setSelecting(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  /*\n   * Toggles select options, while adding listeners for closing when clicking outside\n   * of the dropdown\n   */\n  const toggleSelecting = (): void => {\n    // Event listeners handling\n    if (!selecting) {\n      window.addEventListener(\"click\", clickOutsideHandler, true)\n    } else {\n      window.removeEventListener(\"click\", clickOutsideHandler, true)\n    }\n\n    // Toggle state variable\n    setSelecting(!selecting)\n  }\n\n  /*\n   * Handles value selection\n   * Definition is pretty self-explanatory\n   */\n  const selectValue = (value?: T): void => {\n    toggleSelecting()\n    setCurrentValue(value)\n    onSelectionChange(value)\n  }\n\n  /*\n   * Current selected value data\n   */\n  const currentValueOption: ISelectOption<T> | undefined = selectOptions.find(\n    (option) => option.value === currentValue\n  )\n\n  return (\n    <SelectWrapper id={id.current}>\n      <SelectValue selecting={selecting} onClick={toggleSelecting}>\n        <p>{currentValueOption?.collapsedDisplayText || defaultDisplayValue}</p>\n        <FiChevronDown size={10} />\n      </SelectValue>\n      {selecting && (\n        <SelectOptions alignment={alignment || \"left\"}>\n          <SelectOption onClick={() => selectValue(undefined)}>\n            <p>{defaultDisplayValue}</p>\n          </SelectOption>\n          {selectOptions.map(({ value, displayText }) => (\n            <SelectOption\n              key={value}\n              onClick={() => {\n                selectValue(value)\n              }}\n            >\n              <p>{displayText}</p>\n            </SelectOption>\n          ))}\n        </SelectOptions>\n      )}\n    </SelectWrapper>\n  )\n}\n\nexport default Select\n\ninterface ISelecting {\n  selecting: boolean\n}\n\nconst SelectWrapper = styled.div`\n  position: relative;\n  flex-grow: 1;\n`\n\nconst SelectValue = styled.div<ISelecting>`\n  align-items: center;\n  background-color: var(--color-grey-lightest);\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  display: flex;\n  font-size: 1.1rem;\n  outline: none;\n  padding: 5px 10px;\n  transition: all 0.15s linear;\n  ${(props) =>\n    props.selecting\n      ? `box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15),\n    0px 0px 2px var(--color-grey-normal);`\n      : \"\"}\n\n  & > p {\n    margin: 0;\n    flex-grow: 1;\n  }\n\n  & > svg {\n    margin-left: 0.5rem;\n  }\n`\n\ninterface ISelectOptions {\n  alignment: string\n}\n\nconst SelectOptions = styled.div<ISelectOptions>`\n  position: absolute;\n  top: 100%;\n\n  align-items: stretch;\n  ${(props) => (props.alignment === \"left\" ? \"left: 0;\" : \"\")}\n  ${(props) => (props.alignment === \"right\" ? \"right: 0;\" : \"\")}\n  background-color: var(--color-grey-lightest);\n  border: none;\n  border-radius: 5px;\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15),\n    0px 0px 2px var(--color-grey-normal);\n  display: flex;\n  flex-direction: column;\n  font-size: 1.2rem;\n  margin-top: 0.5rem;\n  max-height: 400px;\n  overflow-y: scroll;\n  padding: 0.5rem;\n  transition: all 0.05s linear;\n  width: auto;\n  z-index: 20;\n`\n\nconst SelectOption = styled.button`\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 1rem;\n  text-align: left;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n\n  &:hover {\n    background-color: var(--color-grey-lighter);\n  }\n\n  & > p {\n    white-space: nowrap;\n    overflow-x: hidden;\n    text-overflow: ellipsis;\n    margin: 0;\n  }\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport Button from \"../Button\"\nimport EditModal from \"../EditModal\"\nimport Notice from \"../Notice\"\nimport ReactionCompoundList from \"./ReactionCompoundList\"\nimport ReactionPreview from \"./ReactionPreview\"\nimport Select from \"../Select\"\nimport { FiPlus } from \"react-icons/fi\"\n\n/* Hooks */\nimport { useState } from \"react\"\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { ICompound } from \"../../types/Compound\"\nimport { IReaction } from \"../../types/Reaction\"\nimport { CompoundType } from \"../../context/DataContext\"\n\ninterface IReactionEditModalProps {\n  compounds: ICompound[]\n  reaction: IReaction\n  closeModal: () => void\n  addCompoundToReaction: (\n    compoundId: string,\n    compoundType: CompoundType\n  ) => void\n}\n\nconst ReactionEditModal: React.FC<IReactionEditModalProps> = (props) => {\n  const { compounds, reaction, addCompoundToReaction, closeModal } = props\n  const { reactions } = useData()\n  const [closing, setClosing] = useState<boolean>(false)\n  const reactionIndex = reactions.findIndex((rea) => rea.id === reaction.id)\n\n  /* For the select input, both for reactants and products */\n  const [selectReactantIndex, setSelectReactantIndex] = useState<\n    number | undefined\n  >(undefined)\n  const [selectProductIndex, setSelectProductIndex] = useState<\n    number | undefined\n  >(undefined)\n\n  /* For formik state */\n  const selectReactantInitialValue = selectReactantIndex\n    ? {\n        value: selectReactantIndex,\n        displayText: compounds[selectReactantIndex].symbol,\n        collapsedDisplayText: compounds[selectReactantIndex].symbol,\n      }\n    : undefined\n\n  const selectProductInitialValue = selectProductIndex\n    ? {\n        value: selectProductIndex,\n        displayText: compounds[selectProductIndex].symbol,\n        collapsedDisplayText: compounds[selectProductIndex].symbol,\n      }\n    : undefined\n\n  return (\n    <EditModal\n      closing={closing}\n      setClosing={setClosing}\n      handleClose={closeModal}\n    >\n      <ReactionPreview reaction={reaction} />\n      <CompoundsInputSection>\n        <CompoundInputWrapper>\n          <h2>Reactants</h2>\n          <AddCompound>\n            <Select\n              defaultDisplayValue=\"Compound...\"\n              initialValue={selectReactantInitialValue}\n              selectOptions={compounds.map((compound, index) => ({\n                value: index,\n                displayText: compound.symbol,\n                collapsedDisplayText: compound.symbol,\n              }))}\n              onSelectionChange={(index: number | undefined) =>\n                setSelectReactantIndex(index)\n              }\n            />\n            <Button\n              color=\"green\"\n              onClick={() => {\n                if (selectReactantIndex !== undefined)\n                  addCompoundToReaction(\n                    compounds[selectReactantIndex].id,\n                    CompoundType.Reactant\n                  )\n              }}\n            >\n              Add <FiPlus />\n            </Button>\n          </AddCompound>\n          <CompoundInputInner>\n            {reaction.reactants.length !== 0 ? (\n              <ReactionCompoundList\n                reactionIndex={reactionIndex}\n                reactionCompounds={reaction.reactants}\n                compoundType={CompoundType.Reactant}\n              />\n            ) : (\n              <Notice>No compounds...</Notice>\n            )}\n          </CompoundInputInner>\n        </CompoundInputWrapper>\n\n        <CompoundInputWrapper>\n          <h2>Products</h2>\n          <AddCompound>\n            <Select\n              defaultDisplayValue=\"Compound...\"\n              initialValue={selectProductInitialValue}\n              selectOptions={compounds.map((compound, index) => ({\n                value: index,\n                displayText: compound.symbol,\n                collapsedDisplayText: compound.symbol,\n              }))}\n              onSelectionChange={(index: number | undefined) =>\n                setSelectProductIndex(index)\n              }\n            />\n            <Button\n              color=\"green\"\n              onClick={() => {\n                if (selectProductIndex !== undefined)\n                  addCompoundToReaction(\n                    compounds[selectProductIndex].id,\n                    CompoundType.Product\n                  )\n              }}\n            >\n              Add <FiPlus />\n            </Button>\n          </AddCompound>\n          <CompoundInputInner>\n            {reaction.products.length !== 0 ? (\n              <ReactionCompoundList\n                reactionIndex={reactionIndex}\n                reactionCompounds={reaction.products}\n                compoundType={CompoundType.Product}\n              />\n            ) : (\n              <Notice>No compounds...</Notice>\n            )}\n          </CompoundInputInner>\n        </CompoundInputWrapper>\n      </CompoundsInputSection>\n    </EditModal>\n  )\n}\n\nexport default ReactionEditModal\n\nconst CompoundsInputSection = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 3rem;\n\n  h2 {\n    color: var(--color-grey-dark);\n    font-size: 20px;\n    margin-top: 0;\n  }\n`\n\nconst CompoundInputWrapper = styled.div`\n  flex-basis: 50%;\n  margin-bottom: 1.5rem;\n\n  @media (max-width: 700px) {\n    flex-basis: 100%;\n  }\n`\n\nconst CompoundInputInner = styled.div`\n  background-color: var(--color-grey-lightest);\n  border-radius: 5px;\n  margin: 0.5rem 0.3rem;\n  padding: 0.5rem;\n`\n\nconst AddCompound = styled.div`\n  display: flex;\n  margin: 0.3rem;\n\n  & > button {\n    margin-left: 0.5rem;\n  }\n`\n","/* Components */\nimport ReactionCard from \"./ReactionCard\"\nimport ReactionEditModal from \"./ReactionEditModal\"\n\n/* Hooks */\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { IReaction } from \"../../types/Reaction\"\nimport { CompoundType } from \"../../context/DataContext\"\n\nconst ReactionList: React.FC = () => {\n  const {\n    compounds,\n    reactions,\n    addCompoundToReaction,\n    editedReactionId,\n    editReaction,\n    removeReaction,\n  } = useData()\n\n  const editedReactionIndex = editedReactionId\n    ? reactions.findIndex((reaction) => reaction.id === editedReactionId)\n    : undefined\n\n  const editedReaction = editedReactionId\n    ? reactions[editedReactionIndex as number]\n    : undefined\n\n  return (\n    <>\n      {reactions.map((reaction, index) => (\n        <ReactionCard\n          reaction={reaction}\n          editReaction={(): void => {\n            editReaction(index)\n          }}\n          removeReaction={(): void => {\n            removeReaction(index)\n          }}\n          key={index}\n        >\n          Reaction\n        </ReactionCard>\n      ))}\n\n      {/* Edit modal */}\n      {editedReactionId && (\n        <ReactionEditModal\n          compounds={compounds}\n          reaction={editedReaction as IReaction}\n          addCompoundToReaction={(\n            compoundId: string,\n            compoundType: CompoundType\n          ) => {\n            addCompoundToReaction(\n              editedReactionIndex as number,\n              compoundId,\n              compoundType\n            )\n          }}\n          closeModal={() => editReaction()}\n        />\n      )}\n    </>\n  )\n}\n\nexport default ReactionList\n","/* Components */\nimport Button from \"../components/Button\"\nimport PageTitle from \"../components/PageTitle\"\nimport ReactionList from \"../components/reactions/ReactionList\"\nimport { FiPlus } from \"react-icons/fi\"\n\n/* Hooks */\nimport { useEffect } from \"react\"\nimport { useData } from \"../context/DataContext\"\n\nconst ReactionsPage: React.FC = () => {\n  const { addReaction, editReaction } = useData()\n\n  useEffect(() => {\n    return () => {\n      /* Sets edited reaction to undefined on dismount */\n      editReaction()\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <>\n      <PageTitle>Reactions</PageTitle>\n      <Button color=\"green\" onClick={addReaction}>\n        Add <FiPlus />\n      </Button>\n      <ReactionList />\n    </>\n  )\n}\n\nexport default ReactionsPage\n","import PageTitle from \"../components/PageTitle\"\n\nconst ResultsPage: React.FC = () => {\n  return (\n    <>\n      <PageTitle>Results</PageTitle>\n    </>\n  )\n}\n\nexport default ResultsPage\n","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport GlobalStyles from \"./GlobalStyles\"\n\n/* Context */\nimport { DataStore } from \"./context/DataContext\"\n\n/* Layouts */\nimport MainLayout from \"./layouts/MainLayout\"\n\n/* Pages */\nimport CompoundsPage from \"./pages/CompoundsPage\"\nimport ReactionsPage from \"./pages/ReactionsPage\"\nimport ResultsPage from \"./pages/ResultsPage\"\n\nconst App = () => {\n  return (\n    <DataStore>\n      <Router>\n        <GlobalStyles />\n        <MainLayout>\n          <Switch>\n            <Route path=\"/\" exact component={CompoundsPage} />\n            <Route path=\"/compounds\" component={CompoundsPage} />\n            <Route path=\"/reactions\" component={ReactionsPage} />\n            <Route path=\"/results\" component={ResultsPage} />\n          </Switch>\n        </MainLayout>\n      </Router>\n    </DataStore>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}