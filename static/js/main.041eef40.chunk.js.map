{"version":3,"sources":["helpers/tokenization.tsx","GlobalStyles.tsx","constants/compoundColors.tsx","constants/compoundSymbols.tsx","context/DataContext.tsx","hooks/useLocalStorageState.tsx","components/Reactor.tsx","layouts/MainLayout.tsx","components/Button.tsx","components/PageTitle.tsx","components/CardButton.tsx","helpers/validators.tsx","components/compounds/CompoundCard.tsx","components/Error.tsx","components/Input.tsx","components/EditModal.tsx","components/SubmitButton.tsx","components/compounds/CompoundEditModal.tsx","components/compounds/CompoundList.tsx","pages/CompoundsPage.tsx","components/Notice.tsx","components/reactions/ReactionPreview.tsx","components/reactions/ReactionCard.tsx","constants/kineticModels.tsx","components/Select.tsx","components/reactions/ReactionCompoundCard.tsx","components/reactions/ReactionCompoundList.tsx","components/MathExpressions.tsx","components/reactions/ReactionEquation.tsx","components/reactions/ReactionParamInputCard.tsx","components/reactions/ReactionKineticParameters.tsx","components/reactions/ReactionEditModal.tsx","components/reactions/ReactionList.tsx","pages/ReactionsPage.tsx","pages/ResultsPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TokenTypes","GlobalStyles","createGlobalStyle","COMPOUND_COLORS_CODES","COMPOUND_COLORS","orange","yellow","lime","green1","green2","waterGreen1","waterGreen2","skyBlue1","skyBlue2","blue1","blue2","violet1","violet2","pink1","pink2","pink3","red1","red2","COMPOUND_SYMBOLS","CompoundType","createToken","type","value","useLocalStorageState","key","defaultValue","undefined","options","serialize","JSON","stringify","deserialize","parse","useState","valueInLocalStorage","window","localStorage","getItem","state","setState","prevKeyRef","useRef","useEffect","prevKey","current","removeItem","setItem","compounds","addCompound","editCompound","findCompound","updateCompound","removeCompound","editedCompoundId","reactions","addReaction","editReaction","updateReaction","removeReaction","editedReactionId","serializeKineticEquation","DataContext","createContext","useData","useContext","DataStore","props","children","currentColor","setCurrentColor","setCompounds","setReactions","setEditedCompoundId","setEditedReactionId","availableSymbol","foundSymbols","Array","length","fill","forEach","compound","index","indexOf","symbol","i","id","find","reaction","equationTokens","kineticModel","push","Parameter","reactants","reactionCompound","compoundId","Operator","Variable","LeftParenthesis","RightParenthesis","products","Provider","updatedCompounds","randomstring","generate","color","concentration","name","updatedCompound","updatedReactions","filter","slice","kineticConstants","reactionConstant","kineticEquation","updatedReaction","ReactorWrapper","styled","div","ReactorInterior","ReactorLiquid","Reactor","MainLayout","MainLayoutWrapper","SideContent","to","MainContent","Button","button","colorsBase","colorsHover","PageTitle","h2","CardButton","validateNotEmpty","CompoundCard","validateUnicity","symbolInput","setSymbolInput","liquidRef","document","getElementById","CompoundCardWrapper","CompoundCardInner","onMouseEnter","style","backgroundColor","onMouseLeave","SymbolInput","onBlur","onChange","event","target","onClick","CompoundColorBullet","className","li","input","ErrorWrapper","Error","Input","errors","EditModal","closing","setClosing","handleClose","closeModal","setTimeout","CompoundEditModalWrapper","CompoundEditModalInner","CloseButton","SubmitButton","CompoundEditModal","compoundIndex","findIndex","comp","field","formik","useFormik","initialValues","validate","values","threshold","equal","onSubmit","handleSubmit","SymbolFieldInput","htmlFor","autoComplete","handleChange","FieldInput","CompoundList","editedCompound","CompoundListWrapper","map","ul","CompoundsPage","Notice","p","ReactionPreview","ReactionPreviewWrapper","size","CompoundWrapper","stoichiometricCoefficient","CompoundTile","ReactionCard","reactionIndex","ReactionCardWrapper","ReactionNumber","KINETIC_MODELS","generateKineticConstants","model","generateHiperbolicModelConstants","generateAutocatalyticModelConstants","generateSimpleModelConstants","updatedExponents","c","paramKey","reactantExponent","oldConstant","semiSaturationConstant","productExponent","Select","alignment","defaultDisplayValue","initialValue","onSelectionChange","selectOptions","selecting","setSelecting","currentValue","setCurrentValue","selectRef","clickOutsideHandler","useCallback","contains","toggleSelecting","removeEventListener","addEventListener","selectValue","currentValueOption","option","SelectWrapper","SelectValue","collapsedDisplayText","SelectOptions","SelectOption","displayText","ReactionCompoundCard","coefficientInput","setCoefficientInput","ReactionCompoundCardWrapper","parseFloat","ReactionCompoundList","reactionCompounds","compoundType","updatedReactionCompound","Equation","tokenizedEquation","components","parenthesisStack","operationStack","token","parenthesis","pop","operation","numerator","denominator","elements","base","power","replace","component","SymbolComponent","separatedTerms","split","term","subindex","Parenthesis","elem","Division","DivisionWrapper","Power","PowerWrapper","Subindex","SubindexWrapper","GreekAlpha","GreekBeta","GreekMu","ReactionEquation","keyCompound","keyCompoundSymbol","EquationWrapper","ReactionParamInputCard","paramSymbol","updateValue","valueInput","setValueInput","ParamInputWrapper","ParamInputInner","ReactionKineticParameters","updateKineticConstant","compoundParams","KineticParamsWrapper","Object","entries","param","ReactionEditModal","rea","modalReaction","setModalReaction","selectReactantIndex","setSelectReactantIndex","selectProductIndex","setSelectProductIndex","getCompoundKey","Reactant","deletedCompound","selectReactantInitialValue","selectProductInitialValue","InputSection","CompoundInputWrapper","AddCompound","CompoundInputInner","Product","ColumnInputSection","SelectField","ReactionList","editedReactionIndex","editedReaction","ReactionsPage","ResultsPage","App","path","exact","pathname","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qWAMYA,E,wEC0GGC,EA9GMC,YAAH,i9E,gCCFLC,EAAwB,CACnC,QACA,QACA,SACA,WACA,OACA,SACA,WACA,SACA,UACA,QACA,OACA,cACA,OACA,QACA,SACA,QACA,cACA,WAGWC,EAAkB,CAC7BC,OAAQ,oBACRC,OAAQ,oBACRC,KAAM,oBACNC,OAAQ,oBACRC,OAAQ,qBACRC,YAAa,qBACbC,YAAa,qBACbC,SAAU,qBACVC,SAAU,qBACVC,MAAO,qBACPC,MAAO,qBACPC,QAAS,qBACTC,QAAS,qBACTC,MAAO,qBACPC,MAAO,qBACPC,MAAO,qBACPC,KAAM,qBACNC,KAAM,qBCvCKC,EAAmB,CAC9B,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,M,SHlBUvB,O,yBAAAA,I,uBAAAA,I,uBAAAA,I,qCAAAA,I,wCAAAA,M,KAQL,IIcKwB,EJuFCC,EAAc,SAACC,EAAcC,GACxC,MAAO,CACLD,OACAC,UKrEWC,EA1Cc,SAC3BC,GAMI,IALJC,EAKG,4DAL2BC,EAC9BC,EAIG,uDAJ0B,CAC3BC,UAAWC,KAAKC,UAChBC,YAAaF,KAAKG,OAGZJ,EAA2BD,EAA3BC,UAAWG,EAAgBJ,EAAhBI,YADhB,EAMuBE,oBAAY,WACpC,IAAMC,EAAsBC,OAAOC,aAAaC,QAAQb,GACxD,OAAIU,EACKH,EAAYG,GAEU,oBAAjBT,EAA8BA,IAAiBA,KAX5D,mBAMIa,EANJ,KAMWC,EANX,KAkBGC,EAAaC,iBAAOjB,GAc1B,OAZAkB,qBAAU,WAER,IAAMC,EAAUH,EAAWI,QACvBD,IAAYnB,IACdW,OAAOC,aAAaS,WAAWF,GAC/BH,EAAWI,QAAUpB,GAIvBW,OAAOC,aAAaU,QAAQtB,EAAKI,EAAUU,MAC1C,CAACd,EAAKI,EAAWU,IAEb,CAACA,EAAOC,I,iBDlBLpB,O,uBAAAA,I,sBAAAA,M,KA+BZ,I,6GAAMM,GAA8B,CAElCsB,UAAW,GACXC,YAAa,aACbC,aAAc,aACdC,aAAc,aAGdC,eAAgB,aAChBC,eAAgB,aAChBC,sBAAkB3B,EAGlB4B,UAAW,GACXC,YAAa,aACbC,aAAc,aACdC,eAAgB,aAChBC,eAAgB,aAChBC,sBAAkBjC,EAClBkC,yBAA0B,WACxB,MAAO,KAKEC,GAAcC,wBAAcrC,IAG5BsC,GAAU,WACrB,OAAOC,qBAAWH,KAMPI,GAAuC,SAACC,GAAW,IACtDC,EAAaD,EAAbC,SADqD,EAErBlC,mBAAiB,GAFI,mBAEtDmC,EAFsD,KAExCC,EAFwC,OAG3B9C,EAChC,YACA,IAL2D,mBAGtDwB,EAHsD,KAG3CuB,EAH2C,OAO3B/C,EAChC,YACA,IAT2D,mBAOtD+B,EAPsD,KAO3CiB,EAP2C,OAabtC,wBAC9CP,GAd2D,mBAatD2B,EAbsD,KAapCmB,EAboC,OAgBbvC,wBAC9CP,GAjB2D,mBAgBtDiC,EAhBsD,KAgBpCc,EAhBoC,KA+BvDC,EAAkB,WACtB,IAAMC,EAAe,IAAIC,MAAM1D,EAAiB2D,QAAQC,MAAK,GAE3D/B,EAA0BgC,SAAQ,SAACC,GACnC,IAAMC,EAAQ/D,EAAiBgE,QAAQF,EAASG,SACjC,IAAXF,IAAcN,EAAaM,IAAS,MAE1C,IAAK,IAAIG,EAAI,EAAGA,EAAIT,EAAaE,OAAQO,IACvC,IAAKT,EAAaS,GAChB,OAAOlE,EAAiBkE,GAG5B,MAAO,IAsBHlC,EAAe,SAACmC,GACpB,OAAQtC,EAA0BuC,MAAK,SAACN,GAAD,OAAcA,EAASK,KAAOA,MA8GjEzB,EAA2B,SAC/B2B,EACAN,GAEA,IAAMO,EAA0B,GAMhC,OAAQD,EAASE,cACf,KAAK,EAkBH,OAjBAD,EAAeE,KAAKtE,EAAYzB,EAAWgG,UAAZ,WAE/BJ,EAASK,UAAUb,SAAQ,SAACc,GAAsB,IACxCV,EAAWjC,EACjB2C,EAAiBC,YADXX,OAGRK,EAAeE,KAAKtE,EAAYzB,EAAWoG,SAAU,MACrDP,EAAeE,KAAKtE,EAAYzB,EAAWqG,SAAZ,YAA2Bb,EAA3B,QAC/BK,EAAeE,KAAKtE,EAAYzB,EAAWoG,SAAU,MACrDP,EAAeE,KAAKtE,EAAYzB,EAAWsG,gBAAiB,MAC5DT,EAAeE,KACbtE,EAAYzB,EAAWgG,UAAZ,aAA6BR,EAA7B,OAEbK,EAAeE,KAAKtE,EAAYzB,EAAWoG,SAAU,MACrDP,EAAeE,KAAKtE,EAAYzB,EAAWqG,SAAZ,YAA2Bb,EAA3B,QAC/BK,EAAeE,KAAKtE,EAAYzB,EAAWuG,iBAAkB,SAExDV,EAET,KAAK,EAyBH,OAxBAA,EAAeE,KAAKtE,EAAYzB,EAAWgG,UAAZ,QAE/BJ,EAASK,UAAUb,SAAQ,SAACc,GAAsB,IACxCV,EAAWjC,EACjB2C,EAAiBC,YADXX,OAGRK,EAAeE,KAAKtE,EAAYzB,EAAWoG,SAAU,MACrDP,EAAeE,KAAKtE,EAAYzB,EAAWqG,SAAZ,YAA2Bb,EAA3B,QAC/BK,EAAeE,KAAKtE,EAAYzB,EAAWoG,SAAU,MACrDP,EAAeE,KACbtE,EAAYzB,EAAWgG,UAAZ,mBAAmCR,EAAnC,UAGfI,EAASY,SAASpB,SAAQ,SAACc,GAAsB,IACvCV,EAAWjC,EACjB2C,EAAiBC,YADXX,OAGRK,EAAeE,KAAKtE,EAAYzB,EAAWoG,SAAU,MACrDP,EAAeE,KAAKtE,EAAYzB,EAAWqG,SAAZ,YAA2Bb,EAA3B,QAC/BK,EAAeE,KAAKtE,EAAYzB,EAAWoG,SAAU,MACrDP,EAAeE,KACbtE,EAAYzB,EAAWgG,UAAZ,kBAAkCR,EAAlC,UAGRK,EAET,QAcE,OAbAA,EAAeE,KAAKtE,EAAYzB,EAAWgG,UAAZ,QAE/BJ,EAASK,UAAUb,SAAQ,SAACc,GAAsB,IACxCV,EAAWjC,EACjB2C,EAAiBC,YADXX,OAGRK,EAAeE,KAAKtE,EAAYzB,EAAWoG,SAAU,MACrDP,EAAeE,KAAKtE,EAAYzB,EAAWqG,SAAZ,YAA2Bb,EAA3B,QAC/BK,EAAeE,KAAKtE,EAAYzB,EAAWoG,SAAU,MACrDP,EAAeE,KACbtE,EAAYzB,EAAWgG,UAAZ,mBAAmCR,EAAnC,UAGRK,IAIb,OACE,cAAC3B,GAAYuC,SAAb,CACE9E,MAAO,CAELyB,UAAWA,EACXC,YAhNc,WAClB,IAAMqD,EAAgB,YAAQtD,GAE9BsD,EAAiBX,KAAK,CACpBL,GAAIiB,IAAaC,SAAS,GAC1BC,MAAO1G,EAAsBsE,GAC7BqC,cAAe,EACftB,OAAQT,IACRgC,KAAM,KA7BRrC,EAJID,IAAiBtE,EAAsB+E,OAAS,EAIpCT,EAAe,EAHb,GAoCHE,EACN+B,IAoMLpD,aA7Le,SAACgC,GACpB,GAAqB,qBAAVA,EAAX,CAIA,IAAMI,EAAMtC,EAA0BkC,GAAOI,GAC7Cb,EAAoBa,QAJlBb,OAAoB9C,IA4LlBwB,eACAC,eAtLiB,SAAC8B,EAAe0B,GACrC,IAAMN,EAAgB,YAAQtD,GAC9BsD,EAAiBpB,GAAS0B,EAEXrC,EACN+B,IAkLLjD,eA/KiB,SAAC6B,GACtB,IAAMa,EAAc/C,EAA0BkC,GAAOI,GAK/CuB,EAAmB/E,KAAKG,MAAMH,KAAKC,UAAUwB,IACnDsD,EAAiB7B,SAAQ,SAACQ,GACxBA,EAASK,UAAYL,EAASK,UAAUiB,QACtC,SAAChB,GAAD,OACEA,EAAiBC,aAAeA,KAGpCP,EAASY,SAAWZ,EAASY,SAASU,QACpC,SAAChB,GAAD,OACEA,EAAiBC,aAAeA,QAGbvB,EAERqC,GAKQtC,EACR,GAAD,mBACVvB,EAA0B+D,MAAM,EAAG7B,IADzB,YAEVlC,EAA0B+D,MAC5B7B,EAAQ,EACPlC,EAA0B8B,YAkJ3BxB,mBAGAC,UAAWA,EACXC,YA7Ic,WAClB,IAAMqD,EAAgB,YAAQtD,GAE9BsD,EAAiBlB,KAAK,CACpBL,GAAIiB,IAAaC,SAAS,GAC1BX,UAAW,GACXO,SAAU,GACVV,aAAc,EACdsB,iBAAkB,CAChBC,iBAAkB,GAEpBC,gBAAiB,CAAC,CAAE5F,KAAM1B,EAAWgG,UAAWrE,MAAM,UAGzCiD,EACNqC,IA+HLpD,aA5He,SAACyB,GACpB,GAAqB,qBAAVA,EAAX,CAIA,IAAMI,EAAM/B,EAA0B2B,GAAOI,GAC7CZ,EAAoBY,QAJlBZ,OAAoB/C,IA2HlB+B,eApHiB,SAACwB,EAAeiC,GACrCA,EAAgBD,gBAAkBrD,EAChCsD,EACAjC,GAEF,IAAM2B,EAAmB/E,KAAKG,MAAMH,KAAKC,UAAUwB,IACnDsD,EAAiB3B,GAASiC,EAEX3C,EACNqC,IA4GLlD,eAzGiB,SAACuB,GACPV,EAEN,GAAD,mBACFjB,EAA0BwD,MAAM,EAAG7B,IADjC,YAEF3B,EAA0BwD,MAC5B7B,EAAQ,EACP3B,EAA0BuB,YAmG3BlB,mBACAC,4BAlBJ,SAqBGO,K,QEpWDgD,GAAiBC,IAAOC,IAAV,mKAQdC,GAAkBF,IAAOC,IAAV,+MAYfE,GAAgBH,IAAOC,IAAV,kNAWJG,GAzCW,WACxB,OACE,cAACL,GAAD,UACE,cAACG,GAAD,UACE,cAACC,GAAD,CAAelC,GAAG,gBC+BXoC,GA1BsB,SAACvD,GAAW,IACvCC,EAAaD,EAAbC,SACR,OACE,eAACuD,GAAD,WACE,eAACC,GAAD,WACE,cAAC,GAAD,IACA,gCACE,eAAC,IAAD,CAAMC,GAAG,aAAT,UACE,0CACA,cAAC,KAAD,OAEF,eAAC,IAAD,CAAMA,GAAG,aAAT,UACE,0CACA,cAAC,KAAD,OAEF,eAAC,IAAD,CAAMA,GAAG,WAAT,UACE,wCACA,cAAC,KAAD,aAIN,cAACC,GAAD,UAAc1D,QAOduD,GAAoBN,IAAOC,IAAV,uHAOjBM,GAAcP,IAAOC,IAAV,smBAgCXQ,GAAcT,IAAOC,IAAV,gLCtDFS,GAlBAV,IAAOW,OAAV,iRAWR,SAAC7D,GAAD,OAAW8D,GAAW9D,EAAMsC,UAG1B,SAACtC,GAAD,OAAW+D,GAAY/D,EAAMsC,UAM7BwB,GAAa,SAACxB,GAClB,OAAQA,GACN,IAAK,QACH,MAAM,qHAIR,QACE,MAAM,+GAONyB,GAAc,SAACzB,GACnB,OAAQA,GACN,IAAK,QACH,MAAM,uEAGR,QACE,MAAM,qECxCG0B,GANGd,IAAOe,GAAV,wG,SCqBAC,GArBIhB,IAAOW,OAAV,4ZCIHM,GAAmB,SAAC/G,GAC/B,MAAc,KAAVA,IACiB,kBAAVA,KACNA,IC0GQgH,GAzFoC,SAACpE,GAAW,IAE3Dc,EAKEd,EALFc,SACA/B,EAIEiB,EAJFjB,aACAE,EAGEe,EAHFf,eACAC,EAEEc,EAFFd,eACAmF,EACErE,EADFqE,gBAN0D,EAQtBtG,mBAAiB+C,EAASG,QARJ,mBAQrDqD,EARqD,KAQxCC,EARwC,KAWtDC,EAAYjG,mBAElBC,qBAAU,WACRgG,EAAU9F,QAAU+F,SAASC,eAAe,gBAAalH,IACxD,IAKHgB,qBAAU,WACR+F,EAAezD,EAASG,UACvB,CAACH,IA4BJ,OACE,cAAC6D,GAAD,UACE,eAACC,GAAD,CACEC,aAAc,WAEZL,EAAU9F,QAAQoG,MAAMC,gBACtBlJ,EAAgBiF,EAASwB,QAE7B0C,aAAc,WAEZR,EAAU9F,QAAQoG,MAAMC,gBAAkB,sBAR9C,UAWE,cAACE,GAAD,CACE7H,MAAOkH,EACPY,OAlCwB,WAC9B,GACEf,GAAiBG,IACjBD,EAAgB,SAAUC,GAC1B,CAEA,IAAM7B,EAAe,gBAAQ3B,GAC7B2B,EAAgBxB,OAASqD,EACzBrF,EAAewD,QAGf8B,EAAezD,EAASG,SAwBpBkE,SAvCmB,SAACC,GAC1Bb,EAAea,EAAMC,OAAOjI,UA0CxB,cAAC,GAAD,CAAYkI,QAASvG,EAArB,SACE,cAAC,KAAD,MAIF,cAAC,GAAD,CAAYuG,QAASpG,EAArB,SACE,cAAC,KAAD,MAIF,cAACqG,GAAD,CACEC,UAAU,SACVlD,MAAOxB,EAASwB,cAapBqC,GAAsBzB,IAAOuC,GAAV,gDAInBb,GAAoB1B,IAAOC,IAAV,k1BA+CjBoC,GAAsBrC,IAAOC,IAAV,uQAUH,SAACnD,GAAD,OAAWnE,EAAgBmE,EAAMsC,UAIjD2C,GAAc/B,IAAOwC,MAAV,2G,UChLXC,GAAezC,IAAOC,IAAV,yVAgBHyC,GArB0B,SAAC5F,GAAW,IAC3CC,EAAaD,EAAbC,SACR,OAAO,cAAC0F,GAAD,CAAcH,UAAU,QAAxB,SAAiCvF,KCS3B4F,GAVD3C,IAAOwC,MAAV,mCACP,SAAC1F,GAAD,OACAA,EAAM8F,OAAN,8IAKI,MCwCOC,GAhC8B,SAAC/F,GAAW,IAC/CC,EAA+CD,EAA/CC,SAAU+F,EAAqChG,EAArCgG,QAASC,EAA4BjG,EAA5BiG,WAAYC,EAAgBlG,EAAhBkG,YAEjCC,EAAa,WAIjBF,GAAW,GACXG,YAAW,WACTF,MACC,MAUL,OAPA1H,qBAAU,WACJwH,GACFG,MAGD,CAACH,IAGF,cAACK,GAAD,CAA0BL,QAASA,EAAnC,SACE,eAACM,GAAD,CAAwBN,QAASA,EAAjC,UACE,cAACO,GAAD,CAAajB,QAASa,EAAYH,QAASA,EAA3C,SACE,cAAC,KAAD,MAED/F,QAQHoG,GAA2BnD,IAAOC,IAAV,yrBAgB1B,SAACnD,GAAD,OACAA,EAAMgG,QAAN,yLAQI,MAuBFM,GAAyBpD,IAAOC,IAAV,i7BAiBxB,SAACnD,GAAD,OACAA,EAAMgG,QAAN,2LAQI,MA6BFO,GAAcrD,IAAOW,OAAV,yUAUb,SAAC7D,GAAD,OAAYA,EAAMgG,QAAU,kBAAoB,MC5JrCQ,GATMtD,YAAOU,GAAPV,CAAH,sLCwIHuD,GAhH8C,SAACzG,GAAW,IAC/Dc,EAAyBd,EAAzBc,SAAUqF,EAAenG,EAAfmG,WADoD,EAEhCtG,KAA9BhB,EAF8D,EAE9DA,UAAWI,EAFmD,EAEnDA,eAFmD,EAGxClB,oBAAkB,GAHsB,mBAG/DiI,EAH+D,KAGtDC,EAHsD,KAIhES,EAAgB7H,EAAU8H,WAAU,SAACC,GAAD,OAAUA,EAAKzF,KAAOL,EAASK,MA6BnEkD,EAAkB,SAACwC,EAAezJ,GACtC,IAAK,IAAI8D,EAAI,EAAGA,EAAIrC,EAAU8B,OAAQO,IAEpC,GAAIA,IAAMwF,GAAiB7H,EAAUqC,GAAG2F,KAAWzJ,EACjD,OAAO,EAGX,OAAO,GAMH0J,EAASC,aAAU,CAEvBC,cAAe,CACb/F,OAAQH,EAASG,OACjBsB,cAAezB,EAASyB,cACxBC,KAAM1B,EAAS0B,MAEjByE,SAtCe,SAACC,GAChB,INzBF9J,EACA+J,EACAC,EMuBQtB,EAAkB,GAcxB,OAXK3B,GAAiB+C,EAAOjG,QAEnBoD,EAAgB,SAAU6C,EAAOjG,UACzC6E,EAAO7E,OAAS,0BAFhB6E,EAAO7E,OAAS,yBAKbkD,GAAiB+C,EAAO3E,gBNlC/BnF,EMoCgC8J,EAAO3E,cNnCvC4E,EMmCsD,ENlCtDC,GMkCyD,ENhCpC,kBAAVhK,IACPA,EAAQ+J,GACR/J,IAAU+J,GAAaC,KM+BvBtB,EAAOvD,cAAgB,yCAFvBuD,EAAOvD,cAAgB,gCAIlBuD,GAwBPuB,SAAU,SAACH,GACT,IAAMzE,EAAe,6BAAQ3B,GAAaoG,GAC1CjI,EAAeyH,EAAejE,GAC9BwD,GAAW,MAIf,OACE,cAAC,GAAD,CACED,QAASA,EACTC,WAAYA,EACZC,YAAaC,EAHf,SAKE,uBAAMkB,SAAUP,EAAOQ,aAAvB,UACE,eAACC,GAAD,CAAkBjF,MAAOxB,EAASwB,MAAlC,UACE,uBAAOkF,QAAQ,SAAf,qBACA,cAAC,GAAD,CACE1B,SAAUgB,EAAOhB,OAAO7E,OACxBuB,KAAK,SACLiF,aAAa,MACbnF,MAAOxB,EAASwB,MAChB6C,SAAU2B,EAAOY,aACjBtK,MAAO0J,EAAOI,OAAOjG,SAEtB6F,EAAOhB,OAAO7E,QAAU,cAAC,GAAD,UAAQ6F,EAAOhB,OAAO7E,YAGjD,eAAC0G,GAAD,WACE,uBAAOH,QAAQ,gBAAf,oCACA,cAAC,GAAD,CACE1B,SAAUgB,EAAOhB,OAAOvD,cACxBC,KAAK,gBACLrF,KAAK,SACLgI,SAAU2B,EAAOY,aACjBtK,MAAO0J,EAAOI,OAAO3E,gBAEtBuE,EAAOhB,OAAOvD,eACb,cAAC,GAAD,UAAQuE,EAAOhB,OAAOvD,mBAI1B,eAACoF,GAAD,WACE,uBAAOH,QAAQ,OAAf,uCACA,uBACEhF,KAAK,OACLiF,aAAa,MACbtC,SAAU2B,EAAOY,aACjBtK,MAAO0J,EAAOI,OAAO1E,UAGzB,cAAC,GAAD,CAAcF,MAAM,QAAQnF,KAAK,SAAjC,wBAcFwK,GAAazE,IAAOC,IAAV,kMAgBVoE,GAAmBrE,YAAOyE,GAAPzE,CAAH,8TAEA,SAAClD,GAAD,OAClBnE,EAAgBmE,EAAMsC,UCrGXsF,GA/CoC,SAAC5H,GAAW,IACrDnB,EAAcmB,EAAdnB,UADoD,EAG1DgB,KADMV,EAFoD,EAEpDA,iBAAkBJ,EAFkC,EAElCA,aAAcC,EAFoB,EAEpBA,aAAcC,EAFM,EAENA,eAAgBC,EAFV,EAEUA,eAGhE2I,EAAiB1I,EACnBH,EAAaG,QACb3B,EAEJ,OACE,eAACsK,GAAD,WACGjJ,EAAUkJ,KAAI,SAACjH,EAAUC,GAAX,OACb,cAAC,GAAD,CAEED,SAAUA,EACV/B,aAAc,WACZA,EAAagC,IAEf9B,eAAgB,SAAC6B,GACf7B,EAAe8B,EAAOD,IAExB5B,eAAgB,WACdA,EAAe6B,IAEjBsD,gBAAiB,SAACwC,EAAezJ,GAC/B,IAAK,IAAI8D,EAAI,EAAGA,EAAIrC,EAAU8B,OAAQO,IAEpC,GAAIA,IAAMH,GAASlC,EAAUqC,GAAG2F,KAAWzJ,EACzC,OAAO,EAGX,OAAO,IAlBJ2D,MAwBR5B,GACC,cAAC,GAAD,CACE2B,SAAU+G,EACV1B,WAAY,kBAAMpH,WAatB+I,GAAsB5E,IAAO8E,GAAV,wICrCVC,GAtBiB,WAAO,IAAD,EACapI,KAAzChB,EAD4B,EAC5BA,UAAWC,EADiB,EACjBA,YAAaC,EADI,EACJA,aAUhC,OARAP,qBAAU,WACR,OAAO,WAELO,OAGD,IAGD,qCACE,cAAC,GAAD,wBACA,eAAC,GAAD,CAAQuD,MAAM,QAAQgD,QAASxG,EAA/B,iBACM,cAAC,KAAD,OAEN,cAAC,GAAD,CAAcD,UAAWA,QCnBhBqJ,GANAhF,IAAOiF,EAAV,0GCwEGC,GArD0C,SAACpI,GAAW,IAC3DqB,EAAarB,EAAbqB,SACArC,EAAiBa,KAAjBb,aAER,OACE,eAACqJ,GAAD,WACiC,IAA9BhH,EAASK,UAAUf,QAA6C,IAA7BU,EAASY,SAAStB,QACpD,cAAC,GAAD,+BAGDU,EAASK,UAAUqG,KAAI,SAACpG,EAAkBZ,GACzC,IAAMD,EAAW9B,EAAa2C,EAAiBC,YAE/C,OACE,eAAC,WAAD,WACa,IAAVb,GAAe,cAAC,KAAD,CAAQuH,KAAM,KAC9B,eAACC,GAAD,WACE,4BAAI5G,EAAiB6G,4BACrB,cAACC,GAAD,CACEnG,MAAOxB,EAASwB,MADlB,SAGGxB,EAASG,cAPDU,EAAiBC,eAcnCP,EAASK,UAAUf,OAAS,GAAKU,EAASY,SAAStB,OAAS,GAC3D,cAAC,KAAD,CAAc2H,KAAM,KAGrBjH,EAASY,SAAS8F,KAAI,SAACpG,EAAkBZ,GACxC,IAAMD,EAAW9B,EAAa2C,EAAiBC,YAE/C,OACE,eAAC,WAAD,WACa,IAAVb,GAAe,cAAC,KAAD,CAAQuH,KAAM,KAC9B,eAACC,GAAD,WACE,4BAAI5G,EAAiB6G,4BACrB,cAACC,GAAD,CACEnG,MAAOxB,EAASwB,MADlB,SAGGxB,EAASG,cAPDU,EAAiBC,mBAmBpCyG,GAAyBnF,IAAOC,IAAV,4GAOtBoF,GAAkBrF,IAAOC,IAAV,kMAgBfsF,GAAevF,IAAOC,IAAV,qOACI,SAACnD,GAAD,OAAWnE,EAAgBmE,EAAMsC,UChExCoG,GAnBoC,SAAC1I,GAAW,IACrDqB,EAA0DrB,EAA1DqB,SAAUsH,EAAgD3I,EAAhD2I,cAAerJ,EAAiCU,EAAjCV,aAAcE,EAAmBQ,EAAnBR,eAE/C,OACE,eAACoJ,GAAD,WACE,eAACC,GAAD,WACGF,EAAgB,EADnB,IACuB,OAEvB,cAAC,GAAD,CAAiBtH,SAAUA,IAC3B,cAAC,GAAD,CAAYiE,QAAShG,EAArB,SACE,cAAC,KAAD,MAEF,cAAC,GAAD,CAAYgG,QAAS9F,EAArB,SACE,cAAC,KAAD,UAQFoJ,GAAsB1F,IAAOC,IAAV,s7BA+CnB0F,GAAiB3F,IAAOiF,EAAV,8K,SCjEPW,GAAiB,CAAC,SAAU,aAAc,iBAE1CC,GAA2B,SACtCC,EACA3H,EACAxC,GAEA,OAAQmK,GACN,KAAK,EACH,OAAOC,GAAiC5H,EAAUxC,GACpD,KAAK,EACH,OAAOqK,GAAoC7H,EAAUxC,GACvD,QAEE,OAAOsK,GAA6B9H,EAAUxC,KAI9CsK,GAA+B,SACnC9H,EACAxC,GACG,MAEoCwC,EAASwB,iBAAxCC,EAFL,EAEKA,iBAEFsG,GAJH,qCAIyC,IAe5C,OAdA/H,EAASK,UAAUb,SAAQ,SAACc,GAC1B,IAAMb,EAAWjC,EAAUuC,MACzB,SAACiI,GAAD,OAAOA,EAAElI,KAAOQ,EAAiBC,cAE7B0H,EAAWC,GAAiBzI,GAC5B0I,EAAcnI,EAASwB,iBAAiByG,GAG5CF,EAAiBE,QADC9L,IAAhBgM,EAC2B,EAEAA,KAI1B,cAAE1G,oBAAqBsG,IAG1BH,GAAmC,SACvC5H,EACAxC,GACG,MAEoCwC,EAASwB,iBAAxCC,EAFL,EAEKA,iBAEFsG,GAJH,qCAIyC,IAe5C,OAdA/H,EAASK,UAAUb,SAAQ,SAACc,GAC1B,IAAMb,EAAWjC,EAAUuC,MACzB,SAACiI,GAAD,OAAOA,EAAElI,KAAOQ,EAAiBC,cAE7B0H,EAAWG,GAAuB3I,GAClC0I,EAAcnI,EAASwB,iBAAiByG,GAG5CF,EAAiBE,QADC9L,IAAhBgM,EAC2B,EAEAA,KAI1B,cAAE1G,oBAAqBsG,IAG1BF,GAAsC,SAC1C7H,EACAxC,GACG,MAEoCwC,EAASwB,iBAAxCC,EAFL,EAEKA,iBAEFsG,GAJH,qCAIyC,IA6B5C,OA3BA/H,EAASK,UAAUb,SAAQ,SAACc,GAC1B,IAAMb,EAAWjC,EAAUuC,MACzB,SAACiI,GAAD,OAAOA,EAAElI,KAAOQ,EAAiBC,cAE7B0H,EAAWC,GAAiBzI,GAC5B0I,EAAcnI,EAASwB,iBAAiByG,GAG5CF,EAAiBE,QADC9L,IAAhBgM,EAC2B,EAEAA,KAGjCnI,EAASY,SAASpB,SAAQ,SAACc,GACzB,IAAMb,EAAWjC,EAAUuC,MACzB,SAACiI,GAAD,OAAOA,EAAElI,KAAOQ,EAAiBC,cAE7B0H,EAAWI,GAAgB5I,GAC3B0I,EAAcnI,EAASwB,iBAAiByG,GAG5CF,EAAiBE,QADC9L,IAAhBgM,EAC2B,EAEAA,KAI1B,cAAE1G,oBAAqBsG,IAKnBG,GAAmB,SAACzI,GAC/B,MAAM,WAAN,OAAkBA,EAASG,SAGhByI,GAAkB,SAAC5I,GAC9B,MAAM,UAAN,OAAiBA,EAASG,SAGfwI,GAAyB,SAAC3I,GACrC,MAAM,KAAN,OAAYA,EAASG,SCWR0I,GA7HA,SAA4B3J,GAA2B,IAGlE4J,EAKE5J,EALF4J,UACAC,EAIE7J,EAJF6J,oBACAC,EAGE9J,EAHF8J,aACAC,EAEE/J,EAFF+J,kBACAC,EACEhK,EADFgK,cAPkE,EAWlCjM,oBAAkB,GAXgB,mBAW7DkM,EAX6D,KAWlDC,EAXkD,OAY5BnM,oBAC1B,OAAZ+L,QAAY,IAAZA,OAAA,EAAAA,EAAc1M,aAASI,GAb2C,mBAY7D2M,EAZ6D,KAY/CC,EAZ+C,KAiB9DjJ,EAAK5C,iBAAe6D,IAAaC,SAAS,IAM1CgI,EAAY9L,iBAA2B,MAG7CC,qBAAU,WAEJsL,GAAcM,EAAgBN,EAAa1M,OAG/CiN,EAAU3L,QAAU+F,SAASC,eAAevD,EAAGzC,WAG9C,IAKHF,qBAAU,WACO6L,EAAU3L,QAArBuL,EAA+BxF,SAASC,eAAevD,EAAGzC,SACrC,OACxB,CAACuL,IAQJ,IAAMK,EAAsBC,uBAAY,SAACnF,GAAsB,IAAD,GAKxD,UAACiF,EAAU3L,eAAX,aAAC,EAAmB8L,SAASpF,EAAMC,WACrCoF,IAEAP,GAAa,MAGd,IAMGO,EAAkB,WAEjBR,EAGHhM,OAAOyM,oBAAoB,QAASJ,GAAqB,GAFzDrM,OAAO0M,iBAAiB,QAASL,GAAqB,GAMxDJ,GAAcD,IAOVW,EAAc,SAACxN,GACnBqN,IACAL,EAAgBhN,GAChB2M,EAAkB3M,IAMdyN,EAAmDb,EAAc5I,MACrE,SAAC0J,GAAD,OAAYA,EAAO1N,QAAU+M,KAG/B,OACE,eAACY,GAAD,CAAe5J,GAAIA,EAAGzC,QAAtB,UACE,eAACsM,GAAD,CAAaf,UAAWA,EAAW3E,QAASmF,EAA5C,UACE,6BAAsB,OAAlBI,QAAkB,IAAlBA,OAAA,EAAAA,EAAoBI,uBAAwBpB,IAChD,cAAC,KAAD,CAAevB,KAAM,QAEtB2B,GACC,eAACiB,GAAD,CAAetB,UAAWA,GAAa,OAAvC,UACGC,GACC,cAACsB,GAAD,CAAc7F,QAAS,kBAAMsF,OAAYpN,IAAzC,SACE,4BAAIqM,MAGPG,EAAcjC,KAAI,gBAAG3K,EAAH,EAAGA,MAAOgO,EAAV,EAAUA,YAAV,OACjB,cAACD,GAAD,CAEE7F,QAAS,WACPsF,EAAYxN,IAHhB,SAME,4BAAIgO,KALChO,aAoBb2N,GAAgB7H,IAAOC,IAAV,oEAKb6H,GAAc9H,IAAOC,IAAV,8XAWb,SAACnD,GAAD,OACAA,EAAMiK,UAAN,0FAGI,MAgBFiB,GAAgBhI,IAAOC,IAAV,4fAKf,SAACnD,GAAD,MAAgC,SAApBA,EAAM4J,UAAuB,WAAa,MACtD,SAAC5J,GAAD,MAAgC,UAApBA,EAAM4J,UAAwB,YAAc,MAkBtDuB,GAAejI,IAAOW,OAAV,+WC7IHwH,GA/CoD,SAACrL,GAAW,IACrEc,EAA+Dd,EAA/Dc,SAAUa,EAAqD3B,EAArD2B,iBAAkB1C,EAAmCe,EAAnCf,eAAgBC,EAAmBc,EAAnBd,eADwB,EAI5BnB,mBAC9C4D,EAAiB6G,2BALyD,mBAIrE8C,EAJqE,KAInDC,EAJmD,KA6B5E,OACE,eAACC,GAAD,CACElJ,MAAOxB,EAASwB,MADlB,UAGE,6BAAKxB,EAASG,SACd,uBACE7D,MAAOkO,EACPnO,KAAK,SACLgI,SA7B0B,SAC9BC,GAE2B,KAAvBA,EAAMC,OAAOjI,MAIjBmO,EAAoBE,WAAWrG,EAAMC,OAAOjI,QAH1CmO,EAAoB,KA0BlBrG,OApB+B,WAC/Bf,GAAiBmH,GACnBrM,EAAe,6BACV0C,GADS,IAEZ6G,0BAA2B8C,KAI/BC,EAAoB5J,EAAiB6G,8BAcnC,cAAC,GAAD,CAAYlD,QAASpG,EAArB,SACE,cAAC,KAAD,UAYFsM,GAA8BtI,IAAOC,IAAV,wtBAUX,SAACnD,GAAD,OAAWnE,EAAgBmE,EAAMsC,UC7BxCoJ,GAtCoD,SAAC1L,GAAW,IACrE2L,EACN3L,EADM2L,kBAAmBzM,EACzBc,EADyBd,eAAgBD,EACzCe,EADyCf,eAAgB2M,EACzD5L,EADyD4L,aAEnD5M,EAAiBa,KAAjBb,aAER,OACE,mCACG2M,EAAkB5D,KAAI,SAACpG,GACtB,IAAMb,EAAW9B,EAAa2C,EAAiBC,YAIzC8E,EAAgBiF,EAAkBhF,WACtC,SAAC0C,GAAD,OAAOA,EAAEzH,aAAeD,EAAiBC,cAG3C,OACE,cAAC,GAAD,CAEEd,SAAUA,EACVa,iBAAkBA,EAClB1C,eAAgB,SAAC4M,GACf5M,EACEyH,EACAkF,EACAC,IAGJ3M,eAAgB,WACdA,EAAewH,EAAekF,KAX3BjK,EAAiBC,kBChCrBkK,GAAgC,SAAC9L,GAAW,IAC/C+L,EAAsB/L,EAAtB+L,kBACFC,EAA4B,GAE5BC,EAA+C,GAC/CC,EAA2C,GAiIjD,OA/HAH,EAAkBlL,SAAQ,SAACsL,GASzB,GAAIA,EAAMhP,OAAS1B,EAAWsG,gBAC5BkK,EAAiBzK,KAAK,SACjB,GAAI2K,EAAMhP,OAAS1B,EAAWuG,iBAAkB,CAErD,IAAMoK,EAAcH,EAAiBI,MAGrC,GAAIH,EAAevL,OAAS,EAAG,CAC7B,IAAM2L,EAAYJ,EAAeG,MAEjC,GAAkB,MAAdC,EAAmB,CACrB,IAAMC,EAAYP,EAAWK,MAC7BL,EAAWxK,KACT,cAAC,GAAD,CACE+K,UAAWA,EACXC,YAAa,cAAC,GAAD,CAAaC,SAAUL,YAGnC,GAAkB,MAAdE,EAAmB,CAC5B,IAAMI,EAAOV,EAAWK,MACxBL,EAAWxK,KACT,cAAC,GAAD,CAAOkL,KAAMA,EAAMC,MAAO,cAAC,GAAD,CAAaF,SAAUL,aAKrDJ,EAAWxK,KAAK,cAAC,GAAD,CAAaiL,SAAUL,UAWtC,GACHD,EAAMhP,OAAS1B,EAAWgG,WAC1B0K,EAAMhP,OAAS1B,EAAWqG,SAK1B,GAAImK,EAAiBtL,OAAS,EAC5BsL,EAAiBA,EAAiBtL,OAAS,GAAGa,KAC5C,cAAC,GAAD,CAAiBP,OAAQkL,EAAM/O,MAAMwP,QAAQ,WAAY,YAOxD,GAAIV,EAAevL,OAAS,EAAG,CAIlC,IAAM2L,EAAYJ,EAAeG,MAEjC,GAAkB,MAAdC,EAAmB,CACrB,IAAMC,EAAYP,EAAWK,MAC7BL,EAAWxK,KACT,cAAC,GAAD,CACE+K,UAAWA,EACXC,YACE,cAAC,GAAD,CAAiBvL,OAAQkL,EAAM/O,MAAMwP,QAAQ,WAAY,cAI1D,GAAkB,MAAdN,EAAmB,CAC5B,IAAMI,EAAOV,EAAWK,MACxBL,EAAWxK,KACT,cAAC,GAAD,CACEkL,KAAMA,EACNC,MACE,cAAC,GAAD,CAAiB1L,OAAQkL,EAAM/O,MAAMwP,QAAQ,WAAY,eAWjEZ,EAAWxK,KACT,cAAC,GAAD,CAAiBP,OAAQkL,EAAM/O,MAAMwP,QAAQ,WAAY,YAStDT,EAAMhP,OAAS1B,EAAWoG,WACb,MAAhBsK,EAAM/O,OAAiC,MAAhB+O,EAAM/O,MAE/B8O,EAAe1K,KAAK2K,EAAM/O,OAGnB6O,EAAiBtL,OAAS,EACb,MAAhBwL,EAAM/O,OAAiC,MAAhB+O,EAAM/O,MAC/B6O,EAAiBA,EAAiBtL,OAAS,GAAGa,KAAK,mCAAG2K,EAAM/O,SACnC,MAAhB+O,EAAM/O,OACf6O,EAAiBA,EAAiBtL,OAAS,GAAGa,KAAK,0CAGjC,MAAhB2K,EAAM/O,OAAiC,MAAhB+O,EAAM/O,MAC/B4O,EAAWxK,KAAK,mCAAG2K,EAAM/O,SACA,MAAhB+O,EAAM/O,OACf4O,EAAWxK,KAAK,8CAOtB,mCACGwK,EAAWjE,KAAI,SAAC8E,EAAW9L,GAAZ,OACd,cAAC,WAAD,UAAuB8L,GAAR9L,SAeV+L,GAA8C,SAAC9M,GAAW,IAQ/D+M,EAPa/M,EAAXiB,OAOgD+L,MAAM,KAG9DD,EAAelM,SAAQ,SAACoM,EAAMlM,GAC5B,OAAQkM,GACN,IAAK,UACHF,EAAehM,GAAS,cAAC,GAAD,IACxB,MACF,IAAK,SACHgM,EAAehM,GAAS,cAAC,GAAD,IACxB,MACF,IAAK,OACHgM,EAAehM,GAAS,cAAC,GAAD,QAM9B,IAAK,IAAIG,EAAI6L,EAAepM,OAAS,EAAGO,EAAI,EAAGA,IAAK,CAElD,IAAMgM,EAAWH,EAAeV,MAChCU,EAAe7L,EAAI,GACjB,cAAC,GAAD,CAAUwL,KAAMK,EAAe7L,EAAI,GAAIgM,SAAUA,IAKrD,OAAOH,EAAe,IAYXI,GAA2C,SAACnN,GAAW,IAC1DyM,EAAazM,EAAbyM,SAER,OACE,mCACGA,EAAS1E,KAAI,SAACqF,EAAMrM,GAAP,OACZ,cAAC,WAAD,UAAuBqM,GAARrM,SAgBVsM,GAAqC,SAACrN,GAAW,IACpDuM,EAA2BvM,EAA3BuM,UAAWC,EAAgBxM,EAAhBwM,YAEnB,OACE,eAACc,GAAD,WACE,8BAAMf,IACN,wBACA,8BAAMC,QAKNc,GAAkBpK,IAAOC,IAAV,iUA4BRoK,GAA+B,SAACvN,GAAW,IAC9C0M,EAAgB1M,EAAhB0M,KAAMC,EAAU3M,EAAV2M,MACd,OACE,eAACa,GAAD,WACE,8BAAMd,IACN,qBAAKlH,UAAU,WAAf,SAA2BmH,QAK3Ba,GAAetK,IAAOC,IAAV,8IAmBLsK,GAAqC,SAACzN,GAAW,IACpD0M,EAAmB1M,EAAnB0M,KAAMQ,EAAalN,EAAbkN,SACd,OACE,eAACQ,GAAD,WACE,8BAAMhB,IACN,qBAAKlH,UAAU,WAAf,SAA2B0H,QAK3BQ,GAAkBxK,IAAOC,IAAV,8IAcRwK,GAAa,kBAAM,2CACnBC,GAAY,kBAAM,2CAClBC,GAAU,kBAAM,2CCjSdC,GApB4C,SAAC9N,GAAW,IAC7DqB,EAAarB,EAAbqB,SAGF0M,GAAc/O,EAFKa,KAAjBb,cAEyBqC,EAAS0M,aACpCC,GAAmD,OAAXD,QAAW,IAAXA,OAAA,EAAAA,EAAa9M,cAAUzD,EAErE,OACE,eAACyQ,GAAD,WACGD,GACC,qCACE,cAAC,GAAD,CAAUtB,KAAK,IAAIQ,SAAUc,IAD/B,eAKF,cAAC,GAAD,CAAUjC,kBAAmB1K,EAAS0B,sBAStCkL,GAAkB/K,IAAOC,IAAV,gcCWN+K,GArCwD,SACrElO,GACI,IACImO,EAAoCnO,EAApCmO,YAAa/Q,EAAuB4C,EAAvB5C,MAAOgR,EAAgBpO,EAAhBoO,YADzB,EAEiCrQ,mBAAsBX,GAFvD,mBAEIiR,EAFJ,KAEgBC,EAFhB,KAoBH,OACE,cAACC,GAAD,UACE,eAACC,GAAD,WACE,6BAAKL,IACL,uBACE/Q,MAAOiR,EACPlR,KAAK,SACLgI,SAvBa,SAACC,GACO,KAAvBA,EAAMC,OAAOjI,MAIjBkR,EAAc7C,WAAWrG,EAAMC,OAAOjI,QAHpCkR,EAAc,KAsBVpJ,OAhB0B,WAC5Bf,GAAiBkK,GACnBD,EAAYC,GAGdC,EAAclR,YAoBZmR,GAAoBrL,IAAOC,IAAV,kDAIjBqL,GAAkBtL,IAAOC,IAAV,6kBCXNsL,GA9B8D,SAC3EzO,GACI,IACIqB,EAAoCrB,EAApCqB,SAAUqN,EAA0B1O,EAA1B0O,sBADf,EAE6CrN,EAASwB,iBAAjDC,EAFL,EAEKA,iBAAqB6L,EAF1B,qCAIH,OACE,eAACC,GAAD,WACE,cAAC,GAAD,CACET,YAAuC,IAA1B9M,EAASE,aAAqB,cAAC,GAAD,IAAc,IACzDnE,MAAO0F,EACPsL,YAAa,SAAChR,GACZsR,EAAsB,mBAAoBtR,MAI7CyR,OAAOC,QAAQH,GAAgB5G,KAAI,mCAAEgH,EAAF,KAAS3R,EAAT,YAClC,cAAC,GAAD,CAEE+Q,YAAa,cAAC,GAAD,CAAiBlN,OAAQ8N,IACtC3R,MAAOA,EACPgR,YAAa,SAAChR,GACZsR,EAAsBK,EAAO3R,KAJ1B2R,UAcTH,GAAuB1L,IAAOC,IAAV,sRCsTX6L,GAnU8C,SAAChP,GAAW,IAC/DnB,EAAoCmB,EAApCnB,UAAWwC,EAAyBrB,EAAzBqB,SAAU8E,EAAenG,EAAfmG,WADyC,EAGpEtG,KADMT,EAF8D,EAE9DA,UAAWJ,EAFmD,EAEnDA,aAAcU,EAFqC,EAErCA,yBAA0BH,EAFW,EAEXA,eAFW,EAIxCxB,oBAAkB,GAJsB,mBAI/DiI,EAJ+D,KAItDC,EAJsD,KAKhE0C,EAAgBvJ,EAAUuH,WAAU,SAACsI,GAAD,OAASA,EAAI9N,KAAOE,EAASF,MALD,EAS5BpD,mBACxCJ,KAAKG,MAAMH,KAAKC,UAAUyD,KAV0C,mBAS/D6N,EAT+D,KAShDC,EATgD,OAchBpR,wBAEpDP,GAhBoE,mBAc/D4R,EAd+D,KAc1CC,EAd0C,OAiBlBtR,wBAElDP,GAnBoE,mBAiB/D8R,EAjB+D,KAiB3CC,EAjB2C,KAwBhEC,EAAiB,SACrB5D,GAEA,OAAIA,IAAiB3O,EAAawS,SAAiB,YAC5C,YAGH3Q,EAAc,SAClB8C,EACAgK,GAGA,IAAMtO,EAAMkS,EAAe5D,GACrB5I,EAAkBrF,KAAKG,MAAMH,KAAKC,UAAUsR,IAElDlM,EAAgB1F,GAAKkE,KAAK,CACxBI,aACA4G,0BAA2B,IAI7B,IAAM3F,EAAmBkG,GACvB/F,EAAgBzB,aAChByB,EACAnE,GAEFmE,EAAgBH,iBAAmBA,EACnCG,EAAgBD,gBAAkBrD,EAChCsD,EACA2F,GAGFwG,EAAiBnM,IAGb/D,EAAiB,SACrByH,EACAkF,EACAnJ,GAGA,IAAMnF,EAAMkS,EAAe5D,GACrB5I,EAAe,gBAAQkM,GAE7BlM,EAAgB1F,GAAKoJ,GAAiBjE,EAEtC0M,EAAiBnM,IAGb9D,EAAiB,SACrBwH,EACAkF,GAGA,IAAMtO,EAAMkS,EAAe5D,GACrB5I,EAAe,gBAAQkM,GACvBQ,EAAkB1M,EAAgB1F,GAAKoJ,GAG7C1D,EAAgB1F,GAAhB,sBACK0F,EAAgB1F,GAAKsF,MAAM,EAAG8D,IADnC,YAEK1D,EAAgB1F,GAAKsF,MACtB8D,EAAgB,EAChB1D,EAAgB1F,GAAKqD,UAKrB+O,EAAgB9N,aAAesN,EAAcnB,cAC/C/K,EAAgB+K,iBAAcvQ,GAIhC,IAAMqF,EAAmBkG,GACvB/F,EAAgBzB,aAChByB,EACAnE,GAEFmE,EAAgBH,iBAAmBA,EACnCG,EAAgBD,gBAAkBrD,EAChCsD,EACA2F,GAGFwG,EAAiBnM,IAcb2M,EAA6BP,EAC/B,CACEhS,MAAOgS,EACPhE,YAAavM,EAAUuQ,GAAqBnO,OAC5CgK,qBAAsBpM,EAAUuQ,GAAqBnO,aAEvDzD,EAEEoS,EAA4BN,EAC9B,CACElS,MAAOkS,EACPlE,YAAavM,EAAUyQ,GAAoBrO,OAC3CgK,qBAAsBpM,EAAUyQ,GAAoBrO,aAEtDzD,EAEJ,OACE,eAAC,GAAD,CACEwI,QAASA,EACTC,WAAYA,EACZC,YAAaC,EAHf,UAKE,cAAC,GAAD,CAAiB9E,SAAU6N,IAG3B,eAACW,GAAD,WACE,eAACC,GAAD,WACE,2CACA,eAACC,GAAD,WACE,cAAC,GAAD,CACElG,oBAAoB,cACpBC,aAAc6F,EACd3F,cAAenL,EAAUkJ,KAAI,SAACjH,EAAUC,GAAX,MAAsB,CACjD3D,MAAO2D,EACPqK,YAAatK,EAASG,OACtBgK,qBAAsBnK,EAASG,WAEjC8I,kBAAmB,SAAChJ,GAAD,OACjBsO,EAAuBtO,MAG3B,eAAC,GAAD,CACEuB,MAAM,QACNgD,QAAS,gBACqB9H,IAAxB4R,GACFtQ,EACED,EAAUuQ,GAAqBjO,GAC/BlE,EAAawS,WANrB,iBAUM,cAAC,KAAD,UAGR,cAACO,GAAD,UACsC,IAAnCd,EAAcxN,UAAUf,OACvB,cAAC,GAAD,CACEgI,cAAeA,EACfgD,kBAAmBuD,EAAcxN,UACjCxC,eAAgBA,EAChBD,eAAgBA,EAChB2M,aAAc3O,EAAawS,WAG7B,cAAC,GAAD,mCAKN,eAACK,GAAD,WACE,0CACA,eAACC,GAAD,WACE,cAAC,GAAD,CACElG,oBAAoB,cACpBC,aAAc8F,EACd5F,cAAenL,EAAUkJ,KAAI,SAACjH,EAAUC,GAAX,MAAsB,CACjD3D,MAAO2D,EACPqK,YAAatK,EAASG,OACtBgK,qBAAsBnK,EAASG,WAEjC8I,kBAAmB,SAAChJ,GAAD,OACjBwO,EAAsBxO,MAG1B,eAAC,GAAD,CACEuB,MAAM,QACNgD,QAAS,gBACoB9H,IAAvB8R,GACFxQ,EACED,EAAUyQ,GAAoBnO,GAC9BlE,EAAagT,UANrB,iBAUM,cAAC,KAAD,UAGR,cAACD,GAAD,UACqC,IAAlCd,EAAcjN,SAAStB,OACtB,cAAC,GAAD,CACEgI,cAAeA,EACfgD,kBAAmBuD,EAAcjN,SACjC/C,eAAgBA,EAChBD,eAAgBA,EAChB2M,aAAc3O,EAAagT,UAG7B,cAAC,GAAD,sCAOR,eAACC,GAAD,WACE,0CACA,eAACC,GAAD,WACE,8CACA,cAAC,GAAD,CACErG,aAAc,CACZ1M,MAAO8R,EAAc3N,aACrB6J,YAAatC,GAAeoG,EAAc3N,cAC1C0J,qBAAsBnC,GAAeoG,EAAc3N,eAErDyI,cAAelB,GAAef,KAAI,SAACiB,EAAOjI,GAAR,MAAmB,CACnD3D,MAAO2D,EACPqK,YAAapC,EACbiC,qBAAsBjC,MAExBe,kBAAmB,SAAC3M,GAClB,IAAM4F,EAAkBrF,KAAKG,MAAMH,KAAKC,UAAUsR,IAElDlM,EAAgBH,iBAAmBkG,GACjC3L,EACA8R,EACArQ,GAEFmE,EAAgBzB,aAAenE,EAC/B4F,EAAgBD,gBAAkBrD,EAChCsD,EACA2F,GAGFwG,EAAiBnM,SAIvB,eAACmN,GAAD,WACE,6CACA,cAAC,GAAD,CACEtG,oBAAoB,cACpBC,kBACgCtM,IAA9B0R,EAAcnB,YACV,CACE3Q,MAAO8R,EAAcnB,YACrB3C,YACEpM,EAAakQ,EAAcnB,aAC3B9M,OACFgK,qBACEjM,EAAakQ,EAAcnB,aAC3B9M,aAEJzD,EAENwM,cAAekF,EAAcxN,UAAUqG,KAAI,SAACpG,GAAD,MAAuB,CAChEvE,MAAOuE,EAAiBC,WACxBwJ,YACEpM,EAAa2C,EAAiBC,YAC9BX,OACFgK,qBACEjM,EAAa2C,EAAiBC,YAC9BX,WAEJ8I,kBAAmB,SAAC3M,GAClB,IAAM4F,EAAkBrF,KAAKG,MAAMH,KAAKC,UAAUsR,IAClDlM,EAAgB+K,YAAc3Q,EAC9B+R,EAAiBnM,SAIvB,cAAC,GAAD,CAAkB3B,SAAU6N,IAC5B,cAAC,GAAD,CACE7N,SAAU6N,EACVrQ,UAAWA,EACX6P,sBA/L4B,SAACpR,EAAaF,GAChD,IAAM4F,EAAkBrF,KAAKG,MAAMH,KAAKC,UAAUsR,IAClDlM,EAAgBH,iBAAiBvF,GAAOF,EACxC+R,EAAiBnM,SAgMf,cAAC,GAAD,CACEV,MAAM,QACNgD,QAAS,WACP/F,EAAeoJ,EAAeuG,GAC9BjJ,GAAW,IAJf,sBAeA4J,GAAe3M,IAAOC,IAAV,oQAcZgN,GAAcjN,IAAOC,IAAV,mPAiBX+M,GAAqBhN,YAAO2M,GAAP3M,CAAH,+EAKlB4M,GAAuB5M,IAAOC,IAAV,+GAQpB6M,GAAqB9M,IAAOC,IAAV,oJAOlB4M,GAAc7M,IAAOC,IAAV,oHClWFiN,GA/CgB,WAAO,IAAD,EAO/BvQ,KALFhB,EAFiC,EAEjCA,UACAO,EAHiC,EAGjCA,UACAK,EAJiC,EAIjCA,iBACAH,EALiC,EAKjCA,aACAE,EANiC,EAMjCA,eAGI6Q,EAAsB5Q,EACxBL,EAAUuH,WAAU,SAACtF,GAAD,OAAcA,EAASF,KAAO1B,UAClDjC,EAEE8S,EAAiB7Q,EACnBL,EAAUiR,QACV7S,EAEJ,OACE,qCACG4B,EAAU2I,KAAI,SAAC1G,EAAUN,GAAX,OACb,cAAC,GAAD,CACEM,SAAUA,EACVsH,cAAe5H,EACfzB,aAAc,WACZA,EAAayB,IAEfvB,eAAgB,WACdA,EAAeuB,IAPnB,qBASOA,MAORtB,GACC,cAAC,GAAD,CACEZ,UAAWA,EACXwC,SAAUiP,EACVnK,WAAY,kBAAM7G,WClBbiR,GAtBiB,WAAO,IAAD,EACE1Q,KAA9BR,EAD4B,EAC5BA,YAAaC,EADe,EACfA,aAUrB,OARAd,qBAAU,WACR,OAAO,WAELc,OAGD,IAGD,qCACE,cAAC,GAAD,wBACA,eAAC,GAAD,CAAQgD,MAAM,QAAQgD,QAASjG,EAA/B,iBACM,cAAC,KAAD,OAEN,cAAC,GAAD,QCjBSmR,GARe,WAC5B,OACE,mCACE,cAAC,GAAD,yBCwCSC,GA1BH,WACV,OACE,cAAC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAAC9D,UAAW5E,KACjC,cAAC,IAAD,CAAOyI,KAAK,aAAa7D,UAAW5E,KACpC,cAAC,IAAD,CAAOyI,KAAK,aAAa7D,UAAW0D,KACpC,cAAC,IAAD,CAAOG,KAAK,WAAW7D,UAAW2D,KAElC,cAAC,IAAD,CAAOE,KAAK,mBAAZ,SACE,cAAC,IAAD,CACEhN,GAAI,CACFkN,SAAU,oBCpBbC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEF/M,SAASC,eAAe,SAM1BmM,O","file":"static/js/main.041eef40.chunk.js","sourcesContent":["/**\n * Equation tokenization\n * https://blog.shalvah.me/posts/how-to-build-a-math-expression-tokenizer-using-javascript-or-any-other-language\n * https://blog.shalvah.me/posts/parsing-math-expressions-with-javascript\n */\n\nexport enum TokenTypes {\n  Parameter = 0,\n  Variable,\n  Operator,\n  LeftParenthesis,\n  RightParenthesis,\n}\n\nexport const tokenizeEquation = (equation: string): Token[] => {\n  const tokensArray: Token[] = []\n\n  // Remove spaces, they don't matter\n  equation.replace(/\\s+/g, \"\")\n\n  // Convert to array of characters\n  const charsArray = equation.split(\"\")\n\n  // Define buffers\n  let parameterBuffer: string[] = []\n  let variableBuffer: string[] = []\n\n  /**\n   * Buffer handling\n   */\n  const emptyParameterBuffer = () => {\n    // Push new parameter to the tokens array\n    const newParam = parameterBuffer.join(\"\")\n    tokensArray.push(createToken(TokenTypes.Parameter, newParam))\n\n    // Empty parameter buffer\n    parameterBuffer = []\n  }\n\n  const emptyVariableBuffer = () => {\n    // Push new variable to the tokens array\n    const newVar = variableBuffer.join(\"\")\n    tokensArray.push(createToken(TokenTypes.Variable, newVar))\n\n    // Empty variable buffer\n    variableBuffer = []\n  }\n\n  /**\n   * Array traversal\n   * This is the core of the tokenization function\n   *  */\n  charsArray.forEach((char, index) => {\n    /**\n     * Parameters are always contained in <>, so if the parameterBuffer\n     * isn't empty, you simply keep pushing to it.\n     *  */\n    if (parameterBuffer.length !== 0) {\n      if (isParameterEnd(char)) {\n        parameterBuffer.push(char)\n        emptyParameterBuffer()\n      } else {\n        parameterBuffer.push(char)\n      }\n    }\n    //\n    /**\n     * Variables are always contained in {}. Treatment is exactly the same\n     * as with parameters.\n     */\n    else if (variableBuffer.length !== 0) {\n      if (isVariableEnd(char)) {\n        variableBuffer.push(char)\n        emptyVariableBuffer()\n      } else {\n        variableBuffer.push(char)\n      }\n    }\n    //\n    /**\n     * Check if variable start or parameter start\n     */\n    else if (isVariableStart(char)) {\n      variableBuffer.push(char)\n    } else if (isParameterStart(char)) {\n      parameterBuffer.push(char)\n    }\n    //\n    /**\n     * Only operators and parenthesis remain, so:\n     */\n    else if (isOperator(char)) {\n      tokensArray.push(createToken(TokenTypes.Operator, char))\n    } else if (isLeftParenthesis(char)) {\n      tokensArray.push(createToken(TokenTypes.LeftParenthesis, char))\n    } else if (isRightParenthesis(char)) {\n      tokensArray.push(createToken(TokenTypes.RightParenthesis, char))\n    }\n  })\n\n  return tokensArray\n}\n\nexport const joinTokens = (tokens: Token[]) => {\n  return tokens.map(({ value }) => value).join(\"\")\n}\n\n/**\n * Token factory\n */\nexport interface Token {\n  type: number\n  value: string\n}\n\nexport const createToken = (type: number, value: string): Token => {\n  return {\n    type,\n    value,\n  }\n}\n\n/**\n * Recognition functions\n *  */\n\n// const isDigit = (char: string): boolean => {\n//   return /\\d/.test(char)\n// }\n// const isLetter = (char: string): boolean => {\n//   return /[a-z]/i.test(char)\n// }\nconst isOperator = (char: string): boolean => {\n  return /\\+|-|\\*|\\/|\\^/.test(char)\n}\nconst isLeftParenthesis = (char: string): boolean => {\n  return char === \"(\"\n}\nconst isRightParenthesis = (char: string): boolean => {\n  return char === \")\"\n}\nconst isParameterStart = (char: string): boolean => {\n  return char === \"<\"\n}\nconst isParameterEnd = (char: string): boolean => {\n  return char === \">\"\n}\nconst isVariableStart = (char: string): boolean => {\n  return char === \"{\"\n}\nconst isVariableEnd = (char: string): boolean => {\n  return char === \"}\"\n}\n","import { createGlobalStyle } from \"styled-components\"\n\nconst GlobalStyles = createGlobalStyle`\n  :root {\n    --color-primary-darkest: hsl(213,48%,15%);\n    --color-primary-darker: hsl(213,48%,30%);\n    --color-primary-dark: hsl(213,48%,50%);\n    --color-primary-normal: hsl(213,48%,70%);\n    --color-primary-light: hsl(213,48%,85%);\n    --color-primary-lighter: hsl(213,48%,95%);\n\n    --color-triadic-green-darker: hsl(93,40%,30%);\n    --color-triadic-green-dark: hsl(93,40%,45%);\n    --color-triadic-green-normal: hsl(93,40%,70%);\n    --color-triadic-green-light: hsl(93,40%,85%);\n    --color-triadic-green-lighter: hsl(93,40%,95%);\n\n    --color-triadic-red-darker: hsl(333,48%,30%);\n    --color-triadic-red-dark: hsl(333,48%,45%);\n    --color-triadic-red-normal: hsl(333,48%,70%);\n    --color-triadic-red-light: hsl(333,48%,85%);\n    --color-triadic-red-lighter: hsl(333,48%,95%);\n\n    --color-grey-dark: hsl(213, 20%, 30%);\n    --color-grey-normal: hsl(213, 20%, 45%);\n    --color-grey-light: hsl(213, 20%, 70%);\n    --color-grey-lighter: hsl(213, 20%, 85%);\n    --color-grey-lightest: hsl(213, 20%, 95%);\n  }\n  \n  body {\n    margin: 0;\n    margin-top: 30px;\n    background-color: var(--color-grey-lighter);\n    font-family: 'Mulish', sans-serif;\n  }\n\n  a, button {\n    cursor: pointer;\n  }\n\n  a, button, input {\n    transition: all 0.15s ease-in-out;\n  }\n\n  input {\n    background-color: rgba(0, 0, 0, 0.1);\n    border: none;\n    border-radius: 5px;\n    flex-grow: 1;\n    font-family: 'Mulish', sans-serif;\n    min-width: 0;\n    width: 0;\n    margin-left: 1rem;\n    outline: none;\n    padding: 0.5rem 1rem;\n\n    &:hover,\n    &:focus {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n\n    &:autofill {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n\n    &:focus {\n      box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.4);\n    }\n  }\n\n  /**\n   * Remove arrows from number inputs\n   */\n  \n  /* Chrome, Safari, Edge, Opera */\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  /* Firefox */\n  input[type=number] {\n    -moz-appearance: textfield;\n  }\n\n  @keyframes slide-in {\n    from {\n      opacity: 0;\n      transform: translateY(-20px);\n    }\n\n    to {\n      opacity: 1;\n      transform: translateY(0px);\n    }\n  }\n\n  @keyframes slide-out {\n    from {\n      opacity: 1;\n      transform: translateY(0px);\n    }\n    \n    to {\n      opacity: 0;\n      transform: translateY(-20px);\n    }\n  }\n`\n\nexport default GlobalStyles\n","export const COMPOUND_COLORS_CODES = [\n  \"blue1\",\n  \"pink3\",\n  \"yellow\",\n  \"skyBlue2\",\n  \"red2\",\n  \"green1\",\n  \"skyBlue1\",\n  \"orange\",\n  \"violet1\",\n  \"pink1\",\n  \"lime\",\n  \"waterGreen2\",\n  \"red1\",\n  \"blue2\",\n  \"green2\",\n  \"pink2\",\n  \"waterGreen1\",\n  \"violet2\",\n]\n\nexport const COMPOUND_COLORS = {\n  orange: \"hsl(30, 80%, 65%)\",\n  yellow: \"hsl(50, 80%, 65%)\",\n  lime: \"hsl(70, 80%, 65%)\",\n  green1: \"hsl(90, 80%, 65%)\",\n  green2: \"hsl(110, 80%, 65%)\",\n  waterGreen1: \"hsl(130, 80%, 65%)\",\n  waterGreen2: \"hsl(150, 80%, 65%)\",\n  skyBlue1: \"hsl(170, 80%, 65%)\",\n  skyBlue2: \"hsl(190, 80%, 65%)\",\n  blue1: \"hsl(210, 80%, 65%)\",\n  blue2: \"hsl(230, 80%, 65%)\",\n  violet1: \"hsl(250, 80%, 65%)\",\n  violet2: \"hsl(270, 80%, 65%)\",\n  pink1: \"hsl(290, 80%, 65%)\",\n  pink2: \"hsl(310, 80%, 65%)\",\n  pink3: \"hsl(330, 80%, 65%)\",\n  red1: \"hsl(350, 80%, 65%)\",\n  red2: \"hsl(10, 80%, 65%)\",\n}\n","export const COMPOUND_SYMBOLS = [\n  'A',\n  'B',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z'\n]","import {\n  createContext,\n  useContext,\n  useState,\n  Dispatch,\n  SetStateAction,\n} from \"react\"\nimport randomstring from \"randomstring\"\n\n/* Constants */\nimport { COMPOUND_COLORS_CODES } from \"../constants/compoundColors\"\nimport { COMPOUND_SYMBOLS } from \"../constants/compoundSymbols\"\n\n/* Helpers */\nimport { Token, TokenTypes, createToken } from \"../helpers/tokenization\"\n\n/* Hooks */\nimport useLocalStorageState from \"../hooks/useLocalStorageState\"\n\n/* Types */\nimport { ICompound } from \"../types/Compound\"\nimport { IReaction, IReactionCompound } from \"../types/Reaction\"\nimport { IFCWithChildren } from \"../types/FCWithChildren\"\n\n/**\n * To mark whether if a compound is a reactant or a product,\n * the following enum is used\n *  */\nexport enum CompoundType {\n  Reactant = 0,\n  Product,\n}\n\n/**\n * ISetState type for setState functions\n */\n\ntype ISetState<T> = Dispatch<SetStateAction<T>>\n\ninterface IDefaultValue {\n  /* Compounds */\n  compounds: ICompound[]\n  addCompound: () => void\n  editCompound: (index?: number) => void\n  findCompound: (id?: string) => ICompound | undefined\n  updateCompound: (index: number, updatedCompound: ICompound) => void\n  removeCompound: (index: number) => void\n  editedCompoundId: string | undefined\n\n  /* Reactions */\n  reactions: IReaction[]\n  addReaction: () => void\n  editReaction: (index?: number) => void\n  updateReaction: (index: number, updatedReaction: IReaction) => void\n  removeReaction: (index: number) => void\n  editedReactionId: string | undefined\n  serializeKineticEquation: (reaction: IReaction, index: number) => Token[]\n}\n\nconst defaultValue: IDefaultValue = {\n  /* Compounds */\n  compounds: [],\n  addCompound: () => {},\n  editCompound: () => {},\n  findCompound: () => {\n    return undefined\n  },\n  updateCompound: () => {},\n  removeCompound: () => {},\n  editedCompoundId: undefined,\n\n  /* Reactions */\n  reactions: [],\n  addReaction: () => {},\n  editReaction: () => {},\n  updateReaction: () => {},\n  removeReaction: () => {},\n  editedReactionId: undefined,\n  serializeKineticEquation: () => {\n    return []\n  },\n}\n\n// Context Provider component\nexport const DataContext = createContext(defaultValue)\n\n// Hook to use the context values\nexport const useData = () => {\n  return useContext(DataContext)\n}\n\n/**\n * Store component to abstract logic from root component\n */\nexport const DataStore: React.FC<IFCWithChildren> = (props) => {\n  const { children } = props\n  const [currentColor, setCurrentColor] = useState<number>(0)\n  const [compounds, setCompounds] = useLocalStorageState<ICompound[]>(\n    \"compounds\",\n    []\n  )\n  const [reactions, setReactions] = useLocalStorageState<IReaction[]>(\n    \"reactions\",\n    []\n  )\n\n  // To keep track of edited elements:\n  const [editedCompoundId, setEditedCompoundId] = useState<string | undefined>(\n    undefined\n  )\n  const [editedReactionId, setEditedReactionId] = useState<string | undefined>(\n    undefined\n  )\n\n  /**\n   * Helper functions\n   */\n  const nextColor = () => {\n    if (currentColor === COMPOUND_COLORS_CODES.length - 1) {\n      setCurrentColor(0)\n      return\n    }\n    setCurrentColor(currentColor + 1)\n  }\n\n  const availableSymbol = (): string => {\n    const foundSymbols = new Array(COMPOUND_SYMBOLS.length).fill(false)\n\n    ;(compounds as ICompound[]).forEach((compound) => {\n      const index = COMPOUND_SYMBOLS.indexOf(compound.symbol)\n      if (index !== -1) foundSymbols[index] = true\n    })\n    for (let i = 0; i < foundSymbols.length; i++) {\n      if (!foundSymbols[i]) {\n        return COMPOUND_SYMBOLS[i]\n      }\n    }\n    return \"\"\n  }\n\n  /**\n   * Compounds state handling\n   */\n  const addCompound = (): void => {\n    const updatedCompounds = [...(compounds as ICompound[])]\n\n    updatedCompounds.push({\n      id: randomstring.generate(8),\n      color: COMPOUND_COLORS_CODES[currentColor],\n      concentration: 0,\n      symbol: availableSymbol(),\n      name: \"\",\n    })\n    nextColor()\n\n    let setState = setCompounds as ISetState<ICompound[]>\n    setState(updatedCompounds)\n  }\n\n  const findCompound = (id?: string): ICompound | undefined => {\n    return (compounds as ICompound[]).find((compound) => compound.id === id)\n  }\n\n  const editCompound = (index?: number): void => {\n    if (typeof index === \"undefined\") {\n      setEditedCompoundId(undefined)\n      return\n    }\n    const id = (compounds as ICompound[])[index].id\n    setEditedCompoundId(id)\n  }\n\n  const updateCompound = (index: number, updatedCompound: ICompound): void => {\n    const updatedCompounds = [...(compounds as ICompound[])]\n    updatedCompounds[index] = updatedCompound\n\n    let setState = setCompounds as ISetState<ICompound[]>\n    setState(updatedCompounds)\n  }\n\n  const removeCompound = (index: number): void => {\n    const compoundId = (compounds as ICompound[])[index].id\n\n    /**\n     * Remove from reactions that have this compound\n     */\n    const updatedReactions = JSON.parse(JSON.stringify(reactions))\n    updatedReactions.forEach((reaction: IReaction) => {\n      reaction.reactants = reaction.reactants.filter(\n        (reactionCompound: IReactionCompound) =>\n          reactionCompound.compoundId !== compoundId\n      )\n\n      reaction.products = reaction.products.filter(\n        (reactionCompound: IReactionCompound) =>\n          reactionCompound.compoundId !== compoundId\n      )\n    })\n    const setReactionState = setReactions as ISetState<IReaction[]>\n\n    setReactionState(updatedReactions)\n\n    /**\n     * Remove from compounds array\n     */\n    const setCompoundState = setCompounds as ISetState<ICompound[]>\n    setCompoundState([\n      ...(compounds as ICompound[]).slice(0, index),\n      ...(compounds as ICompound[]).slice(\n        index + 1,\n        (compounds as ICompound[]).length\n      ),\n    ])\n  }\n\n  /**\n   * Reactions state handling\n   */\n\n  const addReaction = (): void => {\n    const updatedReactions = [...(reactions as IReaction[])]\n\n    updatedReactions.push({\n      id: randomstring.generate(8),\n      reactants: [],\n      products: [],\n      kineticModel: 0,\n      kineticConstants: {\n        reactionConstant: 1,\n      },\n      kineticEquation: [{ type: TokenTypes.Parameter, value: `<k>` }],\n    })\n\n    let setState = setReactions as ISetState<IReaction[]>\n    setState(updatedReactions)\n  }\n\n  const editReaction = (index?: number): void => {\n    if (typeof index === \"undefined\") {\n      setEditedReactionId(undefined)\n      return\n    }\n    const id = (reactions as IReaction[])[index].id\n    setEditedReactionId(id)\n  }\n\n  const updateReaction = (index: number, updatedReaction: IReaction): void => {\n    updatedReaction.kineticEquation = serializeKineticEquation(\n      updatedReaction,\n      index\n    )\n    const updatedReactions = JSON.parse(JSON.stringify(reactions))\n    updatedReactions[index] = updatedReaction\n\n    let setState = setReactions as ISetState<IReaction[]>\n    setState(updatedReactions)\n  }\n\n  const removeReaction = (index: number): void => {\n    let setState = setReactions as ISetState<IReaction[]>\n\n    setState([\n      ...(reactions as IReaction[]).slice(0, index),\n      ...(reactions as IReaction[]).slice(\n        index + 1,\n        (reactions as IReaction[]).length\n      ),\n    ])\n  }\n\n  const serializeKineticEquation = (\n    reaction: IReaction,\n    index: number\n  ): Token[] => {\n    const equationTokens: Token[] = []\n    /**\n     * TODO: this is just a placeholder for a future serialization system, maybe\n     * with direct user input!\n     */\n    /* Returns infix notation */\n    switch (reaction.kineticModel) {\n      case 1:\n        equationTokens.push(createToken(TokenTypes.Parameter, `<\\\\mu>`))\n\n        reaction.reactants.forEach((reactionCompound) => {\n          const { symbol } = findCompound(\n            reactionCompound.compoundId\n          ) as ICompound\n          equationTokens.push(createToken(TokenTypes.Operator, \"*\"))\n          equationTokens.push(createToken(TokenTypes.Variable, `{[${symbol}]}`))\n          equationTokens.push(createToken(TokenTypes.Operator, \"/\"))\n          equationTokens.push(createToken(TokenTypes.LeftParenthesis, \"(\"))\n          equationTokens.push(\n            createToken(TokenTypes.Parameter, `<K_${symbol}>`)\n          )\n          equationTokens.push(createToken(TokenTypes.Operator, \"+\"))\n          equationTokens.push(createToken(TokenTypes.Variable, `{[${symbol}]}`))\n          equationTokens.push(createToken(TokenTypes.RightParenthesis, \")\"))\n        })\n        return equationTokens\n      //\n      case 2:\n        equationTokens.push(createToken(TokenTypes.Parameter, `<k>`))\n\n        reaction.reactants.forEach((reactionCompound) => {\n          const { symbol } = findCompound(\n            reactionCompound.compoundId\n          ) as ICompound\n          equationTokens.push(createToken(TokenTypes.Operator, \"*\"))\n          equationTokens.push(createToken(TokenTypes.Variable, `{[${symbol}]}`))\n          equationTokens.push(createToken(TokenTypes.Operator, \"^\"))\n          equationTokens.push(\n            createToken(TokenTypes.Parameter, `<\\\\alpha_${symbol}>`)\n          )\n        })\n        reaction.products.forEach((reactionCompound) => {\n          const { symbol } = findCompound(\n            reactionCompound.compoundId\n          ) as ICompound\n          equationTokens.push(createToken(TokenTypes.Operator, \"*\"))\n          equationTokens.push(createToken(TokenTypes.Variable, `{[${symbol}]}`))\n          equationTokens.push(createToken(TokenTypes.Operator, \"^\"))\n          equationTokens.push(\n            createToken(TokenTypes.Parameter, `<\\\\beta_${symbol}>`)\n          )\n        })\n        return equationTokens\n      //\n      default:\n        equationTokens.push(createToken(TokenTypes.Parameter, `<k>`))\n\n        reaction.reactants.forEach((reactionCompound) => {\n          const { symbol } = findCompound(\n            reactionCompound.compoundId\n          ) as ICompound\n          equationTokens.push(createToken(TokenTypes.Operator, \"*\"))\n          equationTokens.push(createToken(TokenTypes.Variable, `{[${symbol}]}`))\n          equationTokens.push(createToken(TokenTypes.Operator, \"^\"))\n          equationTokens.push(\n            createToken(TokenTypes.Parameter, `<\\\\alpha_${symbol}>`)\n          )\n        })\n        return equationTokens\n    }\n  }\n\n  return (\n    <DataContext.Provider\n      value={{\n        /* Compounds */\n        compounds: compounds as ICompound[],\n        addCompound,\n        editCompound,\n        findCompound,\n        updateCompound,\n        removeCompound,\n        editedCompoundId,\n\n        /* Reactions */\n        reactions: reactions as IReaction[],\n        addReaction,\n        editReaction,\n        updateReaction,\n        removeReaction,\n        editedReactionId,\n        serializeKineticEquation,\n      }}\n    >\n      {children}\n    </DataContext.Provider>\n  )\n}\n","import { useEffect, useRef, useState } from \"react\"\n\ninterface ISerialization<T> {\n  serialize: (value: T) => string\n  deserialize: (value: string) => T\n}\n\nconst useLocalStorageState = <T extends unknown>(\n  key: string,\n  defaultValue: T | undefined = undefined,\n  options: ISerialization<T> = {\n    serialize: JSON.stringify,\n    deserialize: JSON.parse,\n  }\n) => {\n  const { serialize, deserialize } = options\n\n  /**\n   * The callback in useState is only called for state initialization\n   *  */\n  const [state, setState] = useState<T>((): T => {\n    const valueInLocalStorage = window.localStorage.getItem(key)\n    if (valueInLocalStorage) {\n      return deserialize(valueInLocalStorage)\n    }\n    return typeof defaultValue === \"function\" ? defaultValue() : defaultValue\n  })\n\n  /**\n   * Keep a reference to the old key in localStorage,\n   * to delete it if the key changes\n   */\n  const prevKeyRef = useRef(key)\n\n  useEffect(() => {\n    // Check if key has changed, and remove previous key if necessary\n    const prevKey = prevKeyRef.current\n    if (prevKey !== key) {\n      window.localStorage.removeItem(prevKey)\n      prevKeyRef.current = key\n    }\n\n    // Set item in localStorage\n    window.localStorage.setItem(key, serialize(state))\n  }, [key, serialize, state])\n\n  return [state, setState]\n}\n\nexport default useLocalStorageState\n","import styled from \"styled-components\"\n\nconst Reactor: React.FC = () => {\n  return (\n    <ReactorWrapper>\n      <ReactorInterior>\n        <ReactorLiquid id=\"liquid\" />\n      </ReactorInterior>\n    </ReactorWrapper>\n  )\n}\n\nconst ReactorWrapper = styled.div`\n  position: relative;\n  background-color: var(--color-grey-normal);\n  border-radius: 5px;\n  height: 220px;\n  margin-bottom: 40px;\n`\n\nconst ReactorInterior = styled.div`\n  position: absolute;\n  top: 10px;\n  bottom: 10px;\n  left: 10px;\n  right: 10px;\n\n  background-color: var(--color-grey-lighter);\n  border-radius: 2px;\n  overflow: hidden;\n`\n\nconst ReactorLiquid = styled.div`\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  transition: background-color 0.2s ease-in-out;\n\n  background-color: var(--color-grey-lightest);\n  height: 70%;\n  width: 100%;\n`\n\nexport default Reactor\n","import styled from \"styled-components\"\nimport { Link } from \"react-router-dom\"\n\n/* Components */\nimport { FiChevronRight } from \"react-icons/fi\"\nimport Reactor from \"../components/Reactor\"\n\ninterface IProps {\n  children: JSX.Element | JSX.Element[]\n}\n\nconst MainLayout: React.FC<IProps> = (props) => {\n  const { children } = props\n  return (\n    <MainLayoutWrapper>\n      <SideContent>\n        <Reactor />\n        <nav>\n          <Link to=\"/compounds\">\n            <p>Compounds</p>\n            <FiChevronRight />\n          </Link>\n          <Link to=\"/reactions\">\n            <p>Reactions</p>\n            <FiChevronRight />\n          </Link>\n          <Link to=\"/results\">\n            <p>Results</p>\n            <FiChevronRight />\n          </Link>\n        </nav>\n      </SideContent>\n      <MainContent>{children}</MainContent>\n    </MainLayoutWrapper>\n  )\n}\n\nexport default MainLayout\n\nconst MainLayoutWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-left: 20px;\n  margin-right: 20px;\n`\n\nconst SideContent = styled.div`\n  flex-basis: 180px;\n  flex-shrink: 0;\n  margin-right: 20px;\n\n  nav {\n    display: flex;\n    flex-direction: column;\n\n    a {\n      align-items: center;\n      background-color: var(--color-grey-light);\n      border-radius: 5px;\n      color: var(--color-grey-lightest);\n      display: flex;\n      font-size: 1.2rem;\n      justify-content: space-between;\n      margin-bottom: 10px;\n      padding: 5px 10px;\n      text-decoration: none;\n\n      &:hover {\n        background-color: var(--color-grey-dark);\n      }\n\n      p {\n        margin: 0;\n      }\n    }\n  }\n`\n\nconst MainContent = styled.div`\n  background: var(--color-grey-light);\n  border-radius: 5px;\n  flex-basis: 750px;\n  min-height: 600px;\n  padding: 20px;\n  position: relative;\n`\n","import styled from \"styled-components\"\n\ninterface IButton {\n  color?: string\n}\n\nconst Button = styled.button<IButton>`\n  align-items: center;\n  border-radius: 5px;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  font-size: 1.1rem;\n  justify-content: space-between;\n  padding: 5px 10px;\n  text-decoration: none;\n\n  ${(props) => colorsBase(props.color)}\n\n  &:hover {\n    ${(props) => colorsHover(props.color)}\n  }\n`\n\nexport default Button\n\nconst colorsBase = (color?: string) => {\n  switch (color) {\n    case \"green\":\n      return `\n        background-color: var(--color-triadic-green-normal);\n        color: var(--color-grey-lightest);\n      `\n    default:\n      return `\n        background-color: var(--color-primary-dark);\n        color: var(--color-grey-lightest);\n      `\n  }\n}\n\nconst colorsHover = (color?: string) => {\n  switch (color) {\n    case \"green\":\n      return `\n        background-color: var(--color-triadic-green-dark);\n      `\n    default:\n      return `\n        background-color: var(--color-primary-darker);\n      `\n  }\n}\n","import styled from \"styled-components\"\n\nconst PageTitle = styled.h2`\n  color: var(--color-grey-lightest);\n  font-size: 20px;\n  margin-top: 0;\n`\n\nexport default PageTitle\n","import styled from \"styled-components\"\n\nconst CardButton = styled.button`\n  align-items: center;\n  align-self: stretch;\n  background-color: unset;\n  border: none;\n  border-radius: 5px;\n  color: var(--color-grey-dark);\n  cursor: pointer;\n  display: flex;\n  opacity: 0;\n  font-size: 1.5em;\n  margin-left: 0.2rem;\n  padding: 0.5rem;\n  transition: all 0.15s ease-in-out;\n  z-index: 2;\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`\n\nexport default CardButton\n","/**\n * Validates if field is not empty, which equates to\n * not being undefined, null,\n * In the case it is a string, check that it is not empty.\n * In the case of a number, 0 is valid.\n *  */\nexport const validateNotEmpty = (value: unknown) => {\n  if (value === \"\") return false\n  if (typeof value === \"number\") return true\n  if (!value) return false\n  return true\n}\n\n/**\n * Validates if field is greater than, only if the value is numeric.\n * Otherwise, returns false.\n *  */\nexport const validateGreaterThan = (\n  value: unknown,\n  threshold: number,\n  equal: boolean\n) => {\n  if (typeof value !== \"number\") return false\n  if (value > threshold) return true\n  if (value === threshold && equal) return true\n  return false\n}\n","import styled from \"styled-components\"\n\n/* Components */\nimport CardButton from \"../CardButton\"\nimport { FiEdit, FiTrash2 } from \"react-icons/fi\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Hooks */\nimport { useEffect, useRef, useState } from \"react\"\n\n/* Helpers */\nimport { validateNotEmpty } from \"../../helpers/validators\"\n\n/* Types */\nimport { ICompound } from \"../../types/Compound\"\n\ninterface ICompoundCardProps {\n  compound: ICompound\n  editCompound: () => void\n  updateCompound: (compound: ICompound) => void\n  validateUnicity: (field: string, value: any) => boolean\n  removeCompound: () => void\n}\n\nconst CompoundCard: React.FC<ICompoundCardProps> = (props) => {\n  const {\n    compound,\n    editCompound,\n    updateCompound,\n    removeCompound,\n    validateUnicity,\n  } = props\n  const [symbolInput, setSymbolInput] = useState<string>(compound.symbol)\n\n  /* Reference to Reactor liquid to change color on hover */\n  const liquidRef = useRef<HTMLElement>()\n\n  useEffect(() => {\n    liquidRef.current = document.getElementById(\"liquid\") || undefined\n  }, [])\n\n  /**\n   * Update symbol input on compound update\n   */\n  useEffect(() => {\n    setSymbolInput(compound.symbol)\n  }, [compound])\n\n  /**\n   * Form submission handling\n   */\n  const handleSymbolChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSymbolInput(event.target.value)\n  }\n\n  const validateAndUpdateSymbol = () => {\n    if (\n      validateNotEmpty(symbolInput) &&\n      validateUnicity(\"symbol\", symbolInput)\n    ) {\n      /* Update symbol */\n      const updatedCompound = { ...compound }\n      updatedCompound.symbol = symbolInput\n      updateCompound(updatedCompound)\n    } else {\n      /* Reset input initial state */\n      setSymbolInput(compound.symbol)\n    }\n  }\n\n  /**\n   * Toggling\n   */\n\n  return (\n    <CompoundCardWrapper>\n      <CompoundCardInner\n        onMouseEnter={() => {\n          // @ts-ignore\n          liquidRef.current.style.backgroundColor =\n            COMPOUND_COLORS[compound.color as keyof typeof COMPOUND_COLORS]\n        }}\n        onMouseLeave={() => {\n          // @ts-ignore\n          liquidRef.current.style.backgroundColor = \"hsl(213, 20%, 95%)\"\n        }}\n      >\n        <SymbolInput\n          value={symbolInput}\n          onBlur={validateAndUpdateSymbol}\n          onChange={handleSymbolChange}\n        />\n\n        {/* Button to toggle modal edition */}\n        <CardButton onClick={editCompound}>\n          <FiEdit />\n        </CardButton>\n\n        {/* Button to delete the compound */}\n        <CardButton onClick={removeCompound}>\n          <FiTrash2 />\n        </CardButton>\n\n        {/* Bullet to display the color associated with the compound */}\n        <CompoundColorBullet\n          className=\"bullet\"\n          color={compound.color as keyof typeof COMPOUND_COLORS}\n        />\n      </CompoundCardInner>\n    </CompoundCardWrapper>\n  )\n}\n\nexport default CompoundCard\n\n/**\n * Styled components\n */\n\nconst CompoundCardWrapper = styled.li`\n  flex-basis: 33%;\n`\n\nconst CompoundCardInner = styled.div`\n  margin: 5px;\n  padding: 20px;\n  position: relative;\n\n  align-items: center;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: var(--color-grey-lighter);\n  border-radius: 5px;\n  display: flex;\n  color: var(--color-grey-lightest);\n  cursor: pointer;\n  overflow: hidden;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    & {\n      box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n      transform: translateY(-2px);\n    }\n\n    & > button {\n      opacity: 1;\n    }\n\n    & > .bullet {\n      transform: scale(25);\n      border-color: var(--color-grey-lighter);\n    }\n    & > .symbol-input:after {\n      margin-left: 0%;\n      width: auto;\n    }\n  }\n\n  button {\n    padding: 0.8rem;\n  }\n`\n\ninterface ICompoundColorBulletProps {\n  color: keyof typeof COMPOUND_COLORS\n}\n\nconst CompoundColorBullet = styled.div<ICompoundColorBulletProps>`\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  top: 10px;\n  right: 10px;\n  border-radius: 50%;\n  transition: all 0.2s ease-in-out;\n  z-index: 1;\n\n  background-color: ${(props) => COMPOUND_COLORS[props.color]};\n  border: 1px solid var(--color-grey-light);\n`\n\nconst SymbolInput = styled.input`\n  font-size: 2rem;\n  margin-left: 0;\n  margin-right: 0.5rem;\n  z-index: 2;\n`\n","import styled from \"styled-components\"\n\n/* Types */\nimport { IFCWithChildren } from \"../types/FCWithChildren\"\n\nconst Error: React.FC<IFCWithChildren> = (props) => {\n  const { children } = props\n  return <ErrorWrapper className=\"error\">{children}</ErrorWrapper>\n}\n\nconst ErrorWrapper = styled.div`\n  position: absolute;\n  bottom: 0rem;\n  right: 0rem;\n\n  background-color: var(--color-triadic-red-dark);\n  border-radius: 5px;\n  box-shadow: 0px 0px 4px var(--color-triadic-red-darker);\n  color: white;\n  padding: 0.5rem;\n  pointer-events: none;\n  opacity: 0;\n  transform: translateY(105%);\n  z-index: 4;\n`\n\nexport default Error\n","import styled from \"styled-components\"\n\ninterface IInputProps extends React.HTMLProps<HTMLInputElement> {\n  errors?: boolean\n}\n\nconst Input = styled.input<IInputProps>`\n  ${(props) =>\n    props.errors\n      ? `\n    box-shadow: 0px 0px 4px 1px var(--color-triadic-red-dark),\n      inset 0px 0px 0px 1px var(--color-triadic-red-dark) !important;\n  `\n      : \"\"}\n`\n\nexport default Input\n","import styled from \"styled-components\"\n\n/* Components */\nimport { FiX } from \"react-icons/fi\"\n\n/* Hooks */\nimport { useEffect } from \"react\"\n\n/* Types */\nimport { IFCWithChildren } from \"../types/FCWithChildren\"\n\nexport interface IClosing {\n  closing?: boolean\n}\n\ntype IEditModalProps = IClosing &\n  IFCWithChildren & {\n    setClosing: (closing: boolean) => void\n    handleClose: () => void\n  }\n\nconst EditModal: React.FC<IEditModalProps> = (props) => {\n  const { children, closing, setClosing, handleClose } = props\n\n  const closeModal = () => {\n    /**\n     * Animate and close modal after slide animation\n     */\n    setClosing(true)\n    setTimeout(() => {\n      handleClose()\n    }, 250)\n  }\n\n  useEffect(() => {\n    if (closing) {\n      closeModal()\n    }\n    // eslint-disable-next-line\n  }, [closing])\n\n  return (\n    <CompoundEditModalWrapper closing={closing}>\n      <CompoundEditModalInner closing={closing}>\n        <CloseButton onClick={closeModal} closing={closing}>\n          <FiX />\n        </CloseButton>\n        {children}\n      </CompoundEditModalInner>\n    </CompoundEditModalWrapper>\n  )\n}\n\nexport default EditModal\n\nconst CompoundEditModalWrapper = styled.div<IClosing>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  min-height: 100%;\n  background-color: var(--color-grey-light);\n\n  animation-name: dim-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  border-radius: 5px;\n  display: flex;\n\n  /* Override animation upon modal close */\n  ${(props) =>\n    props.closing\n      ? `\n    animation-name: dim-out;\n    animation-timing-function: ease-in-out;\n    animation-duration: 0.25s;\n    animation-iteration-count: 1;\n    animation-fill-mode: forwards;\n  `\n      : \"\"}\n\n  @keyframes dim-in {\n    from {\n      background-color: rgba(0, 0, 0, 0);\n    }\n\n    to {\n      background-color: rgba(0, 0, 0, 0.2);\n    }\n  }\n\n  @keyframes dim-out {\n    from {\n      background-color: rgba(0, 0, 0, 0.2);\n    }\n\n    to {\n      background-color: rgba(0, 0, 0, 0);\n    }\n  }\n`\n\nconst CompoundEditModalInner = styled.div<IClosing>`\n  align-self: stretch;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: var(--color-grey-lighter);\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  border-radius: 5px;\n  flex-grow: 1;\n  margin: 10px;\n  padding: 2rem;\n  padding-top: 3.5rem;\n  position: relative;\n  z-index: 3;\n\n  /* Override animation upon modal close */\n  ${(props) =>\n    props.closing\n      ? `\n    animation-name: slide-out;\n    animation-timing-function: ease-in-out;\n    animation-duration: 0.25s;\n    animation-iteration-count: 1;\n    animation-fill-mode: forwards;\n  `\n      : \"\"}\n\n  label {\n    color: var(--color-grey-dark);\n  }\n\n  input {\n    background-color: rgba(0, 0, 0, 0.1);\n    border-radius: 5px;\n    flex-grow: 1;\n    min-width: 0;\n    margin-left: 1rem;\n    padding: 0.5rem 1rem;\n\n    &:hover,\n    &:focus {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n\n    &:autofill {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n\n    &:focus {\n      box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.4);\n    }\n  }\n`\n\nconst CloseButton = styled.button<IClosing>`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n\n  align-items: center;\n  background-color: unset;\n  border: none;\n  border-radius: 5px;\n  display: flex;\n  ${(props) => (props.closing ? \"disabled: true;\" : \"\")}\n  font-size: 1.3rem;\n  padding: 0.5rem;\n  margin-bottom: 1rem;\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`\n","import styled from \"styled-components\"\nimport Button from \"./Button\"\n\nconst SubmitButton = styled(Button)`\n  align-self: stretch;\n  font-size: 1.2rem;\n  justify-content: center;\n  margin-top: 1.5rem;\n  margin-left: 2.5%;\n  padding: 0.5rem;\n  width: 95%;\n`\nexport default SubmitButton\n","import styled from \"styled-components\"\nimport { useFormik } from \"formik\"\n\n/* Components */\nimport Error from \"../Error\"\nimport Input from \"../Input\"\nimport EditModal from \"../EditModal\"\nimport SubmitButton from \"../SubmitButton\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Helpers */\nimport { validateNotEmpty, validateGreaterThan } from \"../../helpers/validators\"\n\n/* Hooks */\nimport { useState } from \"react\"\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { ICompound } from \"../../types/Compound\"\n\ninterface ICompoundEditModalProps {\n  compound: ICompound\n  closeModal: () => void\n}\n\nconst CompoundEditModal: React.FC<ICompoundEditModalProps> = (props) => {\n  const { compound, closeModal } = props\n  const { compounds, updateCompound } = useData()\n  const [closing, setClosing] = useState<boolean>(false)\n  const compoundIndex = compounds.findIndex((comp) => comp.id === compound.id)\n\n  /**\n   * Validate method for Formik\n   */\n  interface IErrors {\n    symbol?: string\n    concentration?: string\n    name?: string\n  }\n\n  const validate = (values: ICompound) => {\n    const errors: IErrors = {}\n\n    /* Symbol validation */\n    if (!validateNotEmpty(values.symbol))\n      errors.symbol = \"Symbol cannot be empty\"\n    else if (!validateUnicity(\"symbol\", values.symbol))\n      errors.symbol = \"Symbol is already used\"\n\n    /* Concentration validation */\n    if (!validateNotEmpty(values.concentration))\n      errors.concentration = \"Concentration cannot be empty\"\n    else if (!validateGreaterThan(values.concentration, 0, true))\n      errors.concentration = \"Concentration cannot be lower than 0\"\n\n    return errors\n  }\n\n  const validateUnicity = (field: string, value: any): boolean => {\n    for (var i = 0; i < compounds.length; i++) {\n      // @ts-ignore\n      if (i !== compoundIndex && compounds[i][field] === value) {\n        return false\n      }\n    }\n    return true\n  }\n\n  /**\n   * Formik form initialization\n   */\n  const formik = useFormik({\n    // @ts-ignore\n    initialValues: {\n      symbol: compound.symbol,\n      concentration: compound.concentration,\n      name: compound.name,\n    },\n    validate,\n    onSubmit: (values) => {\n      const updatedCompound = { ...compound, ...values }\n      updateCompound(compoundIndex, updatedCompound)\n      setClosing(true)\n    },\n  })\n\n  return (\n    <EditModal\n      closing={closing}\n      setClosing={setClosing}\n      handleClose={closeModal}\n    >\n      <form onSubmit={formik.handleSubmit}>\n        <SymbolFieldInput color={compound.color}>\n          <label htmlFor=\"symbol\">Symbol:</label>\n          <Input\n            errors={!!formik.errors.symbol}\n            name=\"symbol\"\n            autoComplete=\"off\"\n            color={compound.color}\n            onChange={formik.handleChange}\n            value={formik.values.symbol}\n          />\n          {formik.errors.symbol && <Error>{formik.errors.symbol}</Error>}\n        </SymbolFieldInput>\n\n        <FieldInput>\n          <label htmlFor=\"concentration\">Concentration [mol/L]:</label>\n          <Input\n            errors={!!formik.errors.concentration}\n            name=\"concentration\"\n            type=\"number\"\n            onChange={formik.handleChange}\n            value={formik.values.concentration}\n          />\n          {formik.errors.concentration && (\n            <Error>{formik.errors.concentration}</Error>\n          )}\n        </FieldInput>\n\n        <FieldInput>\n          <label htmlFor=\"name\">Compound name (optional):</label>\n          <input\n            name=\"name\"\n            autoComplete=\"off\"\n            onChange={formik.handleChange}\n            value={formik.values.name}\n          />\n        </FieldInput>\n        <SubmitButton color=\"green\" type=\"submit\">\n          Done\n        </SubmitButton>\n      </form>\n    </EditModal>\n  )\n}\n\nexport default CompoundEditModal\n\n/**\n * Styled components\n */\n\nconst FieldInput = styled.div`\n  display: flex;\n  align-items: center;\n  align-self: stretch;\n  padding: 0.5rem;\n  position: relative;\n\n  &:hover > .error {\n    opacity: 1 !important;\n  }\n`\n\ninterface ISymbolInputProps {\n  color: string\n}\n\nconst SymbolFieldInput = styled(FieldInput)<ISymbolInputProps>`\n  align-items: flex-start;\n  background-color: ${(props) =>\n    COMPOUND_COLORS[props.color as keyof typeof COMPOUND_COLORS]};\n  border-radius: 5px;\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  margin-bottom: 0.5rem;\n  padding: 1rem;\n\n  label {\n    font-size: 1.5rem;\n  }\n\n  input {\n    font-size: 3rem;\n    margin-left: 1rem;\n    width: 0;\n  }\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport CompoundCard from \"./CompoundCard\"\nimport CompoundEditModal from \"./CompoundEditModal\"\n\n/* Hooks */\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { ICompound } from \"../../types/Compound\"\n\ninterface ICompoundListProps {\n  compounds: ICompound[]\n}\n\nconst CompoundList: React.FC<ICompoundListProps> = (props) => {\n  const { compounds } = props\n  const { editedCompoundId, editCompound, findCompound, updateCompound, removeCompound } =\n    useData()\n\n  const editedCompound = editedCompoundId\n    ? findCompound(editedCompoundId)\n    : undefined\n\n  return (\n    <CompoundListWrapper>\n      {compounds.map((compound, index) => (\n        <CompoundCard\n          key={index}\n          compound={compound}\n          editCompound={(): void => {\n            editCompound(index)\n          }}\n          updateCompound={(compound: ICompound): void => {\n            updateCompound(index, compound)\n          }}\n          removeCompound={(): void => {\n            removeCompound(index)\n          }}\n          validateUnicity={(field: string, value: any): boolean => {\n            for (var i = 0; i < compounds.length; i++) {\n              // @ts-ignore\n              if (i !== index && compounds[i][field] === value) {\n                return false\n              }\n            }\n            return true\n          }}\n        />\n      ))}\n\n      {/* Edit modal */}\n      {editedCompoundId && (\n        <CompoundEditModal\n          compound={editedCompound as ICompound}\n          closeModal={() => editCompound()}\n        />\n      )}\n    </CompoundListWrapper>\n  )\n}\n\nexport default CompoundList\n\n/**\n * Styled components\n */\n\nconst CompoundListWrapper = styled.ul`\n  align-self: stretch;\n  display: flex;\n  flex-wrap: wrap;\n  list-style-type: none;\n  padding-left: 0;\n`\n","/* Components */\nimport Button from \"../components/Button\"\nimport PageTitle from \"../components/PageTitle\"\nimport CompoundList from \"../components/compounds/CompoundList\"\nimport { FiPlus } from \"react-icons/fi\"\n\n/* Hooks */\nimport { useEffect } from \"react\"\nimport { useData } from \"../context/DataContext\"\n\nconst CompoundsPage: React.FC = () => {\n  const { compounds, addCompound, editCompound } = useData()\n\n  useEffect(() => {\n    return () => {\n      /* Sets edited compound to undefined on dismount */\n      editCompound()\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <>\n      <PageTitle>Compounds</PageTitle>\n      <Button color=\"green\" onClick={addCompound}>\n        Add <FiPlus />\n      </Button>\n      <CompoundList compounds={compounds} />\n    </>\n  )\n}\n\nexport default CompoundsPage\n","import styled from \"styled-components\"\n\nconst Notice = styled.p`\n  color: var(--color-grey-normal);\n  font-style: italic;\n  margin: 0.5rem;\n`\n\nexport default Notice\n","import styled from \"styled-components\"\n\n/* Components */\nimport { Fragment } from \"react\"\nimport Notice from \"../Notice\"\nimport { FiArrowRight, FiPlus } from \"react-icons/fi\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Hooks */\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { ICompound } from \"../../types/Compound\"\nimport { IReaction } from \"../../types/Reaction\"\n\ninterface IReactionPreviewProps {\n  reaction: IReaction\n}\n\nconst ReactionPreview: React.FC<IReactionPreviewProps> = (props) => {\n  const { reaction } = props\n  const { findCompound } = useData()\n\n  return (\n    <ReactionPreviewWrapper>\n      {reaction.reactants.length === 0 && reaction.products.length === 0 && (\n        <Notice>No reaction data</Notice>\n      )}\n\n      {reaction.reactants.map((reactionCompound, index) => {\n        const compound = findCompound(reactionCompound.compoundId) as ICompound\n\n        return (\n          <Fragment key={reactionCompound.compoundId}>\n            {index !== 0 && <FiPlus size={25} />}\n            <CompoundWrapper>\n              <p>{reactionCompound.stoichiometricCoefficient}</p>\n              <CompoundTile\n                color={compound.color as keyof typeof COMPOUND_COLORS}\n              >\n                {compound.symbol}\n              </CompoundTile>\n            </CompoundWrapper>\n          </Fragment>\n        )\n      })}\n\n      {reaction.reactants.length > 0 && reaction.products.length > 0 && (\n        <FiArrowRight size={25} />\n      )}\n\n      {reaction.products.map((reactionCompound, index) => {\n        const compound = findCompound(reactionCompound.compoundId) as ICompound\n\n        return (\n          <Fragment key={reactionCompound.compoundId}>\n            {index !== 0 && <FiPlus size={25} />}\n            <CompoundWrapper>\n              <p>{reactionCompound.stoichiometricCoefficient}</p>\n              <CompoundTile\n                color={compound.color as keyof typeof COMPOUND_COLORS}\n              >\n                {compound.symbol}\n              </CompoundTile>\n            </CompoundWrapper>\n          </Fragment>\n        )\n      })}\n    </ReactionPreviewWrapper>\n  )\n}\n\nexport default ReactionPreview\n\nconst ReactionPreviewWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-grow: 1;\n  min-height: 3rem;\n`\n\nconst CompoundWrapper = styled.div`\n  align-items: flex-end;\n  display: flex;\n  margin: 0 0.5rem;\n\n  p {\n    color: var(--color-grey-dark);\n    font-size: 1.6rem;\n    margin: 0 0 0.2rem 0;\n  }\n`\n\ninterface ICompoundColorBulletProps {\n  color: keyof typeof COMPOUND_COLORS\n}\n\nconst CompoundTile = styled.div<ICompoundColorBulletProps>`\n  background-color: ${(props) => COMPOUND_COLORS[props.color]};\n  border-radius: 5px;\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  color: var(--color-grey-dark);\n  font-size: 1.6rem;\n  margin: 0 0.5rem;\n  padding: 0.5rem 0.9rem;\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport CardButton from \"../CardButton\"\nimport ReactionPreview from \"./ReactionPreview\"\nimport { FiEdit, FiTrash2 } from \"react-icons/fi\"\n\n/* Types */\nimport { IReaction } from \"../../types/Reaction\"\n\ninterface IReactionCardProps {\n  reaction: IReaction\n  reactionIndex: number\n  editReaction: () => void\n  removeReaction: () => void\n}\n\nconst ReactionCard: React.FC<IReactionCardProps> = (props) => {\n  const { reaction, reactionIndex, editReaction, removeReaction } = props\n\n  return (\n    <ReactionCardWrapper>\n      <ReactionNumber>\n        {reactionIndex + 1} {\")\"}\n      </ReactionNumber>\n      <ReactionPreview reaction={reaction} />\n      <CardButton onClick={editReaction}>\n        <FiEdit />\n      </CardButton>\n      <CardButton onClick={removeReaction}>\n        <FiTrash2 />\n      </CardButton>\n    </ReactionCardWrapper>\n  )\n}\n\nexport default ReactionCard\n\nconst ReactionCardWrapper = styled.div`\n  margin: 10px;\n  padding: 20px;\n  position: relative;\n\n  align-items: center;\n  align-self: stretch;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: var(--color-grey-lighter);\n  border-radius: 5px;\n  display: flex;\n  color: var(--color-grey-dark);\n  cursor: pointer;\n  overflow: hidden;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    background-color: var(--color-grey-lightest);\n\n    & {\n      box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n      transform: translateY(-2px);\n    }\n\n    & > button {\n      opacity: 1;\n    }\n\n    & > .bullet {\n      transform: scale(20);\n      border-color: var(--color-grey-lighter);\n    }\n    & > .symbol-input:after {\n      margin-left: 0%;\n      width: auto;\n    }\n  }\n\n  p:not(:first-child) {\n    flex-grow: 1;\n    margin: 0;\n  }\n`\n\nconst ReactionNumber = styled.p`\n  color: var(--color-grey-normal);\n  flex-grow: 0;\n  font-size: 1.4rem;\n  font-weight: 600;\n  margin: 0 1rem 0 0;\n  padding: 0.6rem 0.5rem;\n`\n","/* Types */\nimport {\n  IKineticConstants,\n  IReaction,\n  IReactionCompound,\n} from \"../types/Reaction\"\nimport { ICompound } from \"../types/Compound\"\n\n/**\n * This is a placeholder for more complex kinetic models,\n * where constants can be added and used in expressions\n *\n * Kinetic constants are representes by:\n *  - A principal constant, with key @reactionConstant\n *  - A compound-specific constant, with key @compoundId\n *\n * More complex models are not considerer, for simplicity of\n * the MVP1\n */\n\nexport const KINETIC_MODELS = [\"Simple\", \"Hiperbolic\", \"Autocatalytic\"]\n\nexport const generateKineticConstants = (\n  model: number,\n  reaction: IReaction,\n  compounds: ICompound[]\n): IKineticConstants => {\n  switch (model) {\n    case 1:\n      return generateHiperbolicModelConstants(reaction, compounds)\n    case 2:\n      return generateAutocatalyticModelConstants(reaction, compounds)\n    default:\n      // 0\n      return generateSimpleModelConstants(reaction, compounds)\n  }\n}\n\nconst generateSimpleModelConstants = (\n  reaction: IReaction,\n  compounds: ICompound[]\n) => {\n  // eslint-disable-next-line\n  const { reactionConstant, ...other } = reaction.kineticConstants\n\n  const updatedExponents: IKineticConstants = {}\n  reaction.reactants.forEach((reactionCompound: IReactionCompound) => {\n    const compound = compounds.find(\n      (c) => c.id === reactionCompound.compoundId\n    ) as ICompound\n    const paramKey = reactantExponent(compound)\n    const oldConstant = reaction.kineticConstants[paramKey]\n\n    if (oldConstant === undefined) {\n      updatedExponents[paramKey] = 1\n    } else {\n      updatedExponents[paramKey] = oldConstant\n    }\n  })\n\n  return { reactionConstant, ...updatedExponents }\n}\n\nconst generateHiperbolicModelConstants = (\n  reaction: IReaction,\n  compounds: ICompound[]\n) => {\n  // eslint-disable-next-line\n  const { reactionConstant, ...other } = reaction.kineticConstants\n\n  const updatedExponents: IKineticConstants = {}\n  reaction.reactants.forEach((reactionCompound: IReactionCompound) => {\n    const compound = compounds.find(\n      (c) => c.id === reactionCompound.compoundId\n    ) as ICompound\n    const paramKey = semiSaturationConstant(compound)\n    const oldConstant = reaction.kineticConstants[paramKey]\n\n    if (oldConstant === undefined) {\n      updatedExponents[paramKey] = 1\n    } else {\n      updatedExponents[paramKey] = oldConstant\n    }\n  })\n\n  return { reactionConstant, ...updatedExponents }\n}\n\nconst generateAutocatalyticModelConstants = (\n  reaction: IReaction,\n  compounds: ICompound[]\n) => {\n  // eslint-disable-next-line\n  const { reactionConstant, ...other } = reaction.kineticConstants\n\n  const updatedExponents: IKineticConstants = {}\n\n  reaction.reactants.forEach((reactionCompound: IReactionCompound) => {\n    const compound = compounds.find(\n      (c) => c.id === reactionCompound.compoundId\n    ) as ICompound\n    const paramKey = reactantExponent(compound)\n    const oldConstant = reaction.kineticConstants[paramKey]\n\n    if (oldConstant === undefined) {\n      updatedExponents[paramKey] = 1\n    } else {\n      updatedExponents[paramKey] = oldConstant\n    }\n  })\n  reaction.products.forEach((reactionCompound: IReactionCompound) => {\n    const compound = compounds.find(\n      (c) => c.id === reactionCompound.compoundId\n    ) as ICompound\n    const paramKey = productExponent(compound)\n    const oldConstant = reaction.kineticConstants[paramKey]\n\n    if (oldConstant === undefined) {\n      updatedExponents[paramKey] = 1\n    } else {\n      updatedExponents[paramKey] = oldConstant\n    }\n  })\n\n  return { reactionConstant, ...updatedExponents }\n}\n\n// Some placeholder parameters\n\nexport const reactantExponent = (compound: ICompound) => {\n  return `\\\\alpha_${compound.symbol}`\n}\n\nexport const productExponent = (compound: ICompound) => {\n  return `\\\\beta_${compound.symbol}`\n}\n\nexport const semiSaturationConstant = (compound: ICompound) => {\n  return `K_${compound.symbol}`\n}\n","import styled from \"styled-components\"\nimport randomstring from \"randomstring\"\n\n/* Components */\nimport { FiChevronDown } from \"react-icons/fi\"\n\n// Hooks\nimport { useEffect, useState, useRef, useCallback } from \"react\"\n\ninterface ISelectProps<T> {\n  defaultDisplayValue?: string\n  initialValue?: ISelectOption<T>\n  selectOptions: ISelectOption<T>[]\n  onSelectionChange: (value?: T) => void\n  alignment?: string\n}\n\ninterface ISelectOption<T> {\n  value?: T\n  displayText?: string\n  collapsedDisplayText?: string\n}\n\n/* Reusable custom select component */\nconst Select = <T extends string | number>(props: ISelectProps<T>) => {\n  // Destructure props\n  const {\n    alignment,\n    defaultDisplayValue,\n    initialValue,\n    onSelectionChange,\n    selectOptions,\n  } = props\n\n  // Set state variables\n  const [selecting, setSelecting] = useState<boolean>(false)\n  const [currentValue, setCurrentValue] = useState<T | undefined>(\n    initialValue?.value || undefined\n  )\n\n  // Use ref for id value\n  const id = useRef<string>(randomstring.generate(8))\n\n  /*\n   * Save a ref select component, for event add and remove listeners\n   * when clicking outside\n   */\n  const selectRef = useRef<HTMLElement | null>(null)\n  // const dropdownRef = useRef<HTMLElement | null>(null)\n\n  useEffect(() => {\n    // Save initialValue provided as prop to currentValue, if present\n    if (initialValue) setCurrentValue(initialValue.value)\n\n    // Save ref to rendered Select component\n    selectRef.current = document.getElementById(id.current)\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  /*\n   * Set ref to dropdown when visible\n   */\n  useEffect(() => {\n    if (selecting) selectRef.current = document.getElementById(id.current)\n    else selectRef.current = null\n  }, [selecting])\n\n  /*\n   * A useCallback hook here is needed so that the exact same function is passed\n   * to both addEventListener and removeEventListener\n   *\n   * https://dev.to/marcostreng/how-to-really-remove-eventlisteners-in-react-3och\n   */\n  const clickOutsideHandler = useCallback((event: any): void => {\n    // TODO: Better typing\n    // Uses tips from:\n    // https://stackoverflow.com/questions/152975/how-do-i-detect-a-click-outside-an-element/3028037#3028037\n\n    if (!selectRef.current?.contains(event.target)) {\n      toggleSelecting()\n      // Change state manually because clickOutsideHandler can't have toggleSelecting as a dependency\n      setSelecting(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  /*\n   * Toggles select options, while adding listeners for closing when clicking outside\n   * of the dropdown\n   */\n  const toggleSelecting = (): void => {\n    // Event listeners handling\n    if (!selecting) {\n      window.addEventListener(\"click\", clickOutsideHandler, true)\n    } else {\n      window.removeEventListener(\"click\", clickOutsideHandler, true)\n    }\n\n    // Toggle state variable\n    setSelecting(!selecting)\n  }\n\n  /*\n   * Handles value selection\n   * Definition is pretty self-explanatory\n   */\n  const selectValue = (value?: T): void => {\n    toggleSelecting()\n    setCurrentValue(value)\n    onSelectionChange(value)\n  }\n\n  /*\n   * Current selected value data\n   */\n  const currentValueOption: ISelectOption<T> | undefined = selectOptions.find(\n    (option) => option.value === currentValue\n  )\n\n  return (\n    <SelectWrapper id={id.current}>\n      <SelectValue selecting={selecting} onClick={toggleSelecting}>\n        <p>{currentValueOption?.collapsedDisplayText || defaultDisplayValue}</p>\n        <FiChevronDown size={10} />\n      </SelectValue>\n      {selecting && (\n        <SelectOptions alignment={alignment || \"left\"}>\n          {defaultDisplayValue && (\n            <SelectOption onClick={() => selectValue(undefined)}>\n              <p>{defaultDisplayValue}</p>\n            </SelectOption>\n          )}\n          {selectOptions.map(({ value, displayText }) => (\n            <SelectOption\n              key={value}\n              onClick={() => {\n                selectValue(value)\n              }}\n            >\n              <p>{displayText}</p>\n            </SelectOption>\n          ))}\n        </SelectOptions>\n      )}\n    </SelectWrapper>\n  )\n}\n\nexport default Select\n\ninterface ISelecting {\n  selecting: boolean\n}\n\nconst SelectWrapper = styled.div`\n  position: relative;\n  flex-grow: 1;\n`\n\nconst SelectValue = styled.div<ISelecting>`\n  align-items: center;\n  background-color: var(--color-grey-lightest);\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  display: flex;\n  font-size: 1.1rem;\n  outline: none;\n  padding: 5px 10px;\n  transition: all 0.15s linear;\n  ${(props) =>\n    props.selecting\n      ? `box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15),\n    0px 0px 2px var(--color-grey-normal);`\n      : \"\"}\n\n  & > p {\n    margin: 0;\n    flex-grow: 1;\n  }\n\n  & > svg {\n    margin-left: 0.5rem;\n  }\n`\n\ninterface ISelectOptions {\n  alignment: string\n}\n\nconst SelectOptions = styled.div<ISelectOptions>`\n  position: absolute;\n  top: 100%;\n\n  align-items: stretch;\n  ${(props) => (props.alignment === \"left\" ? \"left: 0;\" : \"\")}\n  ${(props) => (props.alignment === \"right\" ? \"right: 0;\" : \"\")}\n  background-color: var(--color-grey-lightest);\n  border: none;\n  border-radius: 5px;\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15),\n    0px 0px 2px var(--color-grey-normal);\n  display: flex;\n  flex-direction: column;\n  font-size: 1.2rem;\n  margin-top: 0.5rem;\n  max-height: 400px;\n  overflow-y: scroll;\n  padding: 0.5rem;\n  transition: all 0.05s linear;\n  width: auto;\n  z-index: 20;\n`\n\nconst SelectOption = styled.button`\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 1rem;\n  text-align: left;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n\n  &:hover {\n    background-color: var(--color-grey-lighter);\n  }\n\n  & > p {\n    white-space: nowrap;\n    overflow-x: hidden;\n    text-overflow: ellipsis;\n    margin: 0;\n  }\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport CardButton from \"../CardButton\"\nimport { FiTrash2 } from \"react-icons/fi\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Helpers */\nimport { validateNotEmpty } from \"../../helpers/validators\"\n\n/* Hooks */\nimport { useState } from \"react\"\n\n/* Types */\nimport { ICompound } from \"../../types/Compound\"\nimport { IReactionCompound } from \"../../types/Reaction\"\n\ninterface IReactionCompoundCardProps {\n  key: string\n  compound: ICompound\n  reactionCompound: IReactionCompound\n  updateCompound: (updatedReactionCompound: IReactionCompound) => void\n  removeCompound: () => void\n}\n\nconst ReactionCompoundCard: React.FC<IReactionCompoundCardProps> = (props) => {\n  const { compound, reactionCompound, updateCompound, removeCompound } = props\n\n  /* Coefficient is short for Stoichiometric Coefficient in this component */\n  const [coefficientInput, setCoefficientInput] = useState<number | \"\">(\n    reactionCompound.stoichiometricCoefficient\n  )\n\n  const handleCoefficientChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    if (event.target.value === \"\") {\n      setCoefficientInput(\"\")\n      return\n    }\n    setCoefficientInput(parseFloat(event.target.value))\n  }\n\n  const validateAndUpdateCoefficient = () => {\n    if (validateNotEmpty(coefficientInput)) {\n      updateCompound({\n        ...reactionCompound,\n        stoichiometricCoefficient: coefficientInput as number,\n      })\n      return\n    }\n    setCoefficientInput(reactionCompound.stoichiometricCoefficient)\n  }\n\n  return (\n    <ReactionCompoundCardWrapper\n      color={compound.color as keyof typeof COMPOUND_COLORS}\n    >\n      <h1>{compound.symbol}</h1>\n      <input\n        value={coefficientInput}\n        type=\"number\"\n        onChange={handleCoefficientChange}\n        onBlur={validateAndUpdateCoefficient}\n      />\n      <CardButton onClick={removeCompound}>\n        <FiTrash2 />\n      </CardButton>\n    </ReactionCompoundCardWrapper>\n  )\n}\n\nexport default ReactionCompoundCard\n\ninterface IReactionCompoundCardWrapperProps {\n  color: keyof typeof COMPOUND_COLORS\n}\n\nconst ReactionCompoundCardWrapper = styled.div<IReactionCompoundCardWrapperProps>`\n  margin: 5px;\n  padding: 1.3rem;\n  position: relative;\n\n  align-items: center;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: ${(props) => COMPOUND_COLORS[props.color]};\n  border-radius: 5px;\n  color: var(--color-grey-dark);\n  display: flex;\n  cursor: pointer;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    & {\n      box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n      transform: translateY(-2px);\n    }\n  }\n\n  h1 {\n    flex-grow: 1;\n    font-size: 1.8rem;\n    margin: 0;\n  }\n\n  input {\n    font-size: 1.3rem;\n    width: 0px;\n  }\n\n  button {\n    opacity: 1;\n    margin-left: 0.5rem;\n  }\n`\n","/* Components */\nimport ReactionCompoundCard from \"./ReactionCompoundCard\"\n\n/* Hooks */\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { ICompound } from \"../../types/Compound\"\nimport { IReactionCompound } from \"../../types/Reaction\"\nimport { CompoundType } from \"../../context/DataContext\"\n\ninterface IReactionCompoundListProps {\n  compoundType: CompoundType\n  reactionCompounds: IReactionCompound[]\n  reactionIndex: number\n  removeCompound: (compoundIndex: number, compoundType: CompoundType) => void\n  updateCompound: (\n    compoundIndex: number,\n    compoundType: CompoundType,\n    updatedCompound: IReactionCompound\n  ) => void\n}\n\nconst ReactionCompoundList: React.FC<IReactionCompoundListProps> = (props) => {\n  const { reactionCompounds, removeCompound, updateCompound, compoundType } =\n    props\n  const { findCompound } = useData()\n\n  return (\n    <>\n      {reactionCompounds.map((reactionCompound) => {\n        const compound = findCompound(reactionCompound.compoundId) as ICompound\n        /**\n         * compoundIndex is the index in the reaction object (reactants or products)\n         *  */\n        const compoundIndex = reactionCompounds.findIndex(\n          (c) => c.compoundId === reactionCompound.compoundId\n        ) as number\n\n        return (\n          <ReactionCompoundCard\n            key={reactionCompound.compoundId}\n            compound={compound}\n            reactionCompound={reactionCompound}\n            updateCompound={(updatedReactionCompound: IReactionCompound) => {\n              updateCompound(\n                compoundIndex,\n                compoundType,\n                updatedReactionCompound\n              )\n            }}\n            removeCompound={() => {\n              removeCompound(compoundIndex, compoundType)\n            }}\n          />\n        )\n      })}\n    </>\n  )\n}\n\nexport default ReactionCompoundList\n","import styled from \"styled-components\"\nimport { Fragment } from \"react\"\n/* Types */\nimport { Token, TokenTypes } from \"../helpers/tokenization\"\n\ninterface IEquation {\n  tokenizedEquation: Token[]\n}\n\nexport const Equation: React.FC<IEquation> = (props) => {\n  const { tokenizedEquation } = props\n  const components: JSX.Element[] = []\n\n  const parenthesisStack: (JSX.Element | string)[][] = []\n  const operationStack: (JSX.Element | string)[] = []\n\n  tokenizedEquation.forEach((token) => {\n    /**\n     * Parenthesis treatment takes precedence over everything else.\n     *\n     * A buffer is pushed to the parenthesis stack upon finding a left bracket.\n     *\n     * When a right parenthesis is found, the last element from the buffer is popped,\n     * and added as a parenthesis component\n     */\n    if (token.type === TokenTypes.LeftParenthesis) {\n      parenthesisStack.push([])\n    } else if (token.type === TokenTypes.RightParenthesis) {\n      // If the syntax is correct, pop should never return undefined\n      const parenthesis = parenthesisStack.pop() as (string | JSX.Element)[]\n\n      // If there are operations in the operationStack, pop most recent one\n      if (operationStack.length > 0) {\n        const operation = operationStack.pop()\n        //\n        if (operation === \"/\") {\n          const numerator = components.pop() as string | JSX.Element\n          components.push(\n            <Division\n              numerator={numerator}\n              denominator={<Parenthesis elements={parenthesis} />}\n            />\n          )\n        } else if (operation === \"^\") {\n          const base = components.pop() as string | JSX.Element\n          components.push(\n            <Power base={base} power={<Parenthesis elements={parenthesis} />} />\n          )\n        }\n      } else {\n        // No operations in operationStack, simply push component\n        components.push(<Parenthesis elements={parenthesis} />)\n      }\n    }\n    //\n    /**\n     * Variables and parameters are easy to treat.\n     *\n     * The only considerations are to push to the parenthesis stack\n     * if a buffer is present, and to build Division and Power components if\n     * necessary.\n     */\n    else if (\n      token.type === TokenTypes.Parameter ||\n      token.type === TokenTypes.Variable\n    ) {\n      /**\n       * Push to parenthesis stack if one is present\n       */\n      if (parenthesisStack.length > 0) {\n        parenthesisStack[parenthesisStack.length - 1].push(\n          <SymbolComponent symbol={token.value.replace(/<|>|{|}/g, \"\")} />\n        )\n      }\n      //\n      /**\n       * Then, check if division or power are present in the stack\n       *  */\n      else if (operationStack.length > 0) {\n        /**\n         * Pop most recent operation from stack\n         */\n        const operation = operationStack.pop()\n        //\n        if (operation === \"/\") {\n          const numerator = components.pop() as string | JSX.Element\n          components.push(\n            <Division\n              numerator={numerator}\n              denominator={\n                <SymbolComponent symbol={token.value.replace(/<|>|{|}/g, \"\")} />\n              }\n            />\n          )\n        } else if (operation === \"^\") {\n          const base = components.pop() as string | JSX.Element\n          components.push(\n            <Power\n              base={base}\n              power={\n                <SymbolComponent symbol={token.value.replace(/<|>|{|}/g, \"\")} />\n              }\n            />\n          )\n        }\n      }\n      //\n      /**\n       * Next steps are easier: close parenthesis or just push to components\n       */\n      else {\n        components.push(\n          <SymbolComponent symbol={token.value.replace(/<|>|{|}/g, \"\")} />\n        )\n      }\n    }\n    //\n    /**\n     * Division and power are special in that they need the previous\n     * element in components. For this reason, the use a stack.\n     * */\n    else if (token.type === TokenTypes.Operator) {\n      if (token.value === \"/\" || token.value === \"^\") {\n        //\n        operationStack.push(token.value)\n      }\n      //\n      else if (parenthesisStack.length > 0) {\n        if (token.value === \"+\" || token.value === \"-\") {\n          parenthesisStack[parenthesisStack.length - 1].push(<>{token.value}</>)\n        } else if (token.value === \"*\") {\n          parenthesisStack[parenthesisStack.length - 1].push(<>.</>)\n        }\n      } else {\n        if (token.value === \"+\" || token.value === \"-\") {\n          components.push(<>{token.value}</>)\n        } else if (token.value === \"*\") {\n          components.push(<>.</>)\n        }\n      }\n    }\n  })\n\n  return (\n    <>\n      {components.map((component, index) => (\n        <Fragment key={index}>{component}</Fragment>\n      ))}\n    </>\n  )\n}\n\n// ----------------------------------------------------------------\n/**\n * Symbol Component\n * For alphanumeric expressions such as variables or parameters\n */\ninterface ISymbolComponent {\n  symbol: string\n}\n\nexport const SymbolComponent: React.FC<ISymbolComponent> = (props) => {\n  const { symbol } = props\n\n  /**\n   * Expressions may have subindices\n   * For now, they may not have superindices (TODO: maybe?)\n   * TODO: Support commas for subindex separation?\n   */\n  const separatedTerms: (string | JSX.Element)[] = symbol.split(\"_\")\n\n  // Replace symbols represented as strings for components\n  separatedTerms.forEach((term, index) => {\n    switch (term) {\n      case \"\\\\alpha\":\n        separatedTerms[index] = <GreekAlpha />\n        break\n      case \"\\\\beta\":\n        separatedTerms[index] = <GreekBeta />\n        break\n      case \"\\\\mu\":\n        separatedTerms[index] = <GreekMu />\n        break\n      default:\n    }\n  })\n\n  for (let i = separatedTerms.length - 1; i > 0; i--) {\n    // Last term will be the subindex\n    const subindex = separatedTerms.pop() as string | JSX.Element\n    separatedTerms[i - 1] = (\n      <Subindex base={separatedTerms[i - 1]} subindex={subindex} />\n    )\n  }\n\n  // Final result is at separatedTerms[0]\n  return separatedTerms[0] as JSX.Element\n}\n\n// ----------------------------------------------------------------\n/**\n * Parenthesis\n */\n\ninterface IParenthesisProps {\n  elements: (string | JSX.Element)[]\n}\n\nexport const Parenthesis: React.FC<IParenthesisProps> = (props) => {\n  const { elements } = props\n\n  return (\n    <>\n      {elements.map((elem, index) => (\n        <Fragment key={index}>{elem}</Fragment>\n      ))}\n    </>\n  )\n}\n\n// ----------------------------------------------------------------\n/**\n * Division\n */\n\ninterface IDivisionProps {\n  numerator: string | JSX.Element\n  denominator: string | JSX.Element\n}\n\nexport const Division: React.FC<IDivisionProps> = (props) => {\n  const { numerator, denominator } = props\n\n  return (\n    <DivisionWrapper>\n      <div>{numerator}</div>\n      <div></div>\n      <div>{denominator}</div>\n    </DivisionWrapper>\n  )\n}\n\nconst DivisionWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n\n  & > div:not(:nth-child(2)) {\n    display: flex;\n    padding: 0.5rem;\n    position: relative;\n  }\n\n  & > div:nth-child(2) {\n    width: 100%;\n    height: 2px;\n    background-color: var(--color-grey-dark);\n  }\n`\n\n// ----------------------------------------------------------------\n/**\n * Power\n *  */\n\ninterface IPowerProps {\n  base: string | JSX.Element\n  power: string | JSX.Element\n}\n\nexport const Power: React.FC<IPowerProps> = (props) => {\n  const { base, power } = props\n  return (\n    <PowerWrapper>\n      <div>{base}</div>\n      <div className=\"exponent\">{power}</div>\n    </PowerWrapper>\n  )\n}\n\nconst PowerWrapper = styled.div`\n  position: relative;\n  display: flex;\n\n  & > .exponent {\n    transform: translateY(-40%) scale(0.8);\n  }\n`\n\n// ----------------------------------------------------------------\n/**\n * Subindex\n *  */\n\ninterface ISubindexProps {\n  base: string | JSX.Element\n  subindex: string | JSX.Element\n}\n\nexport const Subindex: React.FC<ISubindexProps> = (props) => {\n  const { base, subindex } = props\n  return (\n    <SubindexWrapper>\n      <div>{base}</div>\n      <div className=\"subindex\">{subindex}</div>\n    </SubindexWrapper>\n  )\n}\n\nconst SubindexWrapper = styled.div`\n  position: relative;\n  display: flex;\n\n  & > .subindex {\n    transform: translateY(30%) scale(0.75);\n  }\n`\n\n// ----------------------------------------------------------------\n/**\n * Greek letters\n */\n\nexport const GreekAlpha = () => <span>&alpha;</span>\nexport const GreekBeta = () => <span>&beta;</span>\nexport const GreekMu = () => <span>&mu;</span>\n","import styled from \"styled-components\"\n\n/* Components */\nimport { Equation, Subindex } from \"../MathExpressions\"\n\n/* Hooks */\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { IReaction } from \"../../types/Reaction\"\n\ninterface IReactionEquationProps {\n  reaction: IReaction\n  keyCompoundSymbol?: string\n}\n\nconst ReactionEquation: React.FC<IReactionEquationProps> = (props) => {\n  const { reaction } = props\n  const { findCompound } = useData()\n\n  const keyCompound = findCompound(reaction.keyCompound)\n  const keyCompoundSymbol: string | undefined = keyCompound?.symbol || undefined\n\n  return (\n    <EquationWrapper>\n      {keyCompoundSymbol && (\n        <>\n          <Subindex base=\"r\" subindex={keyCompoundSymbol} />\n          &nbsp;=&nbsp;\n        </>\n      )}\n      <Equation tokenizedEquation={reaction.kineticEquation} />\n    </EquationWrapper>\n  )\n}\n\nexport default ReactionEquation\n\n//\n\nconst EquationWrapper = styled.div`\n  align-items: center;\n  align-self: stretch;\n  background-color: var(--color-grey-lightest);\n  border: 1px solid var(--color-grey-light);\n  border-radius: 5px;\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  color: var(--color-grey-dark);\n  display: flex;\n  font-size: 1.8rem;\n  justify-content: center;\n  padding: 1.5rem;\n  margin: 1.5rem 0 1rem;\n\n  span {\n    font-family: \"Comfortaa\", symbol;\n  }\n`\n","import styled from \"styled-components\"\n\n/* Helpers */\nimport { validateNotEmpty } from \"../../helpers/validators\"\n\n/* Hooks */\nimport { useState } from \"react\"\n\ninterface IReactionParamInputCardProps {\n  paramSymbol: string | JSX.Element | JSX.Element[]\n  value: number\n  updateValue: (value: number) => void\n}\n\nconst ReactionParamInputCard: React.FC<IReactionParamInputCardProps> = (\n  props\n) => {\n  const { paramSymbol, value, updateValue } = props\n  const [valueInput, setValueInput] = useState<number | \"\">(value)\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.value === \"\") {\n      setValueInput(\"\")\n      return\n    }\n    setValueInput(parseFloat(event.target.value))\n  }\n\n  const validateAndUpdateConstant = () => {\n    if (validateNotEmpty(valueInput)) {\n      updateValue(valueInput as number)\n      return\n    }\n    setValueInput(value)\n  }\n\n  return (\n    <ParamInputWrapper>\n      <ParamInputInner>\n        <h1>{paramSymbol}</h1>\n        <input\n          value={valueInput}\n          type=\"number\"\n          onChange={handleChange}\n          onBlur={validateAndUpdateConstant}\n        />\n      </ParamInputInner>\n    </ParamInputWrapper>\n  )\n}\n\nexport default ReactionParamInputCard\n\nconst ParamInputWrapper = styled.div`\n  flex-basis: 50%;\n`\n\nconst ParamInputInner = styled.div`\n  align-items: center;\n  background-color: var(--color-grey-light);\n  border-radius: 5px;\n  cursor: pointer;\n  display: flex;\n  margin: 0.5rem;\n  padding: 1.3rem;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n    transform: translateY(-2px);\n  }\n\n  h1 {\n    color: var(--color-grey-dark);\n    font-size: 1.6rem;\n    margin: 0;\n    margin-right: 1rem;\n\n    span {\n      /* Greek symbols */\n      font-family: \"Comfortaa\", symbol;\n    }\n  }\n\n  input {\n    font-size: 1.4rem;\n  }\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport ReactionParamInputCard from \"./ReactionParamInputCard\"\nimport { GreekMu, SymbolComponent } from \"../MathExpressions\"\n\n/* Types */\nimport { ICompound } from \"../../types/Compound\"\nimport { IReaction } from \"../../types/Reaction\"\n\ninterface IReactionKineticParametersProps {\n  compounds: ICompound[]\n  reaction: IReaction\n  updateKineticConstant: (key: string, value: number) => void\n}\n\nconst ReactionKineticParameters: React.FC<IReactionKineticParametersProps> = (\n  props\n) => {\n  const { reaction, updateKineticConstant } = props\n  const { reactionConstant, ...compoundParams } = reaction.kineticConstants\n\n  return (\n    <KineticParamsWrapper>\n      <ReactionParamInputCard\n        paramSymbol={reaction.kineticModel === 1 ? <GreekMu /> : \"k\"}\n        value={reactionConstant}\n        updateValue={(value: number) => {\n          updateKineticConstant(\"reactionConstant\", value)\n        }}\n      />\n\n      {Object.entries(compoundParams).map(([param, value]) => (\n        <ReactionParamInputCard\n          key={param}\n          paramSymbol={<SymbolComponent symbol={param} />}\n          value={value}\n          updateValue={(value: number) => {\n            updateKineticConstant(param, value)\n          }}\n        />\n      ))}\n    </KineticParamsWrapper>\n  )\n}\n\nexport default ReactionKineticParameters\n\nconst KineticParamsWrapper = styled.div`\n  align-self: stretch;\n  background-color: var(--color-grey-lightest);\n  border-radius: 5px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  margin-top: 0.5rem;\n  padding: 0.5rem;\n\n  input {\n    margin-left: 0;\n  }\n`\n","import styled from \"styled-components\"\n\n/* Constants */\nimport {\n  KINETIC_MODELS,\n  generateKineticConstants,\n} from \"../../constants/kineticModels\"\n\n/* Components */\nimport Button from \"../Button\"\nimport EditModal from \"../EditModal\"\nimport Notice from \"../Notice\"\nimport Select from \"../Select\"\nimport SubmitButton from \"../SubmitButton\"\nimport { FiPlus } from \"react-icons/fi\"\nimport ReactionCompoundList from \"./ReactionCompoundList\"\nimport ReactionEquation from \"./ReactionEquation\"\nimport ReactionKineticParameters from \"./ReactionKineticParameters\"\nimport ReactionPreview from \"./ReactionPreview\"\n\n/* Hooks */\nimport { useState } from \"react\"\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { ICompound } from \"../../types/Compound\"\nimport { IReaction, IReactionCompound } from \"../../types/Reaction\"\nimport { CompoundType } from \"../../context/DataContext\"\n\ninterface IReactionEditModalProps {\n  compounds: ICompound[]\n  reaction: IReaction\n  closeModal: () => void\n}\n\nconst ReactionEditModal: React.FC<IReactionEditModalProps> = (props) => {\n  const { compounds, reaction, closeModal } = props\n  const { reactions, findCompound, serializeKineticEquation, updateReaction } =\n    useData()\n  const [closing, setClosing] = useState<boolean>(false)\n  const reactionIndex = reactions.findIndex((rea) => rea.id === reaction.id)\n  /**\n   * Copied state for reaction editing\n   */\n  const [modalReaction, setModalReaction] = useState<IReaction>(\n    JSON.parse(JSON.stringify(reaction))\n  )\n\n  /* For the select input, both for reactants and products */\n  const [selectReactantIndex, setSelectReactantIndex] = useState<\n    number | undefined\n  >(undefined)\n  const [selectProductIndex, setSelectProductIndex] = useState<\n    number | undefined\n  >(undefined)\n\n  /**\n   * Handle compound form updates\n   */\n  const getCompoundKey = (\n    compoundType: CompoundType\n  ): \"products\" | \"reactants\" => {\n    if (compoundType === CompoundType.Reactant) return \"reactants\"\n    return \"products\"\n  }\n\n  const addCompound = (\n    compoundId: string,\n    compoundType: CompoundType\n  ): void => {\n    /* Determine which array to push to */\n    const key = getCompoundKey(compoundType)\n    const updatedReaction = JSON.parse(JSON.stringify(modalReaction))\n\n    updatedReaction[key].push({\n      compoundId,\n      stoichiometricCoefficient: 1,\n    })\n\n    /* Recalculate kinetic constants */\n    const kineticConstants = generateKineticConstants(\n      updatedReaction.kineticModel,\n      updatedReaction,\n      compounds\n    )\n    updatedReaction.kineticConstants = kineticConstants\n    updatedReaction.kineticEquation = serializeKineticEquation(\n      updatedReaction,\n      reactionIndex\n    )\n\n    setModalReaction(updatedReaction)\n  }\n\n  const updateCompound = (\n    compoundIndex: number,\n    compoundType: CompoundType,\n    updatedCompound: IReactionCompound\n  ): void => {\n    /* Determine which array to push to */\n    const key = getCompoundKey(compoundType)\n    const updatedReaction = { ...modalReaction }\n\n    updatedReaction[key][compoundIndex] = updatedCompound\n\n    setModalReaction(updatedReaction)\n  }\n\n  const removeCompound = (\n    compoundIndex: number,\n    compoundType: CompoundType\n  ) => {\n    /* Determine which array to push to */\n    const key = getCompoundKey(compoundType)\n    const updatedReaction = { ...modalReaction }\n    const deletedCompound = updatedReaction[key][compoundIndex]\n\n    /* Update reaction compounds */\n    updatedReaction[key] = [\n      ...updatedReaction[key].slice(0, compoundIndex),\n      ...updatedReaction[key].slice(\n        compoundIndex + 1,\n        updatedReaction[key].length\n      ),\n    ]\n\n    /* Set keyCompound to undefined if deleted compound is keyCompound */\n    if (deletedCompound.compoundId === modalReaction.keyCompound) {\n      updatedReaction.keyCompound = undefined\n    }\n\n    /* Recalculate kinetic constants and equation */\n    const kineticConstants = generateKineticConstants(\n      updatedReaction.kineticModel,\n      updatedReaction,\n      compounds\n    )\n    updatedReaction.kineticConstants = kineticConstants\n    updatedReaction.kineticEquation = serializeKineticEquation(\n      updatedReaction,\n      reactionIndex\n    )\n\n    setModalReaction(updatedReaction)\n  }\n\n  /**\n   * Handle kinetic constant change\n   */\n\n  const handleKineticConstantUpdate = (key: string, value: number) => {\n    const updatedReaction = JSON.parse(JSON.stringify(modalReaction))\n    updatedReaction.kineticConstants[key] = value\n    setModalReaction(updatedReaction)\n  }\n\n  /* For select state */\n  const selectReactantInitialValue = selectReactantIndex\n    ? {\n        value: selectReactantIndex,\n        displayText: compounds[selectReactantIndex].symbol,\n        collapsedDisplayText: compounds[selectReactantIndex].symbol,\n      }\n    : undefined\n\n  const selectProductInitialValue = selectProductIndex\n    ? {\n        value: selectProductIndex,\n        displayText: compounds[selectProductIndex].symbol,\n        collapsedDisplayText: compounds[selectProductIndex].symbol,\n      }\n    : undefined\n\n  return (\n    <EditModal\n      closing={closing}\n      setClosing={setClosing}\n      handleClose={closeModal}\n    >\n      <ReactionPreview reaction={modalReaction} />\n\n      {/* Compounds input */}\n      <InputSection>\n        <CompoundInputWrapper>\n          <h2>Reactants</h2>\n          <AddCompound>\n            <Select\n              defaultDisplayValue=\"Compound...\"\n              initialValue={selectReactantInitialValue}\n              selectOptions={compounds.map((compound, index) => ({\n                value: index,\n                displayText: compound.symbol,\n                collapsedDisplayText: compound.symbol,\n              }))}\n              onSelectionChange={(index: number | undefined) =>\n                setSelectReactantIndex(index)\n              }\n            />\n            <Button\n              color=\"green\"\n              onClick={() => {\n                if (selectReactantIndex !== undefined)\n                  addCompound(\n                    compounds[selectReactantIndex].id,\n                    CompoundType.Reactant\n                  )\n              }}\n            >\n              Add <FiPlus />\n            </Button>\n          </AddCompound>\n          <CompoundInputInner>\n            {modalReaction.reactants.length !== 0 ? (\n              <ReactionCompoundList\n                reactionIndex={reactionIndex}\n                reactionCompounds={modalReaction.reactants}\n                removeCompound={removeCompound}\n                updateCompound={updateCompound}\n                compoundType={CompoundType.Reactant}\n              />\n            ) : (\n              <Notice>No compounds...</Notice>\n            )}\n          </CompoundInputInner>\n        </CompoundInputWrapper>\n\n        <CompoundInputWrapper>\n          <h2>Products</h2>\n          <AddCompound>\n            <Select\n              defaultDisplayValue=\"Compound...\"\n              initialValue={selectProductInitialValue}\n              selectOptions={compounds.map((compound, index) => ({\n                value: index,\n                displayText: compound.symbol,\n                collapsedDisplayText: compound.symbol,\n              }))}\n              onSelectionChange={(index: number | undefined) =>\n                setSelectProductIndex(index)\n              }\n            />\n            <Button\n              color=\"green\"\n              onClick={() => {\n                if (selectProductIndex !== undefined)\n                  addCompound(\n                    compounds[selectProductIndex].id,\n                    CompoundType.Product\n                  )\n              }}\n            >\n              Add <FiPlus />\n            </Button>\n          </AddCompound>\n          <CompoundInputInner>\n            {modalReaction.products.length !== 0 ? (\n              <ReactionCompoundList\n                reactionIndex={reactionIndex}\n                reactionCompounds={modalReaction.products}\n                removeCompound={removeCompound}\n                updateCompound={updateCompound}\n                compoundType={CompoundType.Product}\n              />\n            ) : (\n              <Notice>No compounds...</Notice>\n            )}\n          </CompoundInputInner>\n        </CompoundInputWrapper>\n      </InputSection>\n\n      {/* Kinetics input */}\n      <ColumnInputSection>\n        <h2>Kinetics</h2>\n        <SelectField>\n          <p>Kinetic model</p>\n          <Select\n            initialValue={{\n              value: modalReaction.kineticModel,\n              displayText: KINETIC_MODELS[modalReaction.kineticModel],\n              collapsedDisplayText: KINETIC_MODELS[modalReaction.kineticModel],\n            }}\n            selectOptions={KINETIC_MODELS.map((model, index) => ({\n              value: index,\n              displayText: model,\n              collapsedDisplayText: model,\n            }))}\n            onSelectionChange={(value) => {\n              const updatedReaction = JSON.parse(JSON.stringify(modalReaction))\n\n              updatedReaction.kineticConstants = generateKineticConstants(\n                value as number,\n                modalReaction,\n                compounds\n              )\n              updatedReaction.kineticModel = value\n              updatedReaction.kineticEquation = serializeKineticEquation(\n                updatedReaction,\n                reactionIndex\n              )\n\n              setModalReaction(updatedReaction)\n            }}\n          />\n        </SelectField>\n        <SelectField>\n          <p>Key compound</p>\n          <Select\n            defaultDisplayValue=\"Reactant...\"\n            initialValue={\n              modalReaction.keyCompound !== undefined\n                ? {\n                    value: modalReaction.keyCompound,\n                    displayText: (\n                      findCompound(modalReaction.keyCompound) as ICompound\n                    ).symbol,\n                    collapsedDisplayText: (\n                      findCompound(modalReaction.keyCompound) as ICompound\n                    ).symbol,\n                  }\n                : undefined\n            }\n            selectOptions={modalReaction.reactants.map((reactionCompound) => ({\n              value: reactionCompound.compoundId,\n              displayText: (\n                findCompound(reactionCompound.compoundId) as ICompound\n              ).symbol,\n              collapsedDisplayText: (\n                findCompound(reactionCompound.compoundId) as ICompound\n              ).symbol,\n            }))}\n            onSelectionChange={(value: string | undefined) => {\n              const updatedReaction = JSON.parse(JSON.stringify(modalReaction))\n              updatedReaction.keyCompound = value\n              setModalReaction(updatedReaction)\n            }}\n          />\n        </SelectField>\n        <ReactionEquation reaction={modalReaction} />\n        <ReactionKineticParameters\n          reaction={modalReaction}\n          compounds={compounds}\n          updateKineticConstant={handleKineticConstantUpdate}\n        />\n      </ColumnInputSection>\n\n      <SubmitButton\n        color=\"green\"\n        onClick={() => {\n          updateReaction(reactionIndex, modalReaction)\n          setClosing(true)\n        }}\n      >\n        Done\n      </SubmitButton>\n    </EditModal>\n  )\n}\n\nexport default ReactionEditModal\n\nconst InputSection = styled.div`\n  border-top: 1px solid var(--color-grey-light);\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 2rem;\n  padding: 2rem 1rem 0rem;\n\n  h2 {\n    color: var(--color-grey-dark);\n    font-size: 20px;\n    margin-top: 0;\n  }\n`\n\nconst SelectField = styled.div`\n  display: flex;\n  align-items: center;\n  width: 50%;\n\n  p {\n    color: var(--color-grey-dark);\n    flex-grow: 1;\n    font-size: 1rem;\n    margin-right: 1.4rem;\n  }\n\n  div {\n    flex-basis: 45%;\n  }\n`\n\nconst ColumnInputSection = styled(InputSection)`\n  flex-direction: column;\n  flex-wrap: nowrap;\n`\n\nconst CompoundInputWrapper = styled.div`\n  flex-basis: 50%;\n\n  @media (max-width: 700px) {\n    flex-basis: 100%;\n  }\n`\n\nconst CompoundInputInner = styled.div`\n  background-color: var(--color-grey-lightest);\n  border-radius: 5px;\n  margin: 0.5rem 0.3rem;\n  padding: 0.5rem;\n`\n\nconst AddCompound = styled.div`\n  display: flex;\n  margin: 0.3rem;\n\n  & > button {\n    margin-left: 0.5rem;\n  }\n`\n","/* Components */\nimport ReactionCard from \"./ReactionCard\"\nimport ReactionEditModal from \"./ReactionEditModal\"\n\n/* Hooks */\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { IReaction } from \"../../types/Reaction\"\n\nconst ReactionList: React.FC = () => {\n  const {\n    compounds,\n    reactions,\n    editedReactionId,\n    editReaction,\n    removeReaction,\n  } = useData()\n\n  const editedReactionIndex = editedReactionId\n    ? reactions.findIndex((reaction) => reaction.id === editedReactionId)\n    : undefined\n\n  const editedReaction = editedReactionId\n    ? reactions[editedReactionIndex as number]\n    : undefined\n\n  return (\n    <>\n      {reactions.map((reaction, index) => (\n        <ReactionCard\n          reaction={reaction}\n          reactionIndex={index}\n          editReaction={(): void => {\n            editReaction(index)\n          }}\n          removeReaction={(): void => {\n            removeReaction(index)\n          }}\n          key={index}\n        >\n          Reaction\n        </ReactionCard>\n      ))}\n\n      {/* Edit modal */}\n      {editedReactionId && (\n        <ReactionEditModal\n          compounds={compounds}\n          reaction={editedReaction as IReaction}\n          closeModal={() => editReaction()}\n        />\n      )}\n    </>\n  )\n}\n\nexport default ReactionList\n","/* Components */\nimport Button from \"../components/Button\"\nimport PageTitle from \"../components/PageTitle\"\nimport ReactionList from \"../components/reactions/ReactionList\"\nimport { FiPlus } from \"react-icons/fi\"\n\n/* Hooks */\nimport { useEffect } from \"react\"\nimport { useData } from \"../context/DataContext\"\n\nconst ReactionsPage: React.FC = () => {\n  const { addReaction, editReaction } = useData()\n\n  useEffect(() => {\n    return () => {\n      /* Sets edited reaction to undefined on dismount */\n      editReaction()\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <>\n      <PageTitle>Reactions</PageTitle>\n      <Button color=\"green\" onClick={addReaction}>\n        Add <FiPlus />\n      </Button>\n      <ReactionList />\n    </>\n  )\n}\n\nexport default ReactionsPage\n","import PageTitle from \"../components/PageTitle\"\n\nconst ResultsPage: React.FC = () => {\n  return (\n    <>\n      <PageTitle>Results</PageTitle>\n    </>\n  )\n}\n\nexport default ResultsPage\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n  Route,\n} from \"react-router-dom\"\nimport GlobalStyles from \"./GlobalStyles\"\n\n/* Context */\nimport { DataStore } from \"./context/DataContext\"\n\n/* Layouts */\nimport MainLayout from \"./layouts/MainLayout\"\n\n/* Pages */\nimport CompoundsPage from \"./pages/CompoundsPage\"\nimport ReactionsPage from \"./pages/ReactionsPage\"\nimport ResultsPage from \"./pages/ResultsPage\"\n\nconst App = () => {\n  return (\n    <DataStore>\n      <Router>\n        <GlobalStyles />\n        <MainLayout>\n          <Switch>\n            <Route path=\"/\" exact component={CompoundsPage} />\n            <Route path=\"/compounds\" component={CompoundsPage} />\n            <Route path=\"/reactions\" component={ReactionsPage} />\n            <Route path=\"/results\" component={ResultsPage} />\n            {/* Redirect for deployed URL */}\n            <Route path=\"/batch-simulator\">\n              <Redirect\n                to={{\n                  pathname: \"/\",\n                }}\n              />\n            </Route>\n          </Switch>\n        </MainLayout>\n      </Router>\n    </DataStore>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}