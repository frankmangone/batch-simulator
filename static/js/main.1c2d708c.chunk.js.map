{"version":3,"sources":["helpers/tokenization.tsx","GlobalStyles.tsx","constants/compoundColors.tsx","constants/compoundSymbols.tsx","context/DataContext.tsx","hooks/useLocalStorageState.tsx","components/Button.tsx","helpers/reactions.tsx","hooks/useSimulate.tsx","helpers/tokenParser.tsx","components/Sidebar.tsx","layouts/MainLayout.tsx","components/PageTitle.tsx","components/CardButton.tsx","helpers/validators.tsx","components/compounds/CompoundCard.tsx","components/EditModal.tsx","components/Error.tsx","components/Input.tsx","components/InfoTooltip.tsx","components/FieldInput.tsx","components/SubmitButton.tsx","components/compounds/CompoundEditModal.tsx","components/compounds/CompoundList.tsx","pages/CompoundsPage.tsx","pages/SettingsPage.tsx","components/Notice.tsx","components/reactions/ReactionPreview.tsx","components/reactions/ReactionCard.tsx","constants/kineticModels.tsx","components/Select.tsx","components/ModalInputSection.tsx","components/reactions/ReactionCompoundCard.tsx","components/reactions/ReactionCompoundList.tsx","components/MathExpressions.tsx","components/reactions/ReactionEquation.tsx","components/reactions/ReactionParamInputCard.tsx","components/reactions/ReactionKineticParameters.tsx","components/reactions/ReactionEditModal.tsx","components/reactions/ReactionList.tsx","pages/ReactionsPage.tsx","hooks/useGetData.tsx","pages/ResultsPage.tsx","helpers/array.ts","Routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TokenTypes","GlobalStyles","createGlobalStyle","COMPOUND_COLORS_CODES","COMPOUND_COLORS","orange","yellow","lime","green1","green2","waterGreen1","waterGreen2","skyBlue1","skyBlue2","blue1","blue2","violet1","violet2","pink1","pink2","pink3","red1","red2","COMPOUND_SYMBOLS","CompoundType","assoc","prec","Token","type","value","this","useLocalStorageState","key","defaultValue","undefined","options","serialize","JSON","stringify","deserialize","parse","useState","valueInLocalStorage","window","localStorage","getItem","state","setState","prevKeyRef","useRef","useEffect","prevKey","current","removeItem","setItem","defaultSettingsValue","reactionTime","deadTime","timeStep","timeUnits","volumeUnits","molarUnits","massUnits","compounds","addCompound","editCompound","findCompound","updateCompound","removeCompound","editedCompoundId","reactions","addReaction","editReaction","updateReaction","removeReaction","editedReactionId","serializeKineticEquation","settings","updateSettings","simulationResults","setSimulationResults","DataContext","createContext","useData","useContext","DataStore","props","children","currentColor","setCurrentColor","setCompounds","setReactions","setSettings","setEditedCompoundId","setEditedReactionId","availableSymbol","foundSymbols","Array","length","fill","forEach","compound","index","indexOf","symbol","i","id","find","reaction","equationTokens","kineticModel","push","Parameter","reactants","reactionCompound","compoundId","Operator","Variable","LeftParenthesis","RightParenthesis","products","Provider","updatedCompounds","randomstring","generate","color","concentration","molecularWeight","name","updatedCompound","updatedReactions","filter","keyCompound","slice","kineticConstants","k","kineticEquation","updatedReaction","updatedSettings","Button","styled","button","colorsBase","colorsHover","getCoefficientForComponent","baseStoichiometricCoefficient","getStoichiomericCoefficientForKeyCompound","coefficient","c","stoichiometricCoefficient","useSimulate","simulate","parsedReactions","parseReactionEquations","initialValues","t","results","executeSimulation","parsedReaction","parseParametersAndVariables","tokenizedEquation","outputQueue","operationStack","peek","array","token","associativity","precedence","pop","concat","reverse","parseEquation","mergeCompounds","kineticEquationCopy","replace","parsedCompounds","Object","assign","resultsInitialValues","iterator","endTime","rangeIterator","next","result","done","explicitEulerStep","createSimulationIterator","oldTimePoint","newTimePoint","reactionRates","map","calculateReactionRate","entries","variable","rateOfChange","calculateNetRateOfChange","nonNegative","reactionRate","resultStack","b","a","Sidebar","history","useHistory","expanded","setExpanded","navigateTo","route","iconProps","size","SidebarWrapper","href","onClick","event","preventDefault","SidebarLinkWrapper","IconWrapper","title","icon","SidebarLink","div","MainLayout","MainLayoutWrapper","MainContentWrapper","MainContent","PageTitle","h2","CardButton","validateNotEmpty","validateGreaterThan","threshold","equal","CompoundCard","validateUnicity","symbolInput","setSymbolInput","CompoundCardWrapper","CompoundCardInner","SymbolInput","onBlur","onChange","target","CompoundColorBullet","className","li","input","EditModal","closing","setClosing","handleClose","closeModal","setTimeout","EditModalWrapper","EditModalInner","CloseButton","ErrorWrapper","big","Error","Input","errors","InfoTooltip","text","Icon","InfoWrapper","Info","FieldInputWrapper","row","LabelWrapper","FieldInput","error","fieldName","label","tooltip","htmlFor","autoComplete","SubmitButton","CompoundEditModal","compoundIndex","findIndex","comp","field","formik","useFormik","validate","values","onSubmit","scrollTo","top","behavior","Form","handleSubmit","handleChange","form","CompoundList","editedCompound","CompoundListWrapper","ul","CompoundsPage","SettingsPage","InputSection","InputSectionWrapper","InputSectionInner","Notice","p","ReactionPreview","ReactionPreviewWrapper","CompoundWrapper","CompoundTile","ReactionCard","reactionIndex","ReactionCardWrapper","ReactionInfo","ReactionName","KINETIC_MODELS","generateKineticConstants","model","generateHiperbolicModelConstants","generateAutocatalyticModelConstants","generateSimpleModelConstants","updatedExponents","paramKey","reactantExponent","oldConstant","semiSaturationConstant","productExponent","Select","alignment","defaultDisplayValue","hoverIcon","initialValue","onSelectionChange","selectOptions","selecting","setSelecting","currentValue","setCurrentValue","selectRef","document","getElementById","clickOutsideHandler","useCallback","contains","toggleSelecting","removeEventListener","addEventListener","selectValue","currentValueOption","option","SelectWrapper","SelectValue","collapsedDisplayText","SelectOptions","SelectOption","displayText","hoverBackgroundColor","ModalInputSection","ModalColumnInputSection","ReactionCompoundCard","coefficientInput","setCoefficientInput","ReactionCompoundCardWrapper","parseFloat","ReactionCompoundList","reactionCompounds","compoundType","updatedReactionCompound","Equation","components","parenthesisStack","parenthesis","operation","numerator","denominator","elements","base","power","component","SymbolComponent","separatedTerms","split","term","subindex","Parenthesis","elem","Division","DivisionWrapper","Power","PowerWrapper","Subindex","SubindexWrapper","GreekAlpha","GreekBeta","GreekMu","ReactionEquation","keyCompoundSymbol","EquationWrapper","ReactionParamInputCard","paramSymbol","units","updateValue","valueInput","setValueInput","ParamInputWrapper","ParamInputInner","ReactionKineticParameters","updateKineticConstant","tokenizedMuUnits","globalOrder","reduce","accumulator","tokenizedKUnits","KineticParamsWrapper","param","ReactionEditModal","rea","modalReaction","setModalReaction","scrollRef","selectReactantIndex","setSelectReactantIndex","selectProductIndex","setSelectProductIndex","reactantOptions","useMemo","productOptions","getCompoundKey","Reactant","deletedCompound","selectReactantInitialValue","selectProductInitialValue","CompoundInputWrapper","AddCompound","CompoundInputInner","Product","SelectField","ReactionList","editedReactionIndex","editedReaction","ReactionsPage","useGetData","variableData","data","x","y","maxFunctionalValue","maxValuesForEachVariable","points","Math","max","point","ResultsPage","selectedVariableIndex","setSelectedVariableIndex","selectedCompound","style","styles","container","crossAxis","domain","axis","standalone","dependentAxis","stroke","parent","border","fontFamily","backgroundColor","borderRadius","height","ticks","strokeWidth","tickLabels","fontSize","Routes","path","exact","to","pathname","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1c2d708c.chunk.js","sourcesContent":["/**\n * Equation tokenization\n * https://blog.shalvah.me/posts/how-to-build-a-math-expression-tokenizer-using-javascript-or-any-other-language\n * https://blog.shalvah.me/posts/parsing-math-expressions-with-javascript\n */\n\nexport enum TokenTypes {\n  Parameter = 0,\n  Variable,\n  Operator,\n  LeftParenthesis,\n  RightParenthesis,\n}\n\nexport const tokenizeEquation = (equation: string): Token[] => {\n  const tokensArray: Token[] = []\n\n  // Remove spaces, they don't matter\n  equation.replace(/\\s+/g, \"\")\n\n  // Convert to array of characters\n  const charsArray = equation.split(\"\")\n\n  // Define buffers\n  let parameterBuffer: string[] = []\n  let variableBuffer: string[] = []\n\n  /**\n   * Buffer handling\n   */\n  const emptyParameterBuffer = () => {\n    // Push new parameter to the tokens array\n    const newParam = parameterBuffer.join(\"\")\n    tokensArray.push(new Token(TokenTypes.Parameter, newParam))\n\n    // Empty parameter buffer\n    parameterBuffer = []\n  }\n\n  const emptyVariableBuffer = () => {\n    // Push new variable to the tokens array\n    const newVar = variableBuffer.join(\"\")\n    tokensArray.push(new Token(TokenTypes.Variable, newVar))\n\n    // Empty variable buffer\n    variableBuffer = []\n  }\n\n  /**\n   * Array traversal\n   * This is the core of the tokenization function\n   *  */\n  charsArray.forEach((char, index) => {\n    /**\n     * Parameters are always contained in <>, so if the parameterBuffer\n     * isn't empty, you simply keep pushing to it.\n     *  */\n    if (parameterBuffer.length !== 0) {\n      if (isParameterEnd(char)) {\n        parameterBuffer.push(char)\n        emptyParameterBuffer()\n      } else {\n        parameterBuffer.push(char)\n      }\n    }\n    //\n    /**\n     * Variables are always contained in {}. Treatment is exactly the same\n     * as with parameters.\n     */\n    else if (variableBuffer.length !== 0) {\n      if (isVariableEnd(char)) {\n        variableBuffer.push(char)\n        emptyVariableBuffer()\n      } else {\n        variableBuffer.push(char)\n      }\n    }\n    //\n    /**\n     * Check if variable start or parameter start\n     */\n    else if (isVariableStart(char)) {\n      variableBuffer.push(char)\n    } else if (isParameterStart(char)) {\n      parameterBuffer.push(char)\n    }\n    //\n    /**\n     * Only operators and parenthesis remain, so:\n     */\n    else if (isOperator(char)) {\n      tokensArray.push(new Token(TokenTypes.Operator, char))\n    } else if (isLeftParenthesis(char)) {\n      tokensArray.push(new Token(TokenTypes.LeftParenthesis, char))\n    } else if (isRightParenthesis(char)) {\n      tokensArray.push(new Token(TokenTypes.RightParenthesis, char))\n    }\n  })\n\n  return tokensArray\n}\n\nexport const joinTokens = (tokens: Token[]) => {\n  return tokens.map(({ value }) => value).join(\"\")\n}\n\n/**\n * Token class\n */\nconst assoc = {\n  \"^\": \"right\",\n  \"*\": \"left\",\n  \"/\": \"left\",\n  \"+\": \"left\",\n  \"-\": \"left\",\n}\n\nconst prec = {\n  \"^\": 4,\n  \"*\": 3,\n  \"/\": 3,\n  \"+\": 2,\n  \"-\": 2,\n}\n\nexport class Token {\n  type: number\n  value: string | number\n\n  constructor(type: number, value: string) {\n    this.type = type\n    this.value = value\n  }\n\n  get precedence() {\n    return prec[this.value as keyof typeof prec] || 1\n  }\n\n  get associativity() {\n    return assoc[this.value as keyof typeof assoc] || \"left\"\n  }\n}\n\n/**\n * Recognition functions\n *  */\n\n// const isDigit = (char: string): boolean => {\n//   return /\\d/.test(char)\n// }\n// const isLetter = (char: string): boolean => {\n//   return /[a-z]/i.test(char)\n// }\nconst isOperator = (char: string): boolean => {\n  return /\\+|-|\\*|\\/|\\^/.test(char)\n}\nconst isLeftParenthesis = (char: string): boolean => {\n  return char === \"(\"\n}\nconst isRightParenthesis = (char: string): boolean => {\n  return char === \")\"\n}\nconst isParameterStart = (char: string): boolean => {\n  return char === \"<\"\n}\nconst isParameterEnd = (char: string): boolean => {\n  return char === \">\"\n}\nconst isVariableStart = (char: string): boolean => {\n  return char === \"{\"\n}\nconst isVariableEnd = (char: string): boolean => {\n  return char === \"}\"\n}\n","import { createGlobalStyle } from \"styled-components\"\n\nconst GlobalStyles = createGlobalStyle`\n  :root {\n    --color-primary-darkest: hsl(213,48%,15%);\n    --color-primary-darker: hsl(213,48%,30%);\n    --color-primary-dark: hsl(213,48%,50%);\n    --color-primary-normal: hsl(213,48%,70%);\n    --color-primary-light: hsl(213,48%,85%);\n    --color-primary-lighter: hsl(213,48%,95%);\n\n    --color-triadic-green-darker: hsl(93,40%,30%);\n    --color-triadic-green-dark: hsl(93,40%,45%);\n    --color-triadic-green-normal: hsl(93,40%,70%);\n    --color-triadic-green-light: hsl(93,40%,85%);\n    --color-triadic-green-lighter: hsl(93,40%,95%);\n\n    --color-triadic-red-darker: hsl(333,48%,30%);\n    --color-triadic-red-dark: hsl(333,48%,45%);\n    --color-triadic-red-normal: hsl(333,48%,70%);\n    --color-triadic-red-light: hsl(333,48%,85%);\n    --color-triadic-red-lighter: hsl(333,48%,95%);\n\n    --color-grey-dark: hsl(213, 20%, 30%);\n    --color-grey-normal: hsl(213, 20%, 45%);\n    --color-grey-light: hsl(213, 20%, 70%);\n    --color-grey-lighter: hsl(213, 20%, 85%);\n    --color-grey-lightest: hsl(213, 20%, 95%);\n  }\n  \n  body {\n    margin: 0;\n    background-color: var(--color-grey-lighter);\n    font-family: 'Mulish', sans-serif;\n\n    @media (max-width: 800px) {\n      margin-top: 0;\n    }\n  }\n\n  a, button {\n    cursor: pointer;\n  }\n\n  a, button, input {\n    transition: all 0.15s ease-in-out;\n  }\n\n  input {\n    background-color: rgba(0, 0, 0, 0.1);\n    border: none;\n    border-radius: 5px;\n    flex-grow: 1;\n    font-family: 'Mulish', sans-serif;\n    min-width: 0;\n    width: 0;\n    outline: none;\n    padding: 0.5rem 1rem;\n\n    &:hover,\n    &:focus {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n\n    &:autofill {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n\n    &:focus {\n      box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.4);\n    }\n  }\n\n  /**\n   * Remove arrows from number inputs\n   */\n  \n  /* Chrome, Safari, Edge, Opera */\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  /* Firefox */\n  input[type=number] {\n    -moz-appearance: textfield;\n  }\n\n  @keyframes slide-in {\n    from {\n      opacity: 0;\n      transform: translateY(-20px);\n    }\n\n    to {\n      opacity: 1;\n      transform: translateY(0px);\n    }\n  }\n\n  @keyframes slide-out {\n    from {\n      opacity: 1;\n      transform: translateY(0px);\n    }\n    \n    to {\n      opacity: 0;\n      transform: translateY(-20px);\n    }\n  }\n`\n\nexport default GlobalStyles\n","export const COMPOUND_COLORS_CODES = [\n  \"blue1\",\n  \"pink3\",\n  \"yellow\",\n  \"skyBlue2\",\n  \"red2\",\n  \"green1\",\n  \"skyBlue1\",\n  \"orange\",\n  \"violet1\",\n  \"pink1\",\n  \"lime\",\n  \"waterGreen2\",\n  \"red1\",\n  \"blue2\",\n  \"green2\",\n  \"pink2\",\n  \"waterGreen1\",\n  \"violet2\",\n]\n\nexport const COMPOUND_COLORS = {\n  orange: \"hsl(30, 80%, 65%)\",\n  yellow: \"hsl(50, 80%, 65%)\",\n  lime: \"hsl(70, 80%, 65%)\",\n  green1: \"hsl(90, 80%, 65%)\",\n  green2: \"hsl(110, 80%, 65%)\",\n  waterGreen1: \"hsl(130, 80%, 65%)\",\n  waterGreen2: \"hsl(150, 80%, 65%)\",\n  skyBlue1: \"hsl(170, 80%, 65%)\",\n  skyBlue2: \"hsl(190, 80%, 65%)\",\n  blue1: \"hsl(210, 80%, 65%)\",\n  blue2: \"hsl(230, 80%, 65%)\",\n  violet1: \"hsl(250, 80%, 65%)\",\n  violet2: \"hsl(270, 80%, 65%)\",\n  pink1: \"hsl(290, 80%, 65%)\",\n  pink2: \"hsl(310, 80%, 65%)\",\n  pink3: \"hsl(330, 80%, 65%)\",\n  red1: \"hsl(350, 80%, 65%)\",\n  red2: \"hsl(10, 80%, 65%)\",\n}\n","export const COMPOUND_SYMBOLS = [\n  'A',\n  'B',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z'\n]","import {\n  createContext,\n  useContext,\n  useState,\n  Dispatch,\n  SetStateAction,\n} from \"react\"\nimport randomstring from \"randomstring\"\n\n/* Constants */\nimport { COMPOUND_COLORS_CODES } from \"../constants/compoundColors\"\nimport { COMPOUND_SYMBOLS } from \"../constants/compoundSymbols\"\n\n/* Helpers */\nimport { Token, TokenTypes } from \"../helpers/tokenization\"\n\n/* Hooks */\nimport useLocalStorageState from \"../hooks/useLocalStorageState\"\n\n/* Types */\nimport { Compound } from \"../types/Compound\"\nimport { Settings } from \"../types/Settings\"\nimport { Reaction, ReactionCompound } from \"../types/Reaction\"\nimport { SimulationResults } from \"../types/SimulationResults\"\nimport { FCWithChildren } from \"../types/FCWithChildren\"\n\n/**\n * To mark whether if a compound is a reactant or a product,\n * the following enum is used\n *  */\nexport enum CompoundType {\n  Reactant = 0,\n  Product,\n}\n\ninterface IDefaultValue {\n  /* Compounds */\n  compounds: Compound[]\n  addCompound: () => void\n  editCompound: (index?: number) => void\n  findCompound: (id?: string) => Compound | undefined\n  updateCompound: (index: number, updatedCompound: Compound) => void\n  removeCompound: (index: number) => void\n  editedCompoundId: string | undefined\n\n  /* Reactions */\n  reactions: Reaction[]\n  addReaction: () => void\n  editReaction: (index?: number) => void\n  updateReaction: (index: number, updatedReaction: Reaction) => void\n  removeReaction: (index: number) => void\n  editedReactionId: string | undefined\n  serializeKineticEquation: (reaction: Reaction, index: number) => Token[]\n\n  /* Settings */\n  settings: Settings\n  updateSettings: (updatedSettings: Settings) => void\n\n  /* Simulation results */\n  simulationResults: SimulationResults | undefined\n  setSimulationResults: (simulationResults: SimulationResults) => void\n}\n\nconst defaultSettingsValue: Settings = {\n  reactionTime: 30,\n  deadTime: 30,\n  timeStep: 0.1,\n  //\n  timeUnits: \"s\",\n  volumeUnits: \"L\",\n  molarUnits: \"mol\",\n  massUnits: \"kg\",\n}\n\nconst defaultValue: IDefaultValue = {\n  /* Compounds */\n  compounds: [],\n  addCompound: () => {},\n  editCompound: () => {},\n  findCompound: () => {\n    return undefined\n  },\n  updateCompound: () => {},\n  removeCompound: () => {},\n  editedCompoundId: undefined,\n\n  /* Reactions */\n  reactions: [],\n  addReaction: () => {},\n  editReaction: () => {},\n  updateReaction: () => {},\n  removeReaction: () => {},\n  editedReactionId: undefined,\n  serializeKineticEquation: () => {\n    return []\n  },\n\n  /* Settings */\n  settings: defaultSettingsValue,\n  updateSettings: () => {},\n\n  /* Simulation results */\n  simulationResults: undefined,\n  setSimulationResults: () => {},\n}\n\n// Context Provider component\nexport const DataContext = createContext(defaultValue)\n\n// Hook to use the context values\nexport const useData = () => {\n  return useContext(DataContext)\n}\n\n/**\n * Store component to abstract logic from root component\n */\nexport const DataStore: React.FC<FCWithChildren> = (props) => {\n  const { children } = props\n  const [currentColor, setCurrentColor] = useState<number>(0)\n\n  const [compounds, setCompounds] = useLocalStorageState<Compound[]>(\n    \"compounds\",\n    []\n  ) as [Compound[], Dispatch<SetStateAction<Compound[]>>]\n  const [reactions, setReactions] = useLocalStorageState<Reaction[]>(\n    \"reactions\",\n    []\n  ) as [Reaction[], Dispatch<SetStateAction<Reaction[]>>]\n  const [settings, setSettings] = useLocalStorageState<Settings>(\n    \"settings\",\n    defaultSettingsValue\n  ) as [Settings, Dispatch<SetStateAction<Settings>>]\n\n  const [simulationResults, setSimulationResults] = useState<\n    SimulationResults | undefined\n  >(undefined)\n\n  // To keep track of edited elements:\n  const [editedCompoundId, setEditedCompoundId] = useState<string | undefined>(\n    undefined\n  )\n  const [editedReactionId, setEditedReactionId] = useState<string | undefined>(\n    undefined\n  )\n\n  /**\n   * Helper functions\n   */\n\n  const nextColor = () => {\n    if (currentColor === COMPOUND_COLORS_CODES.length - 1) {\n      setCurrentColor(0)\n      return\n    }\n    setCurrentColor(currentColor + 1)\n  }\n\n  const availableSymbol = (): string => {\n    const foundSymbols = new Array(COMPOUND_SYMBOLS.length).fill(false)\n\n    compounds.forEach((compound) => {\n      const index = COMPOUND_SYMBOLS.indexOf(compound.symbol)\n      if (index !== -1) foundSymbols[index] = true\n    })\n    for (let i = 0; i < foundSymbols.length; i++) {\n      if (!foundSymbols[i]) {\n        return COMPOUND_SYMBOLS[i]\n      }\n    }\n    return \"\"\n  }\n\n  /**\n   * Compounds state handling\n   */\n  const addCompound = (): void => {\n    const updatedCompounds = [...compounds]\n\n    updatedCompounds.push({\n      id: randomstring.generate(8),\n      color: COMPOUND_COLORS_CODES[currentColor],\n      concentration: 0,\n      molecularWeight: 0,\n      symbol: availableSymbol(),\n      name: \"\",\n    })\n    nextColor()\n\n    setCompounds(updatedCompounds)\n  }\n\n  const findCompound = (id?: string): Compound | undefined => {\n    return compounds.find((compound) => compound.id === id)\n  }\n\n  const editCompound = (index?: number): void => {\n    if (typeof index === \"undefined\") {\n      setEditedCompoundId(undefined)\n      return\n    }\n    const id = compounds[index].id\n    setEditedCompoundId(id)\n  }\n\n  const updateCompound = (index: number, updatedCompound: Compound): void => {\n    const updatedCompounds = [...compounds]\n    updatedCompounds[index] = updatedCompound\n\n    setCompounds(updatedCompounds)\n  }\n\n  const removeCompound = (index: number): void => {\n    const compoundId = compounds[index].id\n\n    /**\n     * Remove from reactions that have this compound\n     */\n    const updatedReactions = JSON.parse(JSON.stringify(reactions))\n    updatedReactions.forEach((reaction: Reaction) => {\n      reaction.reactants = reaction.reactants.filter(\n        (reactionCompound: ReactionCompound) =>\n          reactionCompound.compoundId !== compoundId\n      )\n\n      reaction.products = reaction.products.filter(\n        (reactionCompound: ReactionCompound) =>\n          reactionCompound.compoundId !== compoundId\n      )\n\n      if (reaction.keyCompound === compoundId) {\n        reaction.keyCompound = undefined\n      }\n    })\n\n    setReactions(updatedReactions)\n\n    /**\n     * Remove from compounds array\n     */\n    setCompounds([\n      ...compounds.slice(0, index),\n      ...compounds.slice(index + 1, compounds.length),\n    ])\n  }\n\n  /**\n   * Reactions state handling\n   */\n  const addReaction = (): void => {\n    const updatedReactions = [...reactions]\n\n    updatedReactions.push({\n      id: randomstring.generate(8),\n      name: \"\",\n      reactants: [],\n      products: [],\n      kineticModel: 0,\n      kineticConstants: {\n        k: 1,\n      },\n      kineticEquation: [new Token(TokenTypes.Parameter, \"<k>\")],\n    })\n\n    setReactions(updatedReactions)\n  }\n\n  const editReaction = (index?: number): void => {\n    if (typeof index === \"undefined\") {\n      setEditedReactionId(undefined)\n      return\n    }\n    const id = reactions[index].id\n    setEditedReactionId(id)\n  }\n\n  const updateReaction = (index: number, updatedReaction: Reaction): void => {\n    updatedReaction.kineticEquation = serializeKineticEquation(\n      updatedReaction,\n      index\n    )\n    const updatedReactions = JSON.parse(JSON.stringify(reactions))\n    updatedReactions[index] = updatedReaction\n\n    setReactions(updatedReactions)\n  }\n\n  const removeReaction = (index: number): void => {\n    setReactions([\n      ...reactions.slice(0, index),\n      ...reactions.slice(index + 1, reactions.length),\n    ])\n  }\n\n  const serializeKineticEquation = (\n    reaction: Reaction,\n    index: number\n  ): Token[] => {\n    const equationTokens: Token[] = []\n    /**\n     * TODO: this is just a placeholder for a future serialization system, maybe\n     * with direct user input!\n     */\n    /* Returns infix notation */\n    switch (reaction.kineticModel) {\n      case 1:\n        equationTokens.push(new Token(TokenTypes.Parameter, `<\\\\mu>`))\n\n        reaction.reactants.forEach((reactionCompound) => {\n          const { symbol } = findCompound(\n            reactionCompound.compoundId\n          ) as Compound\n          equationTokens.push(new Token(TokenTypes.Operator, \"*\"))\n          equationTokens.push(new Token(TokenTypes.Variable, `{[${symbol}]}`))\n          equationTokens.push(new Token(TokenTypes.Operator, \"/\"))\n          equationTokens.push(new Token(TokenTypes.LeftParenthesis, \"(\"))\n          equationTokens.push(new Token(TokenTypes.Parameter, `<K_${symbol}>`))\n          equationTokens.push(new Token(TokenTypes.Operator, \"+\"))\n          equationTokens.push(new Token(TokenTypes.Variable, `{[${symbol}]}`))\n          equationTokens.push(new Token(TokenTypes.RightParenthesis, \")\"))\n        })\n        return equationTokens\n      //\n      case 2:\n        equationTokens.push(new Token(TokenTypes.Parameter, `<k>`))\n\n        reaction.reactants.forEach((reactionCompound) => {\n          const { symbol } = findCompound(\n            reactionCompound.compoundId\n          ) as Compound\n          equationTokens.push(new Token(TokenTypes.Operator, \"*\"))\n          equationTokens.push(new Token(TokenTypes.Variable, `{[${symbol}]}`))\n          equationTokens.push(new Token(TokenTypes.Operator, \"^\"))\n          equationTokens.push(\n            new Token(TokenTypes.Parameter, `<\\\\alpha_${symbol}>`)\n          )\n        })\n        reaction.products.forEach((reactionCompound) => {\n          const { symbol } = findCompound(\n            reactionCompound.compoundId\n          ) as Compound\n          equationTokens.push(new Token(TokenTypes.Operator, \"*\"))\n          equationTokens.push(new Token(TokenTypes.Variable, `{[${symbol}]}`))\n          equationTokens.push(new Token(TokenTypes.Operator, \"^\"))\n          equationTokens.push(\n            new Token(TokenTypes.Parameter, `<\\\\beta_${symbol}>`)\n          )\n        })\n        return equationTokens\n      //\n      default:\n        equationTokens.push(new Token(TokenTypes.Parameter, `<k>`))\n\n        reaction.reactants.forEach((reactionCompound: ReactionCompound) => {\n          const { symbol } = findCompound(\n            reactionCompound.compoundId\n          ) as Compound\n          equationTokens.push(new Token(TokenTypes.Operator, \"*\"))\n          equationTokens.push(new Token(TokenTypes.Variable, `{[${symbol}]}`))\n          equationTokens.push(new Token(TokenTypes.Operator, \"^\"))\n          equationTokens.push(\n            new Token(TokenTypes.Parameter, `<\\\\alpha_${symbol}>`)\n          )\n        })\n        return equationTokens\n    }\n  }\n\n  /**\n   * Settings state handling\n   */\n  const updateSettings = (updatedSettings: Settings): void => {\n    setSettings(updatedSettings)\n  }\n\n  return (\n    <DataContext.Provider\n      value={{\n        /* Compounds */\n        compounds,\n        addCompound,\n        editCompound,\n        findCompound,\n        updateCompound,\n        removeCompound,\n        editedCompoundId,\n\n        /* Reactions */\n        reactions,\n        addReaction,\n        editReaction,\n        updateReaction,\n        removeReaction,\n        editedReactionId,\n        serializeKineticEquation,\n\n        /* Settings */\n        settings,\n        updateSettings,\n\n        /* Simulation results */\n        simulationResults,\n        setSimulationResults,\n      }}\n    >\n      {children}\n    </DataContext.Provider>\n  )\n}\n","import { useEffect, useRef, useState } from \"react\"\n\ninterface ISerialization<T> {\n  serialize: (value: T) => string\n  deserialize: (value: string) => T\n}\n\nconst useLocalStorageState = <T extends unknown>(\n  key: string,\n  defaultValue: T | undefined = undefined,\n  options: ISerialization<T> = {\n    serialize: JSON.stringify,\n    deserialize: JSON.parse,\n  }\n) => {\n  const { serialize, deserialize } = options\n\n  /**\n   * The callback in useState is only called for state initialization\n   *  */\n  const [state, setState] = useState<T>((): T => {\n    const valueInLocalStorage = window.localStorage.getItem(key)\n    if (valueInLocalStorage) {\n      return deserialize(valueInLocalStorage)\n    }\n    return typeof defaultValue === \"function\" ? defaultValue() : defaultValue\n  })\n\n  /**\n   * Keep a reference to the old key in localStorage,\n   * to delete it if the key changes\n   */\n  const prevKeyRef = useRef(key)\n\n  useEffect(() => {\n    // Check if key has changed, and remove previous key if necessary\n    const prevKey = prevKeyRef.current\n    if (prevKey !== key) {\n      window.localStorage.removeItem(prevKey)\n      prevKeyRef.current = key\n    }\n\n    // Set item in localStorage\n    window.localStorage.setItem(key, serialize(state))\n  }, [key, serialize, state])\n\n  return [state, setState]\n}\n\nexport default useLocalStorageState\n","import styled from \"styled-components\"\n\ninterface IButton {\n  color?: string\n}\n\nconst Button = styled.button<IButton>`\n  align-items: center;\n  border-radius: 5px;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  font-size: 1.1rem;\n  justify-content: space-between;\n  padding: 5px 10px;\n  text-decoration: none;\n\n  ${(props) => colorsBase(props.color)}\n\n  &:hover {\n    ${(props) => colorsHover(props.color)}\n  }\n`\n\nexport default Button\n\nconst colorsBase = (color?: string) => {\n  switch (color) {\n    case \"green\":\n      return `\n        background-color: var(--color-triadic-green-normal);\n        color: var(--color-grey-lightest);\n      `\n    default:\n      return `\n        background-color: var(--color-primary-dark);\n        color: var(--color-grey-lightest);\n      `\n  }\n}\n\nconst colorsHover = (color?: string) => {\n  switch (color) {\n    case \"green\":\n      return `\n        background-color: var(--color-triadic-green-dark);\n      `\n    default:\n      return `\n        background-color: var(--color-primary-darker);\n      `\n  }\n}\n","import { Reaction, ReactionCompound } from '../types/Reaction'\n\nexport const reactionHasCompound = (reaction: Reaction, compoundId: string) => {\n  if (reaction.reactants.findIndex((c) => c.compoundId === compoundId)) return true\n  if (reaction.products.findIndex((c) => c.compoundId === compoundId)) return true\n  return false\n}\n\nexport const getCoefficientForComponent = (reaction: Reaction, compoundId: string) => {\n  const baseStoichiometricCoefficient = getStoichiomericCoefficientForKeyCompound(reaction)\n  let coefficient: number = 0\n\n  reaction.reactants.forEach((c) => {\n    if (c.compoundId === compoundId) {\n      coefficient = - baseStoichiometricCoefficient / c.stoichiometricCoefficient\n    }\n  })\n  if (coefficient !== 0) return coefficient\n\n  reaction.products.forEach((c) => {\n    if (c.compoundId === compoundId) {\n      coefficient = baseStoichiometricCoefficient / c.stoichiometricCoefficient\n    }\n  })\n  return coefficient\n}\n\nconst getStoichiomericCoefficientForKeyCompound = (reaction: Reaction) => {\n  const keyCompound = reaction.reactants.find((c) => c.compoundId === reaction.keyCompound as string) as ReactionCompound\n  return keyCompound.stoichiometricCoefficient\n}\n","import { useData } from \"../context/DataContext\"\n\n/* Helpers */\nimport { parseEquation } from \"../helpers/tokenParser\"\nimport { getCoefficientForComponent } from \"../helpers/reactions\"\n\n/* Types */\nimport { Settings } from \"../types/Settings\"\nimport { Compound } from \"../types/Compound\"\nimport { Reaction, ReactionCompound, KineticEquation } from \"../types/Reaction\"\nimport {\n  ParsedReaction,\n  CompoundWithCoefficient,\n} from \"../types/ParsedReaction\"\nimport { TimePoint, SimulationResults } from \"../types/SimulationResults\"\nimport { Token, TokenTypes } from \"../helpers/tokenization\"\n\nconst useSimulate = () => {\n  // Get data from context\n  const { compounds, reactions, settings, setSimulationResults } = useData()\n\n  //: SimulationResults => {\n  const simulate = () => {\n    /**\n     * Reaction equations (as tokens) are reordered to RPN notation\n     * and some more magic happens. Check the method\n     *  */\n    const parsedReactions: ParsedReaction[] = parseReactionEquations(\n      reactions,\n      compounds\n    )\n\n    // Initialize simulation results\n    const initialValues: TimePoint = { t: 0 }\n    compounds.forEach((c) => (initialValues[`[${c.symbol}]`] = c.concentration))\n\n    // Start simulation execution\n    const results = executeSimulation(initialValues, parsedReactions, settings)\n    setSimulationResults(results)\n  }\n\n  return { simulate }\n}\n\nexport default useSimulate\n\n/**\n * Helper functions\n */\n\nconst parseReactionEquations = (\n  reactions: Reaction[],\n  compounds: Compound[]\n): ParsedReaction[] => {\n  /**\n   * Parsing a reaction entails:\n   *  1) Replacing parameters for their entered values\n   *  2) Modifying the token order to RPN\n   *  3) Merging reactants and products to compounds, which have a symbol\n   *    and a coefficient\n   *\n   *  The reactions are stored in a new object of type ParsedReaction\n   */\n  const parsedReactions: ParsedReaction[] = []\n\n  reactions.forEach((reaction, index) => {\n    const parsedReaction: ParsedReaction = {}\n\n    // 1) Replace parameters for values & strip variables of {} symbols\n    parsedReaction.kineticEquation = parseParametersAndVariables(reaction)\n\n    // 2) Modify token order to RPN\n    parsedReaction.kineticEquation = parseEquation(\n      parsedReaction.kineticEquation\n    )\n\n    // 3) Merge reactants and products\n    parsedReaction.compounds = mergeCompounds(reaction, compounds)\n\n    parsedReactions.push(parsedReaction)\n  })\n\n  return parsedReactions\n}\n\nconst parseParametersAndVariables = (reaction: Reaction): KineticEquation => {\n  const kineticEquationCopy = JSON.parse(\n    JSON.stringify(reaction.kineticEquation)\n  )\n\n  kineticEquationCopy.forEach((token: Token) => {\n    if (token.type === TokenTypes.Parameter) {\n      // Replace parameter by numeric value\n      const key = (token.value as string).replace(/<|>/g, \"\")\n      const value = reaction.kineticConstants[key]\n      token.value = value\n    } else if (token.type === TokenTypes.Variable) {\n      // Strip variable of {} symbols\n      token.value = (token.value as string).replace(/{|}/g, \"\")\n    }\n  })\n\n  return kineticEquationCopy\n}\n\nconst mergeCompounds = (\n  reaction: Reaction,\n  compounds: Compound[]\n): CompoundWithCoefficient[] => {\n  const parsedCompounds: CompoundWithCoefficient[] = []\n\n  reaction.reactants.forEach((reactionCompound: ReactionCompound) => {\n    const compound: CompoundWithCoefficient = Object.assign(\n      {},\n      {\n        compoundId: reactionCompound.compoundId,\n        symbol: `[${\n          compounds.find((c) => c.id === reactionCompound.compoundId)?.symbol\n        }]`,\n        coefficient: getCoefficientForComponent(\n          reaction,\n          reactionCompound.compoundId\n        ),\n      }\n    )\n    parsedCompounds.push(compound)\n  })\n\n  reaction.products.forEach((reactionCompound: ReactionCompound) => {\n    const compound: CompoundWithCoefficient = Object.assign(\n      {},\n      {\n        compoundId: reactionCompound.compoundId,\n        symbol: `[${\n          compounds.find((c) => c.id === reactionCompound.compoundId)?.symbol\n        }]`,\n        coefficient: getCoefficientForComponent(\n          reaction,\n          reactionCompound.compoundId\n        ),\n      }\n    )\n    parsedCompounds.push(compound)\n  })\n\n  return parsedCompounds\n}\n\n/****************************************************************\n *    SIMULATE METHOD                                           *\n *    ---                                                       *\n ****************************************************************/\n\nconst executeSimulation = (\n  resultsInitialValues: TimePoint,\n  parsedReactions: ParsedReaction[],\n  settings: Settings\n) => {\n  const results: SimulationResults = [resultsInitialValues]\n\n  // Define an iterator for time evolution\n  const createSimulationIterator = (endTime = 10, timeStep = 0.1) => {\n    const rangeIterator = {\n      next: function () {\n        let result\n        const currentTime = results[results.length - 1].t\n\n        if (currentTime < endTime) {\n          result = { done: false }\n          explicitEulerStep(parsedReactions, timeStep, results)\n          return result\n        }\n        return { done: true }\n      },\n    }\n\n    return rangeIterator\n  }\n\n  const iterator = createSimulationIterator(\n    settings.reactionTime,\n    settings.timeStep\n  )\n\n  let result = iterator.next()\n  while (!result.done) {\n    result = iterator.next()\n  }\n\n  return results\n}\n\n/**\n * Mutates the results object, pushing the new calculations as TimePoints\n */\nconst explicitEulerStep = (\n  parsedReactions: ParsedReaction[],\n  timeStep: number,\n  results: SimulationResults\n): void => {\n  const oldTimePoint: TimePoint = JSON.parse(\n    JSON.stringify(results[results.length - 1])\n  )\n  const newTimePoint: TimePoint = { t: 0 }\n\n  // Reaction rates can be calculated for each reaction once,\n  // and reused when calculating compound net reaction rates\n  const reactionRates: number[] = parsedReactions.map((parsedReaction) => {\n    return calculateReactionRate(parsedReaction, oldTimePoint)\n  })\n\n  Object.entries(oldTimePoint).forEach(([variable, value]) => {\n    // variable corresponds to \"t\" or a compound symbol in brackets i.e. \"[A]\"\n    //\n    // variable \"t\" has to be treated differently than the others\n    if (variable === \"t\") {\n      newTimePoint.t = value + timeStep\n      return\n    }\n\n    // For other variables, calculate functional value (net rate of change) associated\n    // with the ODE.\n    // It's a summatory of kinetic velocities\n    //\n    // In other words: d[VAR]/dt = rateOfChange\n    const rateOfChange = calculateNetRateOfChange(\n      parsedReactions,\n      reactionRates,\n      variable\n    )\n\n    // In explicit euler, this reaction rate is used with the time step to calculate the next\n    // functional value. This should be generalized (TODO:)\n    //\n    // Also, values should be zero or higher!\n    newTimePoint[variable] = nonNegative(\n      oldTimePoint[variable] + rateOfChange * timeStep\n    )\n  })\n\n  // Finally, push new TimePoint\n  results.push(newTimePoint)\n}\n\nconst calculateNetRateOfChange = (\n  parsedReactions: ParsedReaction[],\n  reactionRates: number[],\n  variable: string\n) => {\n  let reactionRate = 0\n\n  parsedReactions.forEach((reaction: ParsedReaction, index: number) => {\n    const compound = reaction.compounds?.find(\n      (c) => c.symbol === variable\n    ) as CompoundWithCoefficient\n    // If a compound is found, it means the reaction is involved in the\n    // material balance of the species\n    if (compound) {\n      reactionRate += reactionRates[index] * compound.coefficient\n    }\n  })\n\n  return reactionRate\n}\n\nconst calculateReactionRate = (\n  reaction: ParsedReaction,\n  oldTimePoint: TimePoint\n) => {\n  /**\n   * WARNING: By this point, it is assumed that the provided RPN equation is valid.\n   * This has to be ensured with validation prior to execution, or it can lead to failures.\n   */\n\n  let resultStack: number[] = []\n\n  reaction.kineticEquation?.forEach((token: Token) => {\n    // Tokens are already ordered in RPN at this point, so\n    // what we need to do is push values into the stack,\n    // and then perform binary operations\n    if (token.type === TokenTypes.Parameter)\n      resultStack.push(token.value as number)\n    else if (token.type === TokenTypes.Variable)\n      resultStack.push(oldTimePoint[token.value])\n    else {\n      // Can only be a binary operator. Parenthesis have been removed in RPN.\n      // Because it is a binary operator, it will always involve the last two\n      // elements added to the stack, so we first have to pop them\n      const b = resultStack.pop() as number\n      const a = resultStack.pop() as number\n\n      switch (token.value) {\n        case \"+\":\n          resultStack.push(a + b)\n          break\n        case \"-\":\n          resultStack.push(a - b)\n          break\n        case \"*\":\n          resultStack.push(a * b)\n          break\n        case \"/\":\n          resultStack.push(a / b)\n          break\n        case \"^\":\n          resultStack.push(a ** b)\n          break\n      }\n    }\n  })\n\n  // After execution, we should be left with only one element in the stack, which\n  // is the computation result\n  return resultStack[0]\n}\n\nconst nonNegative = (value: number) => {\n  if (value < 0) return 0\n  return value\n}\n","import { Token, TokenTypes } from \"./tokenization\"\n\nexport const parseEquation = (tokenizedEquation: Token[]): Token[] => {\n  /**\n   * Note: this assumes that the tokenized expression is valid!!\n   * Returns an RPN-ordered version of the tokenized expression\n   * (Reverse Polish Notation, or Infix Notation)\n   *\n   * Based on: https://blog.shalvah.me/posts/parsing-math-expressions-with-javascript\n   */\n\n  const outputQueue: Token[] = []\n  const operationStack: Token[] = []\n\n  const peek = <T extends unknown>(array: Array<T>): T => {\n    return array.slice(-1)[0]\n  }\n\n  tokenizedEquation.forEach((token: Token) => {\n    // Push parameters and variables to output queue\n    if (\n      token.type === TokenTypes.Parameter ||\n      token.type === TokenTypes.Variable\n    ) {\n      outputQueue.push(token)\n    }\n\n    // Functions are not contemplated in this app (for now) ---------------\n\n    // If token is an operator, things get a little more complicated:\n    else if (token.type === TokenTypes.Operator) {\n      while (\n        peek(operationStack) &&\n        peek(operationStack).type === TokenTypes.Operator &&\n        ((token.associativity === \"left\" &&\n          token.precedence <= peek(operationStack).precedence) ||\n          (token.associativity === \"right\" &&\n            token.precedence < peek(operationStack).precedence))\n      ) {\n        outputQueue.push(operationStack.pop() as Token)\n      }\n      // At the end of iteration push o1 onto the operator stack\n      operationStack.push(token)\n    }\n\n    //If the token is a left parenthesis (i.e. \"(\"), then push it onto the stack.\n    else if (token.type === TokenTypes.LeftParenthesis) {\n      operationStack.push(token)\n    }\n\n    //If the token is a right parenthesis (i.e. \")\"):\n    else if (token.type === TokenTypes.RightParenthesis) {\n      //Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.\n      while (\n        peek(operationStack) &&\n        peek(operationStack).type !== TokenTypes.LeftParenthesis\n      ) {\n        outputQueue.push(operationStack.pop() as Token)\n      }\n\n      //Pop the left parenthesis from the stack, but not onto the output queue.\n      operationStack.pop()\n    }\n  })\n\n  return outputQueue.concat(operationStack.reverse())\n}\n\nexport const rpnToString = (rpn: Token[]) => {\n  return rpn.map((token) => token.value).join(\" \")\n}\n","import styled from \"styled-components\"\nimport { useHistory } from \"react-router-dom\"\n\n/* Components */\nimport Button from \"./Button\"\nimport { FiMenu, FiSliders, FiPlay } from \"react-icons/fi\"\nimport { BiAtom, BiLineChart } from \"react-icons/bi\"\nimport { AiOutlineExperiment } from \"react-icons/ai\"\n\n/* Hooks */\nimport useSimulate from \"../hooks/useSimulate\"\nimport { useData } from \"../context/DataContext\"\nimport { useState } from \"react\"\n\ninterface ISidebarLinkProps {\n  onClick: () => void\n  title: string\n  icon: JSX.Element\n}\n\nconst Sidebar: React.FC = () => {\n  const { simulate } = useSimulate()\n  const { simulationResults } = useData()\n  const history = useHistory()\n  const [expanded, setExpanded] = useState<boolean>(false)\n\n  const onSimulate = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.preventDefault()\n    simulate()\n    history.push(\"/results\")\n  }\n\n  const expandMenu = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.preventDefault()\n    setExpanded(!expanded)\n  }\n\n  const navigateTo = (route: string) => {\n    history.push(route)\n    setExpanded(false)\n  }\n\n  const iconProps = {\n    size: 25,\n  }\n\n  return (\n    <SidebarWrapper expanded={expanded}>\n      <nav>\n        <a href=\"/\" onClick={expandMenu}>\n          <SidebarLinkWrapper>\n            <IconWrapper>\n              <FiMenu {...iconProps} />\n            </IconWrapper>\n          </SidebarLinkWrapper>\n        </a>\n        <SidebarLink\n          onClick={() => navigateTo(\"/compounds\")}\n          title=\"Compounds\"\n          icon={<BiAtom {...iconProps} />}\n        />\n        <SidebarLink\n          onClick={() => navigateTo(\"/reactions\")}\n          title=\"Reactions\"\n          icon={<AiOutlineExperiment {...iconProps} />}\n        />\n        <SidebarLink\n          onClick={() => navigateTo(\"/settings\")}\n          title=\"Settings\"\n          icon={<FiSliders {...iconProps} />}\n        />\n        {simulationResults && (\n          <SidebarLink\n            onClick={() => navigateTo(\"/results\")}\n            title=\"Results\"\n            icon={<BiLineChart {...iconProps} />}\n          />\n        )}\n        <a href=\"/\" onClick={onSimulate}>\n          <SidebarLinkWrapper>\n            <IconWrapper>\n              <FiPlay {...iconProps} />\n            </IconWrapper>\n            <p>Simulate</p>\n          </SidebarLinkWrapper>\n        </a>\n      </nav>\n    </SidebarWrapper>\n  )\n}\n\nexport default Sidebar\n\nconst SidebarLink: React.FC<ISidebarLinkProps> = (props) => {\n  const { icon, onClick, title } = props\n  return (\n    <Button onClick={onClick}>\n      <SidebarLinkWrapper>\n        <IconWrapper>{icon}</IconWrapper>\n        <p>{title}</p>\n        {/* <FiChevronRight /> */}\n      </SidebarLinkWrapper>\n    </Button>\n  )\n}\n\nconst SidebarLinkWrapper = styled.div`\n  padding: 0.7rem 0.5rem;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n`\n\nconst IconWrapper = styled.div`\n  width: 25px;\n  height: 25px;\n  margin-right: 0.5rem;\n`\n\ninterface SidebarWrapperProps {\n  expanded: boolean\n}\n\nconst SidebarWrapper = styled.div<SidebarWrapperProps>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 20;\n  height: 100vh;\n  max-width: ${(props) => (props.expanded ? \"270px\" : \"90px\")};\n  flex-grow: 0;\n  flex-shrink: 0;\n  transition: all 0.15s linear;\n  background-color: var(--color-grey-normal);\n\n  nav {\n    margin: 1rem;\n    display: flex;\n    flex-direction: column;\n\n    a,\n    button {\n      align-items: center;\n      background-color: var(--color-grey-normal);\n      border: none;\n      border-radius: 5px;\n      color: var(--color-grey-lightest);\n      display: flex;\n      font-size: 1.2rem;\n      justify-content: space-between;\n      margin-bottom: 10px;\n      padding: 5px 10px;\n      text-decoration: none;\n\n      &:hover {\n        background-color: rgba(255, 255, 255, 0.3);\n      }\n\n      p {\n        margin: 0;\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport styled from \"styled-components\"\n\n/* Components */\nimport Sidebar from \"../components/Sidebar\"\ninterface IProps {\n  children: JSX.Element | JSX.Element[]\n}\n\nconst MainLayout: React.FC<IProps> = (props) => {\n  const { children } = props\n\n  return (\n    <MainLayoutWrapper>\n      <Sidebar />\n      <MainContentWrapper id=\"scroll-target\">\n        <MainContent>{children}</MainContent>\n      </MainContentWrapper>\n    </MainLayoutWrapper>\n  )\n}\n\nexport default MainLayout\n\nconst MainLayoutWrapper = styled.div`\n  height: 100vh;\n`\n\nconst MainContentWrapper = styled.div`\n  background: var(--color-grey-light);\n  flex-grow: 1;\n  height: 100vh;\n  margin-left: 90px;\n  position: relative;\n  overflow-y: scroll;\n`\nconst MainContent = styled.div`\n  margin: 20px;\n`\n","import styled from \"styled-components\"\n\nconst PageTitle = styled.h2`\n  color: var(--color-grey-lightest);\n  font-size: 20px;\n  margin-top: 0;\n`\n\nexport default PageTitle\n","import styled from \"styled-components\"\n\nconst CardButton = styled.button`\n  align-items: center;\n  align-self: stretch;\n  background-color: unset;\n  border: none;\n  border-radius: 5px;\n  color: var(--color-grey-dark);\n  cursor: pointer;\n  display: flex;\n  opacity: 0;\n  font-size: 1.5em;\n  margin-left: 0.2rem;\n  padding: 0.5rem;\n  transition: all 0.15s ease-in-out;\n  z-index: 2;\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`\n\nexport default CardButton\n","/**\n * Validates if field is not empty, which equates to\n * not being undefined, null,\n * In the case it is a string, check that it is not empty.\n * In the case of a number, 0 is valid.\n *  */\nexport const validateNotEmpty = (value: unknown) => {\n  if (value === \"\") return false\n  if (typeof value === \"number\") return true\n  if (!value) return false\n  return true\n}\n\n/**\n * Validates if field is greater than, only if the value is numeric.\n * Otherwise, returns false.\n *  */\nexport const validateGreaterThan = (\n  value: unknown,\n  threshold: number,\n  equal: boolean\n) => {\n  if (typeof value !== \"number\") return false\n  if (value > threshold) return true\n  if (value === threshold && equal) return true\n  return false\n}\n","import styled from \"styled-components\"\n\n/* Components */\nimport CardButton from \"../CardButton\"\nimport { FiEdit, FiTrash2 } from \"react-icons/fi\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Hooks */\nimport { useEffect, useState } from \"react\"\n\n/* Helpers */\nimport { validateNotEmpty } from \"../../helpers/validators\"\n\n/* Types */\nimport { Compound } from \"../../types/Compound\"\n\ninterface ICompoundCardProps {\n  compound: Compound\n  editCompound: () => void\n  updateCompound: (compound: Compound) => void\n  validateUnicity: (field: string, value: any) => boolean\n  removeCompound: () => void\n}\n\nconst CompoundCard: React.FC<ICompoundCardProps> = (props) => {\n  const {\n    compound,\n    editCompound,\n    updateCompound,\n    removeCompound,\n    validateUnicity,\n  } = props\n  const [symbolInput, setSymbolInput] = useState<string>(compound.symbol)\n\n  useEffect(() => {\n    setSymbolInput(compound.symbol)\n  }, [compound])\n\n  /**\n   * Form submission handling\n   */\n  const handleSymbolChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSymbolInput(event.target.value)\n  }\n\n  const validateAndUpdateSymbol = () => {\n    if (\n      validateNotEmpty(symbolInput) &&\n      validateUnicity(\"symbol\", symbolInput)\n    ) {\n      /* Update symbol */\n      const updatedCompound = { ...compound }\n      updatedCompound.symbol = symbolInput\n      updateCompound(updatedCompound)\n    } else {\n      /* Reset input initial state */\n      setSymbolInput(compound.symbol)\n    }\n  }\n\n  /**\n   * Toggling\n   */\n\n  return (\n    <CompoundCardWrapper>\n      <CompoundCardInner>\n        <SymbolInput\n          value={symbolInput}\n          onBlur={validateAndUpdateSymbol}\n          onChange={handleSymbolChange}\n        />\n\n        {/* Button to toggle modal edition */}\n        <CardButton onClick={editCompound}>\n          <FiEdit />\n        </CardButton>\n\n        {/* Button to delete the compound */}\n        <CardButton onClick={removeCompound}>\n          <FiTrash2 />\n        </CardButton>\n\n        {/* Bullet to display the color associated with the compound */}\n        <CompoundColorBullet\n          className=\"bullet\"\n          color={compound.color as keyof typeof COMPOUND_COLORS}\n        />\n      </CompoundCardInner>\n    </CompoundCardWrapper>\n  )\n}\n\nexport default CompoundCard\n\n/**\n * Styled components\n */\n\nconst CompoundCardWrapper = styled.li`\n  flex-basis: 25%;\n\n  @media only screen and (max-width: 1200px) {\n    flex-basis: 33.3%;\n  }\n\n  @media only screen and (max-width: 960px) {\n    flex-basis: 50%;\n  }\n\n  @media only screen and (max-width: 520px) {\n    flex-basis: 100%;\n  }\n`\n\nconst CompoundCardInner = styled.div`\n  margin: 5px;\n  padding: 20px;\n  position: relative;\n\n  align-items: center;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: var(--color-grey-lighter);\n  border-radius: 5px;\n  display: flex;\n  color: var(--color-grey-lightest);\n  cursor: pointer;\n  overflow: hidden;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    & {\n      box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n      transform: translateY(-2px);\n    }\n\n    & > button {\n      opacity: 1;\n    }\n\n    & > .bullet {\n      transform: scale(60);\n      border-color: var(--color-grey-lighter);\n    }\n    & > .symbol-input:after {\n      margin-left: 0%;\n      width: auto;\n    }\n  }\n\n  button {\n    padding: 0.8rem;\n  }\n`\n\ninterface ICompoundColorBulletProps {\n  color: keyof typeof COMPOUND_COLORS\n}\n\nconst CompoundColorBullet = styled.div<ICompoundColorBulletProps>`\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  top: 10px;\n  right: 10px;\n  border-radius: 50%;\n  transition: all 0.2s ease-in-out;\n  z-index: 1;\n\n  background-color: ${(props) => COMPOUND_COLORS[props.color]};\n  border: 1px solid var(--color-grey-light);\n`\n\nconst SymbolInput = styled.input`\n  font-size: 2rem;\n  margin-left: 0;\n  margin-right: 0.5rem;\n  z-index: 2;\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport { FiX } from \"react-icons/fi\"\n\n/* Hooks */\nimport { useEffect } from \"react\"\n\n/* Types */\nimport { FCWithChildren } from \"../types/FCWithChildren\"\n\nexport interface IClosing {\n  closing?: boolean\n}\n\ntype IEditModalProps = IClosing &\n  FCWithChildren & {\n    setClosing: (closing: boolean) => void\n    handleClose: () => void\n  }\n\nconst EditModal: React.FC<IEditModalProps> = (props) => {\n  const { children, closing, setClosing, handleClose } = props\n\n  const closeModal = () => {\n    /**\n     * Animate and close modal after slide animation\n     */\n    setClosing(true)\n    setTimeout(() => {\n      handleClose()\n    }, 250)\n  }\n\n  useEffect(() => {\n    if (closing) {\n      closeModal()\n    }\n    // eslint-disable-next-line\n  }, [closing])\n\n  return (\n    <EditModalWrapper closing={closing}>\n      <EditModalInner closing={closing}>\n        <CloseButton onClick={closeModal} closing={closing}>\n          <FiX />\n        </CloseButton>\n        {children}\n      </EditModalInner>\n    </EditModalWrapper>\n  )\n}\n\nexport default EditModal\n\nconst EditModalWrapper = styled.div<IClosing>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  min-height: 100%;\n  background-color: var(--color-grey-light);\n\n  animation-name: dim-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  border-radius: 5px;\n  display: flex;\n\n  /* Override animation upon modal close */\n  ${(props) =>\n    props.closing\n      ? `\n    animation-name: dim-out;\n    animation-timing-function: ease-in-out;\n    animation-duration: 0.25s;\n    animation-iteration-count: 1;\n    animation-fill-mode: forwards;\n  `\n      : \"\"}\n\n  @keyframes dim-in {\n    from {\n      background-color: rgba(0, 0, 0, 0);\n    }\n\n    to {\n      background-color: rgba(0, 0, 0, 0.2);\n    }\n  }\n\n  @keyframes dim-out {\n    from {\n      background-color: rgba(0, 0, 0, 0.2);\n    }\n\n    to {\n      background-color: rgba(0, 0, 0, 0);\n    }\n  }\n`\n\nconst EditModalInner = styled.div<IClosing>`\n  align-self: stretch;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: var(--color-grey-lighter);\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  border-radius: 5px;\n  flex-grow: 1;\n  margin: 10px;\n  padding: 2rem;\n  padding-top: 3.5rem;\n  position: relative;\n  z-index: 3;\n\n  /* Override animation upon modal close */\n  ${(props) =>\n    props.closing\n      ? `\n    animation-name: slide-out;\n    animation-timing-function: ease-in-out;\n    animation-duration: 0.25s;\n    animation-iteration-count: 1;\n    animation-fill-mode: forwards;\n  `\n      : \"\"}\n\n  label {\n    color: var(--color-grey-dark);\n  }\n\n  input {\n    background-color: rgba(0, 0, 0, 0.1);\n    border-radius: 5px;\n    flex-grow: 1;\n    min-width: 0;\n    padding: 0.5rem 1rem;\n\n    &:hover,\n    &:focus {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n\n    &:autofill {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n\n    &:focus {\n      box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.4);\n    }\n  }\n`\n\nconst CloseButton = styled.button<IClosing>`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n\n  align-items: center;\n  background-color: unset;\n  border: none;\n  border-radius: 5px;\n  display: flex;\n  ${(props) => (props.closing ? \"disabled: true;\" : \"\")}\n  font-size: 1.3rem;\n  padding: 0.5rem;\n  margin-bottom: 1rem;\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`\n","import styled from \"styled-components\"\n\n/* Types */\nimport { FCWithChildren } from \"../types/FCWithChildren\"\n\ninterface IError {\n  big?: boolean\n}\n\ntype IErrorProps = FCWithChildren & IError\n\nconst Error: React.FC<IErrorProps> = (props) => {\n  const { big, children } = props\n  return (\n    <ErrorWrapper big={big} className=\"error\">\n      {children}\n    </ErrorWrapper>\n  )\n}\n\nconst ErrorWrapper = styled.div<IError>`\n  position: absolute;\n  ${(props) =>\n    props.big\n      ? `\n    bottom: 0.9rem;\n    right: 1rem;\n  `\n      : `\n    bottom: 0.4rem;\n    right: 0.5rem;\n  `}\n\n  background-color: var(--color-triadic-red-darker);\n  border-radius: 5px;\n  box-shadow: 0px 0px 4px var(--color-triadic-red-darker);\n  color: white;\n  padding: 0.2rem 0.5rem;\n  pointer-events: none;\n  opacity: 0;\n  transform: translateY(105%);\n  z-index: 4;\n`\n\nexport default Error\n","import styled from \"styled-components\"\n\ninterface IInputProps extends React.HTMLProps<HTMLInputElement> {\n  errors?: boolean\n}\n\nconst Input = styled.input<IInputProps>`\n  ${(props) =>\n    props.errors\n      ? `\n    box-shadow: 0px 0px 4px 1px var(--color-triadic-red-darker),\n      inset 0px 0px 0px 1px var(--color-triadic-red-darker) !important;\n  `\n      : \"\"}\n`\n\nexport default Input\n","import styled from \"styled-components\"\nimport { FiInfo } from \"react-icons/fi\"\ninterface InfoTooltipProps {\n  text: string | JSX.Element\n}\n\nconst InfoTooltip = (props: InfoTooltipProps) => {\n  const { text } = props\n\n  return (\n    <Icon>\n      <FiInfo color=\"hsl(213, 20%, 95%)\" size={20} />\n      <InfoWrapper>\n        <Info>{text}</Info>\n      </InfoWrapper>\n    </Icon>\n  )\n}\n\nexport default InfoTooltip\n\nconst Icon = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 26px;\n  height: 26px;\n  border-radius: 50%;\n  background-color: var(--color-grey-normal);\n  margin-left: 1rem;\n  color: var(--color-white);\n  cursor: pointer;\n  position: relative;\n  &:hover > div > div {\n    opacity: 1;\n  }\n`\n\nconst Info = styled.div`\n  position: relative;\n  opacity: 0;\n  transition: opacity 0.15s linear;\n  padding: 0.5rem;\n  background-color: var(--color-grey-normal);\n  border-radius: 5px;\n  margin-left: 1rem;\n  width: max-content;\n  max-width: 180px;\n  font-size: 1rem;\n  color: var(--color-grey-lightest);\n  overflow: visible;\n  filter: drop-shadow(0 1px 2px var(--color-grey-normal));\n  display: flex;\n\n  &:before {\n    position: absolute;\n    left: -8px;\n    top: 50%;\n    transform: translateY(-50%);\n    content: \"\";\n    width: 0;\n    height: 0;\n    border-top: 8px solid transparent;\n    border-bottom: 8px solid transparent;\n    border-right: 8px solid var(--color-grey-normal);\n  }\n`\n\nconst InfoWrapper = styled.div`\n  position: absolute;\n  display: flex;\n  right: 0;\n  transform: translateX(102%);\n  pointer-events: none;\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport Error from \"./Error\"\nimport Input from \"./Input\"\nimport InfoTooltip from \"./InfoTooltip\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../constants/compoundColors\"\ninterface IFieldInputProps {\n  big?: boolean\n  color?: string\n  error?: string\n  fieldName: string\n  label: string\n  type?: string\n  tooltip?: string\n  row?: boolean\n  value: any\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst FieldInput: React.FC<IFieldInputProps> = (props) => {\n  const {\n    big,\n    color,\n    error,\n    fieldName,\n    label,\n    row,\n    type,\n    tooltip,\n    value,\n    onBlur,\n    onChange,\n  } = props\n\n  const voidFunction = () => {}\n\n  return (\n    <FieldInputWrapper color={color} big={big} row={row}>\n      <LabelWrapper>\n        <label htmlFor={fieldName}>{label}</label>\n        {tooltip && <InfoTooltip text={tooltip} />}\n      </LabelWrapper>\n      <Input\n        errors={!!error}\n        name={fieldName}\n        type={type || \"text\"}\n        autoComplete=\"off\"\n        onBlur={onBlur || voidFunction}\n        onChange={onChange}\n        value={value}\n      />\n      {error && <Error big={big}>{error}</Error>}\n    </FieldInputWrapper>\n  )\n}\n\ninterface IFieldInputWrapperProps {\n  color?: string\n  big?: boolean\n  row?: boolean\n}\n\nconst FieldInputWrapper = styled.div<IFieldInputWrapperProps>`\n  display: flex;\n  flex-direction: ${(props) => (props.row ? \"row\" : \"column\")};\n  align-items: flex-start;\n  align-self: ${(props) => (props.row ? \"unset\" : \"flex-start\")};\n  padding: 0.5rem;\n  position: relative;\n\n  ${(props) =>\n    props.color\n      ? `\n    background-color: ${\n      COMPOUND_COLORS[props.color as keyof typeof COMPOUND_COLORS]\n    };\n    border-radius: 5px;\n    box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  `\n      : \"\"}\n  ${(props) =>\n    props.big\n      ? `\n    align-items: flex-start;\n    margin-bottom: 1.5rem;\n    padding: 1rem;\n  `\n      : \"\"}\n\n  label {\n    ${(props) => (props.big ? \"font-size: 1.5rem;\" : \"\")}\n    font-weight: 600;\n    color: var(--color-grey-dark);\n  }\n\n  input {\n    ${(props) =>\n      props.big\n        ? `    \n    font-size: 3rem;\n    margin-left: 1rem;\n    width: 0;\n    `\n        : \"font-size: 1rem;\"}\n    width: 300px;\n    align-self: stretch;\n  }\n\n  &:hover > .error {\n    opacity: 1 !important;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 0.5rem;\n`\n\nexport default FieldInput\n","import styled from \"styled-components\"\nimport Button from \"./Button\"\n\nconst SubmitButton = styled(Button)`\n  align-self: stretch;\n  font-size: 1.2rem;\n  justify-content: center;\n  margin-top: 1.5rem;\n  margin-left: 2.5%;\n  padding: 0.5rem;\n  width: 95%;\n`\nexport default SubmitButton\n","import styled from \"styled-components\"\nimport { useFormik } from \"formik\"\n\n/* Components */\nimport EditModal from \"../EditModal\"\nimport FieldInput from \"../FieldInput\"\nimport SubmitButton from \"../SubmitButton\"\n\n/* Helpers */\nimport { validateNotEmpty, validateGreaterThan } from \"../../helpers/validators\"\n\n/* Hooks */\nimport { useState } from \"react\"\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { Compound } from \"../../types/Compound\"\n\ninterface ICompoundEditModalProps {\n  compound: Compound\n  closeModal: () => void\n}\n\nconst CompoundEditModal: React.FC<ICompoundEditModalProps> = (props) => {\n  const { compound, closeModal } = props\n  const { compounds, updateCompound, settings } = useData()\n  const [closing, setClosing] = useState<boolean>(false)\n  const compoundIndex = compounds.findIndex((comp) => comp.id === compound.id)\n\n  /**\n   * Validate method for Formik\n   */\n  interface IErrors {\n    symbol?: string\n    concentration?: string\n    name?: string\n    molecularWeight?: string\n  }\n\n  const validate = (values: Compound): IErrors => {\n    const errors: IErrors = {}\n\n    /* Symbol validation */\n    if (!validateNotEmpty(values.symbol))\n      errors.symbol = \"Symbol cannot be empty\"\n    else if (!validateUnicity(\"symbol\", values.symbol))\n      errors.symbol = \"Symbol is already used\"\n\n    /* Concentration validation */\n    if (!validateNotEmpty(values.concentration))\n      errors.concentration = \"Concentration cannot be empty\"\n    else if (!validateGreaterThan(values.concentration, 0, true))\n      errors.concentration = \"Concentration cannot be lower than 0\"\n\n    /* Molecular weight validation */\n    if (!validateNotEmpty(values.molecularWeight))\n      errors.molecularWeight = \"Molecular weight cannot be empty\"\n    else if (!validateGreaterThan(values.molecularWeight, 0, true))\n      errors.molecularWeight = \"Molecular weight cannot be lower than 0\"\n\n    return errors\n  }\n\n  const validateUnicity = (field: string, value: any): boolean => {\n    for (var i = 0; i < compounds.length; i++) {\n      // @ts-ignore\n      if (i !== compoundIndex && compounds[i][field] === value) {\n        return false\n      }\n    }\n    return true\n  }\n\n  /**\n   * Formik form initialization\n   */\n  const formik = useFormik({\n    // @ts-ignore\n    initialValues: {\n      symbol: compound.symbol,\n      concentration: compound.concentration,\n      name: compound.name,\n      molecularWeight: compound.molecularWeight,\n    },\n    validate,\n    onSubmit: (values) => {\n      const updatedCompound = { ...compound, ...values }\n      updateCompound(compoundIndex, updatedCompound)\n      window.scrollTo({ top: 0, behavior: \"smooth\" })\n      setClosing(true)\n    },\n  })\n\n  return (\n    <EditModal\n      closing={closing}\n      setClosing={setClosing}\n      handleClose={closeModal}\n    >\n      <Form onSubmit={formik.handleSubmit}>\n        <FieldInput\n          fieldName=\"symbol\"\n          label=\"Symbol:\"\n          error={formik.errors.symbol}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            formik.handleChange(event)\n          }}\n          value={formik.values.symbol}\n          color={compound.color}\n          row\n          big\n        />\n\n        <FieldInput\n          fieldName=\"concentration\"\n          label={`Initial concentration [${settings.molarUnits}/${settings.volumeUnits}]:`}\n          error={formik.errors.concentration}\n          tooltip=\"Concentration in the loaded mixture\"\n          type=\"number\"\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            formik.handleChange(event)\n          }}\n          value={formik.values.concentration}\n        />\n\n        <FieldInput\n          fieldName=\"molecularWeight\"\n          label={`Molecular weight [${settings.massUnits}/${settings.molarUnits}]:`}\n          error={formik.errors.molecularWeight}\n          type=\"number\"\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            formik.handleChange(event)\n          }}\n          value={formik.values.molecularWeight}\n        />\n\n        <FieldInput\n          fieldName=\"name\"\n          label=\"Compound name (optional):\"\n          error={formik.errors.name}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            formik.handleChange(event)\n          }}\n          value={formik.values.name}\n        />\n\n        <SubmitButton color=\"green\" type=\"submit\">\n          Done\n        </SubmitButton>\n      </Form>\n    </EditModal>\n  )\n}\n\nexport default CompoundEditModal\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport CompoundCard from \"./CompoundCard\"\nimport CompoundEditModal from \"./CompoundEditModal\"\n\n/* Hooks */\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { Compound } from \"../../types/Compound\"\n\ninterface ICompoundListProps {\n  compounds: Compound[]\n}\n\nconst CompoundList: React.FC<ICompoundListProps> = (props) => {\n  const { compounds } = props\n  const { editedCompoundId, editCompound, findCompound, updateCompound, removeCompound } =\n    useData()\n\n  const editedCompound = editedCompoundId\n    ? findCompound(editedCompoundId)\n    : undefined\n\n  return (\n    <CompoundListWrapper>\n      {compounds.map((compound, index) => (\n        <CompoundCard\n          key={index}\n          compound={compound}\n          editCompound={(): void => {\n            editCompound(index)\n          }}\n          updateCompound={(compound: Compound): void => {\n            updateCompound(index, compound)\n          }}\n          removeCompound={(): void => {\n            removeCompound(index)\n          }}\n          validateUnicity={(field: string, value: any): boolean => {\n            for (var i = 0; i < compounds.length; i++) {\n              // @ts-ignore\n              if (i !== index && compounds[i][field] === value) {\n                return false\n              }\n            }\n            return true\n          }}\n        />\n      ))}\n\n      {/* Edit modal */}\n      {editedCompoundId && (\n        <CompoundEditModal\n          compound={editedCompound as Compound}\n          closeModal={() => editCompound()}\n        />\n      )}\n    </CompoundListWrapper>\n  )\n}\n\nexport default CompoundList\n\n/**\n * Styled components\n */\n\nconst CompoundListWrapper = styled.ul`\n  align-self: stretch;\n  display: flex;\n  flex-wrap: wrap;\n  list-style-type: none;\n  padding-left: 0;\n`\n","/* Components */\nimport Button from \"../components/Button\"\nimport PageTitle from \"../components/PageTitle\"\nimport CompoundList from \"../components/compounds/CompoundList\"\nimport { FiPlus } from \"react-icons/fi\"\n\n/* Hooks */\nimport { useEffect } from \"react\"\nimport { useData } from \"../context/DataContext\"\n\nconst CompoundsPage: React.FC = () => {\n  const { compounds, addCompound, editCompound } = useData()\n\n  useEffect(() => {\n    return () => {\n      /* Sets edited compound to undefined on dismount */\n      editCompound()\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <>\n      <PageTitle>Compounds</PageTitle>\n      <Button color=\"green\" onClick={addCompound}>\n        Add <FiPlus />\n      </Button>\n      <CompoundList compounds={compounds} />\n    </>\n  )\n}\n\nexport default CompoundsPage\n","import styled from \"styled-components\"\n\n/* Components */\nimport FieldInput from \"../components/FieldInput\"\nimport PageTitle from \"../components/PageTitle\"\n\n/* Helpers */\nimport { validateNotEmpty, validateGreaterThan } from \"../helpers/validators\"\n\n/* Hooks */\nimport { useData } from \"../context/DataContext\"\nimport { useFormik } from \"formik\"\n\n/* Types */\nimport { Settings, SettingsErrors } from \"../types/Settings\"\n\nconst SettingsPage: React.FC = () => {\n  const { settings, updateSettings } = useData()\n\n  /**\n   * Form validation function\n   */\n  const validate = (values: Settings): SettingsErrors => {\n    const errors: SettingsErrors = {}\n\n    /* Reaction time validation */\n    if (!validateNotEmpty(values.reactionTime))\n      errors.reactionTime = \"Reaction time cannot be empty\"\n    else if (!validateGreaterThan(values.reactionTime, 0, true))\n      errors.reactionTime = \"Reaction time cannot be lower than 0\"\n\n    /* Dead time validation */\n    if (!validateNotEmpty(values.deadTime))\n      errors.deadTime = \"Dead time cannot be empty\"\n    else if (!validateGreaterThan(values.deadTime, 0, true))\n      errors.deadTime = \"Dead time cannot be lower than 0\"\n\n    /* Time step validation */\n    if (!validateNotEmpty(values.timeStep))\n      errors.timeStep = \"Time step cannot be empty\"\n    else if (!validateGreaterThan(values.timeStep, 0, false))\n      errors.timeStep = \"Time step has to be greater than 0\"\n    // TODO: Time step has to be lower than reaction time\n\n    return errors\n  }\n\n  const formik = useFormik({\n    initialValues: { ...settings },\n    validate,\n    onSubmit: (values) => {\n      updateSettings(values)\n    },\n  })\n\n  const submit = () => {\n    formik.handleSubmit()\n  }\n\n  const onBlur = submit\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n    formik.handleChange(event)\n\n  return (\n    <>\n      <PageTitle>Operation</PageTitle>\n\n      <Form>\n        <InputSection>\n          <h2>Operating times</h2>\n          <FieldInput\n            fieldName=\"reactionTime\"\n            label=\"Reaction time:\"\n            type=\"number\"\n            value={formik.values.reactionTime}\n            error={formik.errors.reactionTime}\n            {...{ onBlur, onChange }}\n          />\n          <FieldInput\n            fieldName=\"deadTime\"\n            label=\"Dead time:\"\n            type=\"number\"\n            tooltip=\"Time needed for discharge, cleaning, etc.\"\n            value={formik.values.deadTime}\n            error={formik.errors.deadTime}\n            {...{ onBlur, onChange }}\n          />\n          <FieldInput\n            fieldName=\"timeStep\"\n            label=\"Time step:\"\n            type=\"number\"\n            tooltip=\"Small time interval for numerical calculation purposes\"\n            value={formik.values.timeStep}\n            error={formik.errors.timeStep}\n            {...{ onBlur, onChange }}\n          />\n        </InputSection>\n\n        <InputSection>\n          <h2>Units</h2>\n          <FieldInput\n            fieldName=\"timeUnits\"\n            label=\"Time units:\"\n            type=\"text\"\n            value={formik.values.timeUnits}\n            error={formik.errors.timeUnits}\n            {...{ onBlur, onChange }}\n          />\n          <FieldInput\n            fieldName=\"volumeUnits\"\n            label=\"Volume units:\"\n            type=\"text\"\n            value={formik.values.volumeUnits}\n            error={formik.errors.volumeUnits}\n            {...{ onBlur, onChange }}\n          />\n          <FieldInput\n            fieldName=\"molarUnits\"\n            label=\"Molar units:\"\n            type=\"text\"\n            value={formik.values.molarUnits}\n            error={formik.errors.molarUnits}\n            {...{ onBlur, onChange }}\n          />\n          <FieldInput\n            fieldName=\"massUnits\"\n            label=\"Mass units:\"\n            type=\"text\"\n            value={formik.values.massUnits}\n            error={formik.errors.massUnits}\n            {...{ onBlur, onChange }}\n          />\n        </InputSection>\n      </Form>\n    </>\n  )\n}\n\nexport default SettingsPage\n\nconst Form = styled.form`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 1rem;\n`\n\nconst InputSection = ({\n  children,\n}: {\n  children: JSX.Element | JSX.Element[]\n}) => {\n  return (\n    <InputSectionWrapper>\n      <InputSectionInner>{children}</InputSectionInner>\n    </InputSectionWrapper>\n  )\n}\n\nconst InputSectionWrapper = styled.div`\n  display: flex;\n  flex-basis: 50%;\n\n  @media only screen and (max-width: 940px) {\n    flex-basis: 100%;\n  }\n`\n\nconst InputSectionInner = styled.div`\n  flex-grow: 1;\n  background-color: var(--color-grey-lighter);\n  border-radius: 5px;\n  flex-direction: column;\n  padding: 1rem;\n  margin: 1rem;\n  margin-bottom: 0;\n\n  h2 {\n    color: var(--color-grey-normal);\n    font-size: 1.2rem;\n    margin-top: 0;\n  }\n\n  input {\n    width: auto;\n  }\n`\n","import styled from \"styled-components\"\n\nconst Notice = styled.p`\n  color: var(--color-grey-normal);\n  font-style: italic;\n  margin: 0.5rem;\n`\n\nexport default Notice\n","import styled from \"styled-components\"\n\n/* Components */\nimport { Fragment } from \"react\"\nimport Notice from \"../Notice\"\nimport { FiArrowRight, FiPlus } from \"react-icons/fi\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Hooks */\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { Compound } from \"../../types/Compound\"\nimport { Reaction } from \"../../types/Reaction\"\n\ninterface IReactionPreviewProps {\n  reaction: Reaction\n}\n\nconst ReactionPreview: React.FC<IReactionPreviewProps> = (props) => {\n  const { reaction } = props\n  const { findCompound } = useData()\n\n  return (\n    <ReactionPreviewWrapper>\n      {reaction.reactants.length === 0 && reaction.products.length === 0 && (\n        <Notice>No reaction data</Notice>\n      )}\n\n      {reaction.reactants.map((reactionCompound, index) => {\n        const compound = findCompound(reactionCompound.compoundId) as Compound\n\n        return (\n          <Fragment key={reactionCompound.compoundId}>\n            {index !== 0 && <FiPlus size={25} />}\n            <CompoundWrapper>\n              <p>{reactionCompound.stoichiometricCoefficient}</p>\n              <CompoundTile\n                color={compound.color as keyof typeof COMPOUND_COLORS}\n              >\n                {compound.symbol}\n              </CompoundTile>\n            </CompoundWrapper>\n          </Fragment>\n        )\n      })}\n\n      {reaction.reactants.length > 0 && reaction.products.length > 0 && (\n        <FiArrowRight size={25} />\n      )}\n\n      {reaction.products.map((reactionCompound, index) => {\n        const compound = findCompound(reactionCompound.compoundId) as Compound\n\n        return (\n          <Fragment key={reactionCompound.compoundId}>\n            {index !== 0 && <FiPlus size={25} />}\n            <CompoundWrapper>\n              <p>{reactionCompound.stoichiometricCoefficient}</p>\n              <CompoundTile\n                color={compound.color as keyof typeof COMPOUND_COLORS}\n              >\n                {compound.symbol}\n              </CompoundTile>\n            </CompoundWrapper>\n          </Fragment>\n        )\n      })}\n    </ReactionPreviewWrapper>\n  )\n}\n\nexport default ReactionPreview\n\nconst ReactionPreviewWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-grow: 1;\n  min-height: 3rem;\n`\n\nconst CompoundWrapper = styled.div`\n  align-items: flex-end;\n  display: flex;\n  margin: 0 0.5rem;\n\n  p {\n    color: var(--color-grey-dark);\n    font-size: 1.6rem;\n    margin: 0 0 0.2rem 0;\n  }\n`\n\ninterface ICompoundColorBulletProps {\n  color: keyof typeof COMPOUND_COLORS\n}\n\nconst CompoundTile = styled.div<ICompoundColorBulletProps>`\n  background-color: ${(props) => COMPOUND_COLORS[props.color]};\n  border-radius: 5px;\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  color: var(--color-grey-dark);\n  font-size: 1.6rem;\n  margin: 0 0.5rem;\n  padding: 0.5rem 0.9rem;\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport CardButton from \"../CardButton\"\nimport ReactionPreview from \"./ReactionPreview\"\nimport { FiEdit, FiTrash2 } from \"react-icons/fi\"\n\n/* Types */\nimport { Reaction } from \"../../types/Reaction\"\n\ninterface IReactionCardProps {\n  reaction: Reaction\n  reactionIndex: number\n  editReaction: () => void\n  removeReaction: () => void\n}\n\nconst ReactionCard: React.FC<IReactionCardProps> = (props) => {\n  const { reaction, reactionIndex, editReaction, removeReaction } = props\n\n  return (\n    <ReactionCardWrapper>\n      <ReactionInfo>\n        <ReactionName>\n          {`#${reactionIndex + 1}`} {reaction.name ? ` - ${reaction.name}` : \"\"}\n        </ReactionName>\n        <ReactionPreview reaction={reaction} />\n      </ReactionInfo>\n      <CardButton onClick={editReaction}>\n        <FiEdit />\n      </CardButton>\n      <CardButton onClick={removeReaction}>\n        <FiTrash2 />\n      </CardButton>\n    </ReactionCardWrapper>\n  )\n}\n\nexport default ReactionCard\n\nconst ReactionCardWrapper = styled.div`\n  margin: 10px;\n  padding: 20px;\n  position: relative;\n\n  align-items: center;\n  align-self: stretch;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: var(--color-grey-lighter);\n  border-radius: 5px;\n  display: flex;\n  color: var(--color-grey-dark);\n  cursor: pointer;\n  overflow: hidden;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    background-color: var(--color-grey-lightest);\n\n    & {\n      box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n      transform: translateY(-2px);\n    }\n\n    & > button {\n      opacity: 1;\n    }\n\n    & > .bullet {\n      transform: scale(20);\n      border-color: var(--color-grey-lighter);\n    }\n    & > .symbol-input:after {\n      margin-left: 0%;\n      width: auto;\n    }\n  }\n\n  p:not(:first-child) {\n    flex-grow: 1;\n    margin: 0;\n  }\n`\n\nconst ReactionName = styled.p`\n  color: var(--color-grey-normal);\n  flex-grow: 0;\n  font-size: 1.2rem;\n  font-weight: 600;\n  margin: 0;\n  padding-left: 0.6rem;\n  padding-bottom: 0.5rem;\n`\n\nconst ReactionInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n`\n","/* Types */\nimport {\n  KineticConstants,\n  Reaction,\n  ReactionCompound,\n} from \"../types/Reaction\"\nimport { Compound } from \"../types/Compound\"\n\n/**\n * This is a placeholder for more complex kinetic models,\n * where constants can be added and used in expressions\n *\n * Kinetic constants are representes by:\n *  - A principal constant, with key @reactionConstant\n *  - A compound-specific constant, with key @compoundId\n *\n * More complex models are not considerer, for simplicity of\n * the MVP1\n */\n\nexport const KINETIC_MODELS = [\"Simple\", \"Hiperbolic\", \"Autocatalytic\"]\n\nexport const generateKineticConstants = (\n  model: number,\n  reaction: Reaction,\n  compounds: Compound[]\n): KineticConstants => {\n  switch (model) {\n    case 1:\n      return generateHiperbolicModelConstants(reaction, compounds)\n    case 2:\n      return generateAutocatalyticModelConstants(reaction, compounds)\n    default:\n      // 0\n      return generateSimpleModelConstants(reaction, compounds)\n  }\n}\n\nconst generateSimpleModelConstants = (\n  reaction: Reaction,\n  compounds: Compound[]\n) => {\n  const updatedExponents: KineticConstants = {}\n  reaction.reactants.forEach((reactionCompound: ReactionCompound) => {\n    const compound = compounds.find(\n      (c) => c.id === reactionCompound.compoundId\n    ) as Compound\n    const paramKey = reactantExponent(compound)\n    const oldConstant = reaction.kineticConstants[paramKey]\n\n    if (oldConstant === undefined) {\n      updatedExponents[paramKey] = 1\n    } else {\n      updatedExponents[paramKey] = oldConstant\n    }\n  })\n\n  return { k: 1, ...updatedExponents }\n}\n\nconst generateHiperbolicModelConstants = (\n  reaction: Reaction,\n  compounds: Compound[]\n) => {\n  const updatedExponents: KineticConstants = {}\n  reaction.reactants.forEach((reactionCompound: ReactionCompound) => {\n    const compound = compounds.find(\n      (c) => c.id === reactionCompound.compoundId\n    ) as Compound\n    const paramKey = semiSaturationConstant(compound)\n    const oldConstant = reaction.kineticConstants[paramKey]\n\n    if (oldConstant === undefined) {\n      updatedExponents[paramKey] = 1\n    } else {\n      updatedExponents[paramKey] = oldConstant\n    }\n  })\n\n  return { \"\\\\mu\": 1, ...updatedExponents }\n}\n\nconst generateAutocatalyticModelConstants = (\n  reaction: Reaction,\n  compounds: Compound[]\n) => {\n  const updatedExponents: KineticConstants = {}\n\n  reaction.reactants.forEach((reactionCompound: ReactionCompound) => {\n    const compound = compounds.find(\n      (c) => c.id === reactionCompound.compoundId\n    ) as Compound\n    const paramKey = reactantExponent(compound)\n    const oldConstant = reaction.kineticConstants[paramKey]\n\n    if (oldConstant === undefined) {\n      updatedExponents[paramKey] = 1\n    } else {\n      updatedExponents[paramKey] = oldConstant\n    }\n  })\n  reaction.products.forEach((reactionCompound: ReactionCompound) => {\n    const compound = compounds.find(\n      (c) => c.id === reactionCompound.compoundId\n    ) as Compound\n    const paramKey = productExponent(compound)\n    const oldConstant = reaction.kineticConstants[paramKey]\n\n    if (oldConstant === undefined) {\n      updatedExponents[paramKey] = 1\n    } else {\n      updatedExponents[paramKey] = oldConstant\n    }\n  })\n\n  return { k: 1, ...updatedExponents }\n}\n\n// Some placeholder parameters\n\nexport const reactantExponent = (compound: Compound) => {\n  return `\\\\alpha_${compound.symbol}`\n}\n\nexport const productExponent = (compound: Compound) => {\n  return `\\\\beta_${compound.symbol}`\n}\n\nexport const semiSaturationConstant = (compound: Compound) => {\n  return `K_${compound.symbol}`\n}\n","import styled from \"styled-components\"\nimport randomstring from \"randomstring\"\n\n/* Components */\nimport { FiChevronDown } from \"react-icons/fi\"\n\n// Hooks\nimport { useEffect, useState, useRef, useCallback } from \"react\"\n\ninterface ISelectProps<T> {\n  alignment?: string\n  defaultDisplayValue?: string\n  hoverIcon?: JSX.Element\n  initialValue?: ISelectOption<T>\n  selectOptions: ISelectOption<T>[]\n  onSelectionChange: (value?: T) => void\n}\n\ninterface ISelectOption<T> {\n  value?: T\n  displayText?: string\n  collapsedDisplayText?: string\n  hoverBackgroundColor?: string\n}\n\n/* Reusable custom select component */\nconst Select = <T extends string | number>(props: ISelectProps<T>) => {\n  const {\n    alignment,\n    defaultDisplayValue,\n    hoverIcon,\n    initialValue,\n    onSelectionChange,\n    selectOptions,\n  } = props\n\n  // Set state variables\n  const [selecting, setSelecting] = useState<boolean>(false)\n  const [currentValue, setCurrentValue] = useState<T | undefined>(\n    initialValue?.value || undefined\n  )\n\n  // Use ref for id value\n  const id = useRef<string>(randomstring.generate(8))\n\n  /*\n   * Save a ref select component, for event add and remove listeners\n   * when clicking outside\n   */\n  const selectRef = useRef<HTMLElement | null>(null)\n  // const dropdownRef = useRef<HTMLElement | null>(null)\n\n  useEffect(() => {\n    // Save initialValue provided as prop to currentValue, if present\n    if (initialValue) setCurrentValue(initialValue.value)\n\n    // Save ref to rendered Select component\n    selectRef.current = document.getElementById(id.current)\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  /*\n   * Set ref to dropdown when visible\n   */\n  useEffect(() => {\n    if (selecting) selectRef.current = document.getElementById(id.current)\n    else selectRef.current = null\n  }, [selecting])\n\n  /*\n   * A useCallback hook here is needed so that the exact same function is passed\n   * to both addEventListener and removeEventListener\n   *\n   * https://dev.to/marcostreng/how-to-really-remove-eventlisteners-in-react-3och\n   */\n  const clickOutsideHandler = useCallback((event: any): void => {\n    // TODO: Better typing\n    // Uses tips from:\n    // https://stackoverflow.com/questions/152975/how-do-i-detect-a-click-outside-an-element/3028037#3028037\n\n    if (!selectRef.current?.contains(event.target)) {\n      toggleSelecting()\n      // Change state manually because clickOutsideHandler can't have toggleSelecting as a dependency\n      setSelecting(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  /*\n   * Toggles select options, while adding listeners for closing when clicking outside\n   * of the dropdown\n   */\n  const toggleSelecting = (): void => {\n    // Event listeners handling\n    if (!selecting) {\n      window.addEventListener(\"click\", clickOutsideHandler, true)\n    } else {\n      window.removeEventListener(\"click\", clickOutsideHandler, true)\n    }\n\n    // Toggle state variable\n    setSelecting(!selecting)\n  }\n\n  /*\n   * Handles value selection\n   * Definition is pretty self-explanatory\n   */\n  const selectValue = (value?: T): void => {\n    toggleSelecting()\n    setCurrentValue(value)\n    onSelectionChange(value)\n  }\n\n  /*\n   * Current selected value data\n   */\n  const currentValueOption: ISelectOption<T> | undefined = selectOptions.find(\n    (option) => option.value === currentValue\n  )\n\n  return (\n    <SelectWrapper id={id.current}>\n      <SelectValue selecting={selecting} onClick={toggleSelecting}>\n        <p>{currentValueOption?.collapsedDisplayText || defaultDisplayValue}</p>\n        <FiChevronDown size={10} />\n      </SelectValue>\n      {selecting && (\n        <SelectOptions alignment={alignment || \"left\"}>\n          {defaultDisplayValue && (\n            <SelectOption onClick={() => selectValue(undefined)}>\n              <p>{defaultDisplayValue}</p>\n            </SelectOption>\n          )}\n          {selectOptions.map(({ value, displayText, hoverBackgroundColor }) => (\n            <SelectOption\n              key={value}\n              onClick={() => {\n                selectValue(value)\n              }}\n              hoverBackgroundColor={hoverBackgroundColor}\n            >\n              <p>{displayText}</p>\n              <span>{hoverIcon}</span>\n            </SelectOption>\n          ))}\n        </SelectOptions>\n      )}\n    </SelectWrapper>\n  )\n}\n\nexport default Select\n\ninterface ISelecting {\n  selecting: boolean\n}\n\nconst SelectWrapper = styled.div`\n  position: relative;\n  flex-grow: 1;\n`\n\nconst SelectValue = styled.div<ISelecting>`\n  align-items: center;\n  background-color: var(--color-grey-lightest);\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  display: flex;\n  font-size: 1.1rem;\n  outline: none;\n  padding: 5px 10px;\n  transition: all 0.15s linear;\n  ${(props) =>\n    props.selecting\n      ? `box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15),\n    0px 0px 2px var(--color-grey-normal);`\n      : \"\"}\n\n  & > p {\n    margin: 0;\n    flex-grow: 1;\n  }\n\n  & > svg {\n    margin-left: 0.5rem;\n  }\n`\n\ninterface ISelectOptions {\n  alignment: string\n}\n\nconst SelectOptions = styled.div<ISelectOptions>`\n  position: absolute;\n  top: 100%;\n\n  align-items: stretch;\n  ${(props) => (props.alignment === \"left\" ? \"left: 0;\" : \"\")}\n  ${(props) => (props.alignment === \"right\" ? \"right: 0;\" : \"\")}\n  background-color: var(--color-grey-lightest);\n  border: none;\n  border-radius: 5px;\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15),\n    0px 0px 2px var(--color-grey-normal);\n  display: flex;\n  flex-direction: column;\n  font-size: 1.2rem;\n  margin-top: 0.5rem;\n  max-height: 400px;\n  overflow-y: scroll;\n  padding: 0.5rem;\n  transition: all 0.05s linear;\n  width: auto;\n  z-index: 20;\n`\n\ninterface ISelectOptionProps {\n  hoverBackgroundColor?: string\n}\n\nconst SelectOption = styled.button<ISelectOptionProps>`\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  display: flex;\n  font-size: 1rem;\n  text-align: left;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n\n  &:hover {\n    background-color: ${(props) =>\n      props.hoverBackgroundColor || \"var(--color-grey-lighter)\"};\n\n    & > span {\n      opacity: 1;\n    }\n  }\n\n  & > p {\n    white-space: nowrap;\n    overflow-x: hidden;\n    text-overflow: ellipsis;\n    margin: 0;\n    flex-grow: 1;\n  }\n\n  & > span {\n    display: inline-flex;\n    align-items: center;\n    opacity: 0;\n    transition: opacity 0.15s linear;\n  }\n`\n","import styled from \"styled-components\"\n\nexport const ModalInputSection = styled.div`\n  border-top: 1px solid var(--color-grey-light);\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 2rem;\n  padding: 2rem 1rem 0rem;\n\n  h2 {\n    color: var(--color-grey-dark);\n    font-size: 20px;\n    margin-top: 0;\n  }\n`\n\nexport const ModalColumnInputSection = styled(ModalInputSection)`\n  flex-direction: column;\n  flex-wrap: nowrap;\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport CardButton from \"../CardButton\"\nimport { FiTrash2 } from \"react-icons/fi\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Helpers */\nimport { validateNotEmpty } from \"../../helpers/validators\"\n\n/* Hooks */\nimport { useState } from \"react\"\n\n/* Types */\nimport { Compound } from \"../../types/Compound\"\nimport { ReactionCompound } from \"../../types/Reaction\"\n\ninterface IReactionCompoundCardProps {\n  key: string\n  compound: Compound\n  reactionCompound: ReactionCompound\n  updateCompound: (updatedReactionCompound: ReactionCompound) => void\n  removeCompound: () => void\n}\n\nconst ReactionCompoundCard: React.FC<IReactionCompoundCardProps> = (props) => {\n  const { compound, reactionCompound, updateCompound, removeCompound } = props\n\n  /* Coefficient is short for Stoichiometric Coefficient in this component */\n  const [coefficientInput, setCoefficientInput] = useState<number | \"\">(\n    reactionCompound.stoichiometricCoefficient\n  )\n\n  const handleCoefficientChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    if (event.target.value === \"\") {\n      setCoefficientInput(\"\")\n      return\n    }\n    setCoefficientInput(parseFloat(event.target.value))\n  }\n\n  const validateAndUpdateCoefficient = () => {\n    if (validateNotEmpty(coefficientInput)) {\n      updateCompound({\n        ...reactionCompound,\n        stoichiometricCoefficient: coefficientInput as number,\n      })\n      return\n    }\n    setCoefficientInput(reactionCompound.stoichiometricCoefficient)\n  }\n\n  return (\n    <ReactionCompoundCardWrapper\n      color={compound.color as keyof typeof COMPOUND_COLORS}\n    >\n      <h1>{compound.symbol}</h1>\n      <input\n        value={coefficientInput}\n        type=\"number\"\n        onChange={handleCoefficientChange}\n        onBlur={validateAndUpdateCoefficient}\n      />\n      <CardButton onClick={removeCompound}>\n        <FiTrash2 />\n      </CardButton>\n    </ReactionCompoundCardWrapper>\n  )\n}\n\nexport default ReactionCompoundCard\n\ninterface IReactionCompoundCardWrapperProps {\n  color: keyof typeof COMPOUND_COLORS\n}\n\nconst ReactionCompoundCardWrapper = styled.div<IReactionCompoundCardWrapperProps>`\n  margin: 5px;\n  padding: 1.3rem;\n  position: relative;\n\n  align-items: center;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: ${(props) => COMPOUND_COLORS[props.color]};\n  border-radius: 5px;\n  color: var(--color-grey-dark);\n  display: flex;\n  cursor: pointer;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    & {\n      box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n      transform: translateY(-2px);\n    }\n  }\n\n  h1 {\n    flex-grow: 1;\n    font-size: 1.8rem;\n    margin: 0;\n  }\n\n  input {\n    font-size: 1.3rem;\n    width: 0px;\n  }\n\n  button {\n    opacity: 1;\n    margin-left: 0.5rem;\n  }\n`\n","/* Components */\nimport ReactionCompoundCard from \"./ReactionCompoundCard\"\n\n/* Hooks */\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { Compound } from \"../../types/Compound\"\nimport { ReactionCompound } from \"../../types/Reaction\"\nimport { CompoundType } from \"../../context/DataContext\"\n\ninterface IReactionCompoundListProps {\n  compoundType: CompoundType\n  reactionCompounds: ReactionCompound[]\n  reactionIndex: number\n  removeCompound: (compoundIndex: number, compoundType: CompoundType) => void\n  updateCompound: (\n    compoundIndex: number,\n    compoundType: CompoundType,\n    updatedCompound: ReactionCompound\n  ) => void\n}\n\nconst ReactionCompoundList: React.FC<IReactionCompoundListProps> = (props) => {\n  const { reactionCompounds, removeCompound, updateCompound, compoundType } =\n    props\n  const { findCompound } = useData()\n\n  return (\n    <>\n      {reactionCompounds.map((reactionCompound) => {\n        const compound = findCompound(reactionCompound.compoundId) as Compound\n        /**\n         * compoundIndex is the index in the reaction object (reactants or products)\n         *  */\n        const compoundIndex = reactionCompounds.findIndex(\n          (c) => c.compoundId === reactionCompound.compoundId\n        ) as number\n\n        return (\n          <ReactionCompoundCard\n            key={reactionCompound.compoundId}\n            compound={compound}\n            reactionCompound={reactionCompound}\n            updateCompound={(updatedReactionCompound: ReactionCompound) => {\n              updateCompound(\n                compoundIndex,\n                compoundType,\n                updatedReactionCompound\n              )\n            }}\n            removeCompound={() => {\n              removeCompound(compoundIndex, compoundType)\n            }}\n          />\n        )\n      })}\n    </>\n  )\n}\n\nexport default ReactionCompoundList\n","import styled from \"styled-components\"\nimport { Fragment } from \"react\"\n/* Types */\nimport { Token, TokenTypes } from \"../helpers/tokenization\"\n\ninterface IEquation {\n  tokenizedEquation: Token[]\n}\n\nexport const Equation: React.FC<IEquation> = (props) => {\n  const { tokenizedEquation } = props\n  const components: JSX.Element[] = []\n\n  const parenthesisStack: (JSX.Element | string)[][] = []\n  const operationStack: (JSX.Element | string)[] = []\n\n  tokenizedEquation.forEach((token) => {\n    /**\n     * Parenthesis treatment takes precedence over everything else.\n     *\n     * A buffer is pushed to the parenthesis stack upon finding a left bracket.\n     *\n     * When a right parenthesis is found, the last element from the buffer is popped,\n     * and added as a parenthesis component\n     */\n    if (token.type === TokenTypes.LeftParenthesis) {\n      parenthesisStack.push([])\n    } else if (token.type === TokenTypes.RightParenthesis) {\n      // If the syntax is correct, pop should never return undefined\n      const parenthesis = parenthesisStack.pop() as (string | JSX.Element)[]\n\n      // If there are operations in the operationStack, pop most recent one\n      if (operationStack.length > 0) {\n        const operation = operationStack.pop()\n        //\n        if (operation === \"/\") {\n          const numerator = components.pop() as string | JSX.Element\n          components.push(\n            <Division\n              numerator={numerator}\n              denominator={<Parenthesis elements={parenthesis} />}\n            />\n          )\n        } else if (operation === \"^\") {\n          const base = components.pop() as string | JSX.Element\n          components.push(\n            <Power base={base} power={<Parenthesis elements={parenthesis} />} />\n          )\n        }\n      } else {\n        // No operations in operationStack, simply push component\n        components.push(<Parenthesis elements={parenthesis} />)\n      }\n    }\n    //\n    /**\n     * Variables and parameters are easy to treat.\n     *\n     * The only considerations are to push to the parenthesis stack\n     * if a buffer is present, and to build Division and Power components if\n     * necessary.\n     */\n    else if (\n      token.type === TokenTypes.Parameter ||\n      token.type === TokenTypes.Variable\n    ) {\n      /**\n       * Push to parenthesis stack if one is present\n       */\n      if (parenthesisStack.length > 0) {\n        parenthesisStack[parenthesisStack.length - 1].push(\n          <SymbolComponent\n            symbol={(token.value as string).replace(/<|>|{|}/g, \"\")}\n          />\n        )\n      }\n      //\n      /**\n       * Then, check if division or power are present in the stack\n       *  */\n      else if (operationStack.length > 0) {\n        /**\n         * Pop most recent operation from stack\n         */\n        const operation = operationStack.pop()\n        //\n        if (operation === \"/\") {\n          const numerator = components.pop() as string | JSX.Element\n          components.push(\n            <Division\n              numerator={numerator}\n              denominator={\n                <SymbolComponent\n                  symbol={(token.value as string).replace(/<|>|{|}/g, \"\")}\n                />\n              }\n            />\n          )\n        } else if (operation === \"^\") {\n          const base = components.pop() as string | JSX.Element\n          components.push(\n            <Power\n              base={base}\n              power={\n                <SymbolComponent\n                  symbol={(token.value as string).replace(/<|>|{|}/g, \"\")}\n                />\n              }\n            />\n          )\n        }\n      }\n      //\n      /**\n       * Next steps are easier: close parenthesis or just push to components\n       */\n      else {\n        components.push(\n          <SymbolComponent\n            symbol={(token.value as string).replace(/<|>|{|}/g, \"\")}\n          />\n        )\n      }\n    }\n    //\n    /**\n     * Division and power are special in that they need the previous\n     * element in components. For this reason, the use a stack.\n     * */\n    else if (token.type === TokenTypes.Operator) {\n      if (token.value === \"/\" || token.value === \"^\") {\n        //\n        operationStack.push(token.value)\n      }\n      //\n      else if (parenthesisStack.length > 0) {\n        if (token.value === \"+\" || token.value === \"-\") {\n          parenthesisStack[parenthesisStack.length - 1].push(<>{token.value}</>)\n        } else if (token.value === \"*\") {\n          parenthesisStack[parenthesisStack.length - 1].push(<>.</>)\n        }\n      } else {\n        if (token.value === \"+\" || token.value === \"-\") {\n          components.push(<>{token.value}</>)\n        } else if (token.value === \"*\") {\n          components.push(<>.</>)\n        }\n      }\n    }\n  })\n\n  return (\n    <>\n      {components.map((component, index) => (\n        <Fragment key={index}>{component}</Fragment>\n      ))}\n    </>\n  )\n}\n\n// ----------------------------------------------------------------\n/**\n * Symbol Component\n * For alphanumeric expressions such as variables or parameters\n */\ninterface ISymbolComponent {\n  symbol: string\n}\n\nexport const SymbolComponent: React.FC<ISymbolComponent> = (props) => {\n  const { symbol } = props\n\n  /**\n   * Expressions may have subindices\n   * For now, they may not have superindices (TODO: maybe?)\n   * TODO: Support commas for subindex separation?\n   */\n  const separatedTerms: (string | JSX.Element)[] = symbol.split(\"_\")\n\n  // Replace symbols represented as strings for components\n  separatedTerms.forEach((term, index) => {\n    switch (term) {\n      case \"\\\\alpha\":\n        separatedTerms[index] = <GreekAlpha />\n        break\n      case \"\\\\beta\":\n        separatedTerms[index] = <GreekBeta />\n        break\n      case \"\\\\mu\":\n        separatedTerms[index] = <GreekMu />\n        break\n      default:\n    }\n  })\n\n  for (let i = separatedTerms.length - 1; i > 0; i--) {\n    // Last term will be the subindex\n    const subindex = separatedTerms.pop() as string | JSX.Element\n    separatedTerms[i - 1] = (\n      <Subindex base={separatedTerms[i - 1]} subindex={subindex} />\n    )\n  }\n\n  // Final result is at separatedTerms[0]\n  return separatedTerms[0] as JSX.Element\n}\n\n// ----------------------------------------------------------------\n/**\n * Parenthesis\n */\n\ninterface IParenthesisProps {\n  elements: (string | JSX.Element)[]\n}\n\nexport const Parenthesis: React.FC<IParenthesisProps> = (props) => {\n  const { elements } = props\n\n  return (\n    <>\n      {elements.map((elem, index) => (\n        <Fragment key={index}>{elem}</Fragment>\n      ))}\n    </>\n  )\n}\n\n// ----------------------------------------------------------------\n/**\n * Division\n */\n\ninterface IDivisionProps {\n  numerator: string | JSX.Element\n  denominator: string | JSX.Element\n}\n\nexport const Division: React.FC<IDivisionProps> = (props) => {\n  const { numerator, denominator } = props\n\n  return (\n    <DivisionWrapper>\n      <div>{numerator}</div>\n      <div></div>\n      <div>{denominator}</div>\n    </DivisionWrapper>\n  )\n}\n\nconst DivisionWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n\n  & > div:not(:nth-child(2)) {\n    display: flex;\n    padding: 0.5rem;\n    position: relative;\n  }\n\n  & > div:nth-child(2) {\n    width: 100%;\n    height: 2px;\n    background-color: var(--color-grey-dark);\n  }\n`\n\n// ----------------------------------------------------------------\n/**\n * Power\n *  */\n\ninterface IPowerProps {\n  base: string | JSX.Element\n  power: string | JSX.Element\n}\n\nexport const Power: React.FC<IPowerProps> = (props) => {\n  const { base, power } = props\n  return (\n    <PowerWrapper>\n      <div>{base}</div>\n      <div className=\"exponent\">{power}</div>\n    </PowerWrapper>\n  )\n}\n\nconst PowerWrapper = styled.div`\n  position: relative;\n  display: flex;\n\n  & > .exponent {\n    transform: translateY(-40%) scale(0.8);\n  }\n`\n\n// ----------------------------------------------------------------\n/**\n * Subindex\n *  */\n\ninterface ISubindexProps {\n  base: string | JSX.Element\n  subindex: string | JSX.Element\n}\n\nexport const Subindex: React.FC<ISubindexProps> = (props) => {\n  const { base, subindex } = props\n  return (\n    <SubindexWrapper>\n      <div>{base}</div>\n      <div className=\"subindex\">{subindex}</div>\n    </SubindexWrapper>\n  )\n}\n\nconst SubindexWrapper = styled.div`\n  position: relative;\n  display: flex;\n\n  & > .subindex {\n    transform: translateY(30%) scale(0.75);\n  }\n`\n\n// ----------------------------------------------------------------\n/**\n * Greek letters\n */\n\nexport const GreekAlpha = () => <span>&alpha;</span>\nexport const GreekBeta = () => <span>&beta;</span>\nexport const GreekMu = () => <span>&mu;</span>\n","import styled from \"styled-components\"\n\n/* Components */\nimport { Equation, Subindex } from \"../MathExpressions\"\n\n/* Hooks */\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { Reaction } from \"../../types/Reaction\"\n\ninterface IReactionEquationProps {\n  reaction: Reaction\n  keyCompoundSymbol?: string\n}\n\nconst ReactionEquation: React.FC<IReactionEquationProps> = (props) => {\n  const { reaction } = props\n  const { findCompound } = useData()\n\n  const keyCompound = findCompound(reaction.keyCompound)\n  const keyCompoundSymbol: string | undefined = keyCompound?.symbol || undefined\n\n  return (\n    <EquationWrapper>\n      {keyCompoundSymbol && (\n        <>\n          <Subindex base=\"r\" subindex={keyCompoundSymbol} />\n          &nbsp;=&nbsp;\n        </>\n      )}\n      <Equation tokenizedEquation={reaction.kineticEquation} />\n    </EquationWrapper>\n  )\n}\n\nexport default ReactionEquation\n\n//\n\nconst EquationWrapper = styled.div`\n  align-items: center;\n  align-self: stretch;\n  background-color: var(--color-grey-lightest);\n  border: 1px solid var(--color-grey-light);\n  border-radius: 5px;\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  color: var(--color-grey-dark);\n  display: flex;\n  font-size: 1.8rem;\n  justify-content: center;\n  padding: 1.5rem;\n  margin: 1.5rem 0 1rem;\n\n  span {\n    font-family: \"Comfortaa\", symbol;\n  }\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport InfoTooltip from \"../InfoTooltip\"\n\n/* Helpers */\nimport { validateNotEmpty } from \"../../helpers/validators\"\n\n/* Hooks */\nimport { useState } from \"react\"\n\ninterface IReactionParamInputCardProps {\n  paramSymbol: string | JSX.Element | JSX.Element[]\n  units?: JSX.Element\n  value: number\n  updateValue: (value: number) => void\n}\n\nconst ReactionParamInputCard: React.FC<IReactionParamInputCardProps> = (\n  props\n) => {\n  const { paramSymbol, value, units, updateValue } = props\n  const [valueInput, setValueInput] = useState<number | \"\">(value)\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.value === \"\") {\n      setValueInput(\"\")\n      return\n    }\n    setValueInput(parseFloat(event.target.value))\n  }\n\n  const validateAndUpdateConstant = () => {\n    if (validateNotEmpty(valueInput)) {\n      updateValue(valueInput as number)\n      return\n    }\n    setValueInput(value)\n  }\n\n  return (\n    <ParamInputWrapper>\n      <ParamInputInner>\n        <h1>{paramSymbol}</h1>\n        <input\n          value={valueInput}\n          type=\"number\"\n          onChange={handleChange}\n          onBlur={validateAndUpdateConstant}\n        />\n        {units && <InfoTooltip text={units} />}\n      </ParamInputInner>\n    </ParamInputWrapper>\n  )\n}\n\nexport default ReactionParamInputCard\n\nconst ParamInputWrapper = styled.div`\n  flex-basis: 25%;\n  position: relative;\n  z-index: 2;\n\n  &:hover {\n    z-index: 3;\n  }\n`\n\nconst ParamInputInner = styled.div`\n  position: relative;\n  align-items: center;\n  background-color: var(--color-grey-light);\n  border-radius: 5px;\n  cursor: pointer;\n  display: flex;\n  margin: 0.5rem;\n  padding: 1.3rem;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n    transform: translateY(-2px);\n  }\n\n  h1 {\n    color: var(--color-grey-dark);\n    font-size: 1.6rem;\n    margin: 0;\n    margin-right: 1rem;\n\n    span {\n      /* Greek symbols */\n      font-family: \"Comfortaa\", symbol;\n    }\n  }\n\n  input {\n    font-size: 1.4rem;\n  }\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport ReactionParamInputCard from \"./ReactionParamInputCard\"\nimport { Equation, SymbolComponent } from \"../MathExpressions\"\n\n/* Types */\nimport { Compound } from \"../../types/Compound\"\nimport { Reaction } from \"../../types/Reaction\"\n\nimport { Token, TokenTypes } from \"../../helpers/tokenization\"\nimport { useData } from \"../../context/DataContext\"\n\ninterface IReactionKineticParametersProps {\n  compounds: Compound[]\n  reaction: Reaction\n  updateKineticConstant: (key: string, value: number) => void\n}\n\n// const mu_units = <Equation></Equation>\n\nconst ReactionKineticParameters: React.FC<IReactionKineticParametersProps> = (\n  props\n) => {\n  const { reaction, updateKineticConstant } = props\n  const { settings } = useData()\n\n  const tokenizedMuUnits = [\n    new Token(TokenTypes.Parameter, `${settings.timeUnits}`),\n    new Token(TokenTypes.Operator, \"^\"),\n    new Token(TokenTypes.Parameter, `-1`),\n  ]\n\n  const globalOrder = Object.entries(reaction?.kineticConstants)\n    .map(([key, value]) => value)\n    .reduce(\n      (accumulator, currentValue) => accumulator + currentValue,\n      -reaction?.kineticConstants.k || 0\n    )\n  const tokenizedKUnits = [\n    new Token(TokenTypes.Parameter, `${settings.timeUnits}`),\n    new Token(TokenTypes.Operator, \"^\"),\n    new Token(TokenTypes.Parameter, `-1`),\n  ]\n\n  if (globalOrder !== 1) {\n    tokenizedKUnits.push(new Token(TokenTypes.Operator, \"*\"))\n    tokenizedKUnits.push(\n      new Token(TokenTypes.Parameter, `${settings.volumeUnits}`)\n    )\n    tokenizedKUnits.push(new Token(TokenTypes.Operator, \"^\"))\n    tokenizedKUnits.push(new Token(TokenTypes.Parameter, `${globalOrder - 1}`))\n    tokenizedKUnits.push(new Token(TokenTypes.Operator, \"*\"))\n    tokenizedKUnits.push(\n      new Token(TokenTypes.Parameter, `${settings.molarUnits}`)\n    )\n    tokenizedKUnits.push(new Token(TokenTypes.Operator, \"^\"))\n    tokenizedKUnits.push(\n      new Token(TokenTypes.Parameter, `${-(globalOrder - 1)}`)\n    )\n  }\n\n  return (\n    <KineticParamsWrapper>\n      {Object.entries(reaction.kineticConstants).map(([param, value]) => {\n        let units = undefined\n        if (param === \"k\")\n          units = <Equation tokenizedEquation={tokenizedKUnits} />\n        if (param === \"\\\\mu\")\n          units = <Equation tokenizedEquation={tokenizedMuUnits} />\n\n        return (\n          <ReactionParamInputCard\n            key={param}\n            paramSymbol={<SymbolComponent symbol={param} />}\n            value={value as number}\n            units={units}\n            updateValue={(value: number) => {\n              updateKineticConstant(param, value)\n            }}\n          />\n        )\n      })}\n    </KineticParamsWrapper>\n  )\n}\n\nexport default ReactionKineticParameters\n\nconst KineticParamsWrapper = styled.div`\n  align-self: stretch;\n  background-color: var(--color-grey-lightest);\n  border-radius: 5px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  margin-top: 0.5rem;\n  padding: 0.5rem;\n\n  input {\n    margin-left: 0;\n  }\n`\n","import styled from \"styled-components\"\n\n/* Constants */\nimport {\n  KINETIC_MODELS,\n  generateKineticConstants,\n} from \"../../constants/kineticModels\"\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Components */\nimport EditModal from \"../EditModal\"\nimport FieldInput from \"../FieldInput\"\nimport Notice from \"../Notice\"\nimport Select from \"../Select\"\nimport SubmitButton from \"../SubmitButton\"\nimport {\n  ModalInputSection,\n  ModalColumnInputSection,\n} from \"../ModalInputSection\"\nimport { FiPlus } from \"react-icons/fi\"\nimport ReactionCompoundList from \"./ReactionCompoundList\"\nimport ReactionEquation from \"./ReactionEquation\"\nimport ReactionKineticParameters from \"./ReactionKineticParameters\"\nimport ReactionPreview from \"./ReactionPreview\"\n\n/* Hooks */\nimport { useMemo, useState, useRef } from \"react\"\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { Compound } from \"../../types/Compound\"\nimport { Reaction, ReactionCompound } from \"../../types/Reaction\"\nimport { CompoundType } from \"../../context/DataContext\"\n\ninterface IReactionEditModalProps {\n  compounds: Compound[]\n  reaction: Reaction\n  closeModal: () => void\n}\n\nconst ReactionEditModal: React.FC<IReactionEditModalProps> = (props) => {\n  const { compounds, reaction, closeModal } = props\n  const { reactions, findCompound, serializeKineticEquation, updateReaction } =\n    useData()\n  const [closing, setClosing] = useState<boolean>(false)\n  const reactionIndex = reactions.findIndex((rea) => rea.id === reaction.id)\n  /**\n   * Copied state for reaction editing\n   */\n  const [modalReaction, setModalReaction] = useState<Reaction>(\n    JSON.parse(JSON.stringify(reaction))\n  )\n\n  /* Keep a reference to scrolled element */\n  const scrollRef = useRef(document.getElementById(\"scroll-target\"))\n\n  /* For the select input, both for reactants and products */\n  const [selectReactantIndex, setSelectReactantIndex] = useState<\n    number | undefined\n  >(undefined)\n  const [selectProductIndex, setSelectProductIndex] = useState<\n    number | undefined\n  >(undefined)\n\n  /**\n   * Select options\n   */\n  const reactantOptions = useMemo(() => {\n    return compounds\n      .filter((compound) => {\n        for (const reactant of modalReaction.reactants) {\n          if (reactant.compoundId === compound.id) {\n            return false\n          }\n        }\n        return true\n      })\n      .map((compound) => {\n        const index = compounds.findIndex((c) => c.id === compound.id)\n        return {\n          value: index,\n          displayText: compound.symbol,\n          collapsedDisplayText: compound.symbol,\n          hoverBackgroundColor:\n            COMPOUND_COLORS[compound.color as keyof typeof COMPOUND_COLORS],\n        }\n      })\n    // eslint-disable-next-line\n  }, [modalReaction.reactants])\n\n  const productOptions = useMemo(() => {\n    return compounds\n      .filter((compound) => {\n        for (const product of modalReaction.products) {\n          if (product.compoundId === compound.id) {\n            return false\n          }\n        }\n        return true\n      })\n      .map((compound) => {\n        const index = compounds.findIndex((c) => c.id === compound.id)\n        return {\n          value: index,\n          displayText: compound.symbol,\n          collapsedDisplayText: compound.symbol,\n          hoverBackgroundColor:\n            COMPOUND_COLORS[compound.color as keyof typeof COMPOUND_COLORS],\n        }\n      })\n    // eslint-disable-next-line\n  }, [modalReaction.products])\n\n  /**\n   * Handle compound form updates\n   */\n  const getCompoundKey = (\n    compoundType: CompoundType\n  ): \"products\" | \"reactants\" => {\n    if (compoundType === CompoundType.Reactant) return \"reactants\"\n    return \"products\"\n  }\n\n  const addCompound = (\n    compoundId: string,\n    compoundType: CompoundType\n  ): void => {\n    /* Determine which array to push to */\n    const key = getCompoundKey(compoundType)\n    const updatedReaction = JSON.parse(JSON.stringify(modalReaction))\n\n    updatedReaction[key].push({\n      compoundId,\n      stoichiometricCoefficient: 1,\n    })\n\n    /* Recalculate kinetic constants */\n    const kineticConstants = generateKineticConstants(\n      updatedReaction.kineticModel,\n      updatedReaction,\n      compounds\n    )\n    updatedReaction.kineticConstants = kineticConstants\n    updatedReaction.kineticEquation = serializeKineticEquation(\n      updatedReaction,\n      reactionIndex\n    )\n\n    setModalReaction(updatedReaction)\n  }\n\n  const updateCompound = (\n    compoundIndex: number,\n    compoundType: CompoundType,\n    updatedCompound: ReactionCompound\n  ): void => {\n    /* Determine which array to push to */\n    const key = getCompoundKey(compoundType)\n    const updatedReaction = { ...modalReaction }\n\n    updatedReaction[key][compoundIndex] = updatedCompound\n\n    setModalReaction(updatedReaction)\n  }\n\n  const removeCompound = (\n    compoundIndex: number,\n    compoundType: CompoundType\n  ) => {\n    /* Determine which array to push to */\n    const key = getCompoundKey(compoundType)\n    const updatedReaction = { ...modalReaction }\n    const deletedCompound = updatedReaction[key][compoundIndex]\n\n    /* Update reaction compounds */\n    updatedReaction[key] = [\n      ...updatedReaction[key].slice(0, compoundIndex),\n      ...updatedReaction[key].slice(\n        compoundIndex + 1,\n        updatedReaction[key].length\n      ),\n    ]\n\n    /* Set keyCompound to undefined if deleted compound is keyCompound */\n    if (deletedCompound.compoundId === modalReaction.keyCompound) {\n      updatedReaction.keyCompound = undefined\n    }\n\n    /* Recalculate kinetic constants and equation */\n    const kineticConstants = generateKineticConstants(\n      updatedReaction.kineticModel,\n      updatedReaction,\n      compounds\n    )\n    updatedReaction.kineticConstants = kineticConstants\n    updatedReaction.kineticEquation = serializeKineticEquation(\n      updatedReaction,\n      reactionIndex\n    )\n\n    setModalReaction(updatedReaction)\n  }\n\n  /**\n   * Handle kinetic constant change\n   */\n\n  const handleKineticConstantUpdate = (key: string, value: number) => {\n    const updatedReaction = JSON.parse(JSON.stringify(modalReaction))\n    updatedReaction.kineticConstants[key] = value\n    setModalReaction(updatedReaction)\n  }\n\n  /* For select state */\n  const selectReactantInitialValue = selectReactantIndex\n    ? {\n        value: selectReactantIndex,\n        displayText: compounds[selectReactantIndex].symbol,\n        collapsedDisplayText: compounds[selectReactantIndex].symbol,\n      }\n    : undefined\n\n  const selectProductInitialValue = selectProductIndex\n    ? {\n        value: selectProductIndex,\n        displayText: compounds[selectProductIndex].symbol,\n        collapsedDisplayText: compounds[selectProductIndex].symbol,\n      }\n    : undefined\n\n  return (\n    <EditModal\n      closing={closing}\n      setClosing={setClosing}\n      handleClose={closeModal}\n    >\n      <ReactionPreview reaction={modalReaction} />\n      <br />\n      <FieldInput\n        fieldName=\"name\"\n        label=\"Reaction name:\"\n        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n          setModalReaction({\n            ...modalReaction,\n            name: event.target.value,\n          })\n        }}\n        value={modalReaction.name}\n      />\n\n      {/* Compounds input */}\n      <ModalInputSection>\n        <CompoundInputWrapper>\n          <h2>Reactants</h2>\n          <AddCompound>\n            <Select\n              defaultDisplayValue=\"Compound...\"\n              hoverIcon={<FiPlus />}\n              initialValue={selectReactantInitialValue}\n              selectOptions={reactantOptions}\n              onSelectionChange={(index: number | undefined) => {\n                if (index !== undefined) {\n                  addCompound(compounds[index].id, CompoundType.Reactant)\n                }\n                setSelectReactantIndex(undefined)\n              }}\n            />\n          </AddCompound>\n          <CompoundInputInner>\n            {modalReaction.reactants.length !== 0 ? (\n              <ReactionCompoundList\n                reactionIndex={reactionIndex}\n                reactionCompounds={modalReaction.reactants}\n                removeCompound={removeCompound}\n                updateCompound={updateCompound}\n                compoundType={CompoundType.Reactant}\n              />\n            ) : (\n              <Notice>No compounds...</Notice>\n            )}\n          </CompoundInputInner>\n        </CompoundInputWrapper>\n\n        <CompoundInputWrapper>\n          <h2>Products</h2>\n          <AddCompound>\n            <Select\n              defaultDisplayValue=\"Compound...\"\n              hoverIcon={<FiPlus />}\n              initialValue={selectProductInitialValue}\n              selectOptions={productOptions}\n              onSelectionChange={(index: number | undefined) => {\n                if (index !== undefined) {\n                  addCompound(compounds[index].id, CompoundType.Product)\n                }\n                setSelectProductIndex(undefined)\n              }}\n            />\n          </AddCompound>\n          <CompoundInputInner>\n            {modalReaction.products.length !== 0 ? (\n              <ReactionCompoundList\n                reactionIndex={reactionIndex}\n                reactionCompounds={modalReaction.products}\n                removeCompound={removeCompound}\n                updateCompound={updateCompound}\n                compoundType={CompoundType.Product}\n              />\n            ) : (\n              <Notice>No compounds...</Notice>\n            )}\n          </CompoundInputInner>\n        </CompoundInputWrapper>\n      </ModalInputSection>\n\n      {/* Kinetics input */}\n      <ModalColumnInputSection>\n        <h2>Kinetics</h2>\n        <SelectField>\n          <p>Kinetic model</p>\n          <Select\n            initialValue={{\n              value: modalReaction.kineticModel,\n              displayText: KINETIC_MODELS[modalReaction.kineticModel],\n              collapsedDisplayText: KINETIC_MODELS[modalReaction.kineticModel],\n            }}\n            selectOptions={KINETIC_MODELS.map((model, index) => ({\n              value: index,\n              displayText: model,\n              collapsedDisplayText: model,\n            }))}\n            onSelectionChange={(value) => {\n              const updatedReaction = JSON.parse(JSON.stringify(modalReaction))\n\n              updatedReaction.kineticConstants = generateKineticConstants(\n                value as number,\n                modalReaction,\n                compounds\n              )\n              updatedReaction.kineticModel = value\n              updatedReaction.kineticEquation = serializeKineticEquation(\n                updatedReaction,\n                reactionIndex\n              )\n\n              setModalReaction(updatedReaction)\n            }}\n          />\n        </SelectField>\n        <SelectField>\n          <p>Key compound</p>\n          <Select\n            defaultDisplayValue=\"Reactant...\"\n            initialValue={\n              modalReaction.keyCompound !== undefined\n                ? {\n                    value: modalReaction.keyCompound,\n                    displayText: (\n                      findCompound(modalReaction.keyCompound) as Compound\n                    ).symbol,\n                    collapsedDisplayText: (\n                      findCompound(modalReaction.keyCompound) as Compound\n                    ).symbol,\n                  }\n                : undefined\n            }\n            selectOptions={modalReaction.reactants.map((reactionCompound) => ({\n              value: reactionCompound.compoundId,\n              displayText: (\n                findCompound(reactionCompound.compoundId) as Compound\n              ).symbol,\n              collapsedDisplayText: (\n                findCompound(reactionCompound.compoundId) as Compound\n              ).symbol,\n            }))}\n            onSelectionChange={(value: string | undefined) => {\n              const updatedReaction = JSON.parse(JSON.stringify(modalReaction))\n              updatedReaction.keyCompound = value\n              setModalReaction(updatedReaction)\n            }}\n          />\n        </SelectField>\n        <ReactionEquation reaction={modalReaction} />\n        <ReactionKineticParameters\n          reaction={modalReaction}\n          compounds={compounds}\n          updateKineticConstant={handleKineticConstantUpdate}\n        />\n      </ModalColumnInputSection>\n\n      <SubmitButton\n        color=\"green\"\n        onClick={() => {\n          updateReaction(reactionIndex, modalReaction)\n          scrollRef?.current?.scrollTo({ top: 0, behavior: \"smooth\" })\n          setClosing(true)\n        }}\n      >\n        Done\n      </SubmitButton>\n    </EditModal>\n  )\n}\n\nexport default ReactionEditModal\n\nconst SelectField = styled.div`\n  display: flex;\n  align-items: center;\n  width: 50%;\n\n  p {\n    color: var(--color-grey-dark);\n    flex-grow: 1;\n    font-size: 1rem;\n    margin-right: 1.4rem;\n  }\n\n  div {\n    flex-basis: 45%;\n  }\n`\n\nconst CompoundInputWrapper = styled.div`\n  flex-basis: 50%;\n\n  @media (max-width: 700px) {\n    flex-basis: 100%;\n  }\n`\n\nconst CompoundInputInner = styled.div`\n  background-color: var(--color-grey-lightest);\n  border-radius: 5px;\n  margin: 0.5rem 0.3rem;\n  padding: 0.5rem;\n`\n\nconst AddCompound = styled.div`\n  display: flex;\n  margin: 0.3rem;\n\n  & > button {\n    margin-left: 0.5rem;\n  }\n`\n","/* Components */\nimport ReactionCard from \"./ReactionCard\"\nimport ReactionEditModal from \"./ReactionEditModal\"\n\n/* Hooks */\nimport { useData } from \"../../context/DataContext\"\n\n/* Types */\nimport { Reaction } from \"../../types/Reaction\"\n\nconst ReactionList: React.FC = () => {\n  const {\n    compounds,\n    reactions,\n    editedReactionId,\n    editReaction,\n    removeReaction,\n  } = useData()\n\n  const editedReactionIndex = editedReactionId\n    ? reactions.findIndex((reaction) => reaction.id === editedReactionId)\n    : undefined\n\n  const editedReaction = editedReactionId\n    ? reactions[editedReactionIndex as number]\n    : undefined\n\n  return (\n    <>\n      {reactions.map((reaction, index) => (\n        <ReactionCard\n          reaction={reaction}\n          reactionIndex={index}\n          editReaction={(): void => {\n            editReaction(index)\n          }}\n          removeReaction={(): void => {\n            removeReaction(index)\n          }}\n          key={index}\n        >\n          Reaction\n        </ReactionCard>\n      ))}\n\n      {/* Edit modal */}\n      {editedReactionId && (\n        <ReactionEditModal\n          compounds={compounds}\n          reaction={editedReaction as Reaction}\n          closeModal={() => editReaction()}\n        />\n      )}\n    </>\n  )\n}\n\nexport default ReactionList\n","/* Components */\nimport Button from \"../components/Button\"\nimport PageTitle from \"../components/PageTitle\"\nimport ReactionList from \"../components/reactions/ReactionList\"\nimport { FiPlus } from \"react-icons/fi\"\n\n/* Hooks */\nimport { useEffect } from \"react\"\nimport { useData } from \"../context/DataContext\"\n\nconst ReactionsPage: React.FC = () => {\n  const { addReaction, editReaction } = useData()\n\n  useEffect(() => {\n    return () => {\n      /* Sets edited reaction to undefined on dismount */\n      editReaction()\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <>\n      <PageTitle>Reactions</PageTitle>\n      <Button color=\"green\" onClick={addReaction}>\n        Add <FiPlus />\n      </Button>\n      <ReactionList />\n    </>\n  )\n}\n\nexport default ReactionsPage\n","import { useData } from \"../context/DataContext\"\n\n/* Types */\nimport { TimePoint } from \"../types/SimulationResults\"\n\ninterface Point {\n  x: number\n  y: number\n}\n\nconst useGetData = () => {\n  const { simulationResults } = useData()\n\n  /**\n   * Maps requested variable data to Victory-readable data\n   */\n  const variableData = (variable: string): Point[] => {\n    return simulationResults?.map((data: TimePoint) => {\n      return {\n        x: data.t,\n        y: data[variable],\n      }\n    }) as Point[]\n  }\n\n  /**\n   * Gets max functional value to set axis values correctly\n   */\n  const maxFunctionalValue = (data: Point[][]) => {\n    const maxValuesForEachVariable: number[] = []\n\n    data.forEach((points: Point[]) => {\n      maxValuesForEachVariable.push(\n        Math.max(...points.map((point: Point) => point.y))\n      )\n    })\n\n    return Math.max(...maxValuesForEachVariable)\n  }\n\n  return { variableData, maxFunctionalValue }\n}\n\nexport default useGetData\n","import styled from \"styled-components\"\n\n/* Components */\nimport { VictoryAxis, VictoryChart, VictoryLine } from \"victory\"\nimport PageTitle from \"../components/PageTitle\"\nimport Select from \"../components/Select\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../constants/compoundColors\"\n\n/* Helpers */\nimport { lastElement } from \"../helpers/array\"\n\n/* Hooks */\nimport { useState } from \"react\"\nimport { useData } from \"../context/DataContext\"\nimport useGetData from \"../hooks/useGetData\"\n\nconst ResultsPage: React.FC = () => {\n  const { variableData, maxFunctionalValue } = useGetData()\n  const { compounds } = useData()\n  const [selectedVariableIndex, setSelectedVariableIndex] = useState<number>(0)\n\n  /* Derived state from selectedVariable */\n  const selectedCompound = compounds[selectedVariableIndex]\n  const data = variableData(`[${selectedCompound.symbol}]`)\n\n  return (\n    <>\n      <PageTitle>Results</PageTitle>\n      <SelectWrapper>\n        <p>Variable:</p>\n        <Select\n          initialValue={{\n            value: 0,\n            displayText: selectedCompound.symbol,\n            collapsedDisplayText: selectedCompound.symbol,\n          }}\n          selectOptions={compounds.map((compound, index) => ({\n            value: index,\n            displayText: compound.symbol,\n            collapsedDisplayText: compound.symbol,\n          }))}\n          onSelectionChange={(index) =>\n            setSelectedVariableIndex(index as number)\n          }\n        />\n      </SelectWrapper>\n      <VictoryChart style={styles.container}>\n        {/* Axis components */}\n        <VictoryAxis\n          crossAxis\n          domain={[0, lastElement(data).x]}\n          style={styles.axis}\n          standalone={false}\n        />\n        <VictoryAxis\n          dependentAxis\n          crossAxis\n          domain={[0, maxFunctionalValue([data]) * 1.02]}\n          style={styles.axis}\n          standalone={false}\n        />\n\n        {/* Line components */}\n        <VictoryLine\n          style={{\n            data: {\n              stroke:\n                COMPOUND_COLORS[\n                  selectedCompound.color as keyof typeof COMPOUND_COLORS\n                ],\n            },\n            parent: { border: \"1px solid #ccc\" },\n          }}\n          data={data}\n        />\n      </VictoryChart>\n    </>\n  )\n}\n\nexport default ResultsPage\n\nconst styles = {\n  container: {\n    parent: {\n      fontFamily: \"'Mulish', sans-serif\",\n      backgroundColor: \"hsl(213, 20%, 95%)\",\n      borderRadius: \"5px\",\n      height: \"auto\",\n    },\n  },\n  axis: {\n    axis: { fontFamily: \"'Mulish', sans-serif\" },\n    ticks: { size: 5, stroke: \"black\", strokeWidth: 1 },\n    tickLabels: { fontFamily: \"inherit\", fontSize: 10 },\n  },\n}\n\nconst SelectWrapper = styled.div`\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  width: 200px;\n  display: flex;\n  align-items: center;\n\n  p {\n    margin: 0;\n    margin-right: 1rem;\n    font-size: 1rem;\n  }\n`\n","export const lastElement = <T extends unknown>(array: Array<T>): T => {\n  return array[array.length - 1]\n}\n","import { Switch, Redirect, Route } from \"react-router-dom\"\n\n/* Hooks */\nimport { useData } from \"./context/DataContext\"\n\n/* Pages */\nimport CompoundsPage from \"./pages/CompoundsPage\"\nimport SettingsPage from \"./pages/SettingsPage\"\nimport ReactionsPage from \"./pages/ReactionsPage\"\nimport ResultsPage from \"./pages/ResultsPage\"\n\nconst Routes = () => {\n  const { simulationResults } = useData()\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={CompoundsPage} />\n      <Route path=\"/compounds\" component={CompoundsPage} />\n      <Route path=\"/reactions\" component={ReactionsPage} />\n      <Route path=\"/settings\" component={SettingsPage} />\n\n      {/* Redirect for deployed URL */}\n      <Route path=\"/batch-simulator\">\n        <Redirect\n          to={{\n            pathname: \"/\",\n          }}\n        />\n      </Route>\n\n      {/* Redirect /results to / if no data is available */}\n      <Route path=\"/results\" component={ResultsPage}>\n        {simulationResults ? (\n          <ResultsPage />\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/\",\n            }}\n          />\n        )}\n      </Route>\n    </Switch>\n  )\n}\n\nexport default Routes\n","import { BrowserRouter as Router } from \"react-router-dom\"\nimport GlobalStyles from \"./GlobalStyles\"\n\n/* Context */\nimport { DataStore } from \"./context/DataContext\"\n\n/* Layouts */\nimport MainLayout from \"./layouts/MainLayout\"\n\n/* Components */\nimport Routes from \"./Routes\"\n\nconst App = () => {\n  return (\n    <DataStore>\n      <Router>\n        <GlobalStyles />\n        <MainLayout>\n          <Routes />\n        </MainLayout>\n      </Router>\n    </DataStore>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}