{"version":3,"sources":["helpers/localStorage.ts","features/compoundsSlice.ts","features/reactionsSlice.ts","features/settingsSlice.ts","features/simulationResultsSlice.ts","store.ts","GlobalStyles.tsx","components/Button.tsx","hooks/useStore.tsx","hooks/useSettings.ts","helpers/tokenTypes.ts","helpers/reactionTypes.ts","hooks/useReactions.tsx","constants/compoundColors.tsx","hooks/useCompounds.tsx","hooks/useSimulationResults.ts","helpers/units.ts","hooks/useMathConstants.ts","helpers/tokenization.tsx","helpers/tokenParser.tsx","helpers/reactions.tsx","hooks/useSimulate.tsx","components/Sidebar.tsx","layouts/MainLayout.tsx","hooks/useLocalStorageState.tsx","hooks/useVersionControl.ts","components/PageTitle.tsx","components/CardButton.tsx","components/compounds/CompoundCard.tsx","components/EditModal.tsx","components/forms/Error.tsx","components/forms/Input.tsx","components/forms/InfoTooltip.tsx","components/forms/FieldInput.tsx","components/SubmitButton.tsx","helpers/validators.tsx","components/compounds/CompoundEditModal.tsx","components/NoResource.tsx","components/compounds/CompoundList.tsx","pages/CompoundsPage.tsx","components/settings/InputSection.tsx","components/settings/OperatingTimesSection.tsx","components/Select.tsx","components/forms/SelectInput.tsx","components/settings/UnitsSection.tsx","components/forms/CheckboxInput.tsx","components/settings/HeatExchangeSection.tsx","pages/SettingsPage.tsx","components/Notice.tsx","components/reactions/ReactionPreview.tsx","components/reactions/ReactionCard.tsx","constants/kineticModels.tsx","components/ModalInputSection.tsx","components/reactions/ReactionCompoundCard.tsx","components/reactions/ReactionCompoundList.tsx","components/MathExpressions.tsx","components/reactions/ReactionEquation.tsx","constants/regexs.ts","components/reactions/ReactionParamInputCard.tsx","components/reactions/ReactionKineticParameters.tsx","helpers/serializeKineticEquation.ts","components/reactions/ReactionEditModal.tsx","components/reactions/ReactionList.tsx","pages/ReactionsPage.tsx","helpers/drawPlot.ts","components/Plot.tsx","components/results/VariableCheckboxes.tsx","components/results/SidebarOptions.tsx","hooks/useGetData.tsx","pages/ResultsPage.tsx","Routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["loadFromKey","key","serializedSlice","localStorage","getItem","JSON","parse","err","saveToKey","state","stringify","setItem","error","console","STORAGE_KEY","initialState","compoundsSlice","createSlice","name","reducers","add","action","payload","update","index","findIndex","c","id","compound","remove","slice","length","reset","actions","reactionsSlice","r","reaction","removeCompound","compoundId","forEach","reactants","filter","reactionCompound","products","keyCompound","undefined","reactionTime","deadTime","timeStep","timeUnits","volumeUnits","molarUnits","massUnits","temperatureUnits","energyUnits","isothermal","initialTemperature","settingsSlice","save","saveField","field","value","simulationResultsSlice","store","configureStore","reducer","compounds","compoundsReducer","reactions","reactionsReducer","settings","settingsReducer","simulationResults","simulationResultsReducer","GlobalStyles","createGlobalStyle","Button","styled","button","props","colorsBase","color","colorsHover","buttonStyle","useAppDispatch","useDispatch","useAppSelector","useSelector","useSettings","dispatch","useEffect","resetSettings","saveSettings","newSettings","TokenTypes","CompoundTypes","KineticModels","useReactions","resetReactions","addReaction","newReaction","randomstring","generate","kineticModel","kineticConstants","E_A","kineticEquation","type","updateReaction","updatedReaction","removeCompoundFromReactions","removeReaction","COMPOUND_COLORS_CODES","COMPOUND_COLORS","orange","yellow","lime","green1","green2","waterGreen1","waterGreen2","skyBlue1","skyBlue2","blue1","blue2","violet1","violet2","pink1","pink2","pink3","red1","red2","useCompounds","unusedColor","colorKeys","usedColors","foundColor","k","addCompound","newCompound","concentration","molecularWeight","symbol","findCompound","find","updateCompound","updatedCompound","removeAllCompounds","useSimulationResults","saveSimulationResults","newSimulationResults","timeUnitsValue","volumeUnitsValue","massUnitsValue","molarUnitsValue","temperatureUnitsValue","energyUnitsValue","mapUnitOptions","arr","map","unit","displayText","collapsedDisplayText","timeUnitsOptions","massUnitsOptions","molarUnitsOptions","volumeUnitsOptions","temperatureUnitsOptions","energyUnitsOptions","FACTORS","energy","J","kJ","cal","kcal","mass","kg","g","mg","lb","molar","mol","kmol","lbmol","time","s","min","h","ms","temperature","K","R","volume","L","m3","cm3","useMathConstants","energyUnitsIndex","molarUnitsIndex","temperatureUnitsIndex","CONSTANTS","getEnergyFactor","getTemperatureFactor","getMolarFactor","e","call","assoc","prec","precedence","token","associativity","replaceSigns","tokenizedEquation","i","parenthesisFound","getCoefficientForComponent","baseStoichiometricCoefficient","getStoichiomericCoefficientForKeyCompound","coefficient","stoichiometricCoefficient","useSimulate","getConstant","parseReactionEquations","parsedReactions","parsedReaction","parseParametersAndVariables","tokens","outputQueue","operationStack","peek","array","push","pop","concat","reverse","parseEquation","mergeCompounds","kineticEquationCopy","replace","parseFloat","parsedCompounds","Object","assign","simulate","initialValues","t","T","results","executeSimulation","resultsInitialValues","iterator","endTime","rangeIterator","next","result","done","explicitEulerStep","createSimulationIterator","oldTimePoint","newTimePoint","reactionRates","calculateReactionRate","entries","variable","rateOfChange","calculateNetRateOfChange","nonNegative","reactionRate","resultStack","b","a","Sidebar","history","useHistory","useState","expanded","setExpanded","navigateTo","route","iconProps","size","SidebarWrapper","onClick","event","preventDefault","SidebarLinkWrapper","IconWrapper","title","icon","href","SidebarLink","div","MainLayout","children","MainLayoutWrapper","MainContentWrapper","MainContent","useLocalStorageState","defaultValue","options","serialize","deserialize","valueInLocalStorage","window","setState","prevKeyRef","useRef","prevKey","current","removeItem","CURRENT_VERSION","useVersionControl","version","setVersion","PageTitle","h2","CardButton","CompoundCard","editCompound","CompoundCardWrapper","CompoundCardInner","CompoundTile","li","EditModal","closing","setClosing","handleClose","closeModal","setTimeout","EditModalWrapper","EditModalInner","CloseButton","ErrorWrapper","big","Error","className","Input","input","transparent","errors","InfoTooltip","text","Icon","InfoWrapper","Info","FieldInputWrapper","LabelWrapper","FieldInput","fieldName","label","tooltip","onBlur","onChange","htmlFor","autoComplete","SubmitButton","validateEqual","validateNotEmpty","validateGreaterThan","threshold","equal","CompoundEditModal","compoundIndex","comp","validateUnicity","formik","useFormik","validate","values","onSubmit","scrollTo","top","behavior","Form","handleSubmit","handleChange","form","NoResource","p","CompoundList","editedCompoundId","setEditedCompoundId","editedCompound","useMemo","CompoundListWrapper","ul","CompoundsPage","confirm","InputSection","InputSectionWrapper","InputSectionInner","OperatingTimesSection","Select","alignment","defaultDisplayValue","hoverIcon","initialValue","onSelectionChange","selectOptions","selecting","setSelecting","currentValue","setCurrentValue","selectRef","document","getElementById","clickOutsideHandler","useCallback","contains","target","toggleSelecting","removeEventListener","addEventListener","selectValue","currentValueOption","option","SelectWrapper","SelectValue","SelectOptions","SelectOption","hoverBackgroundColor","SelectInputWrapper","SelectInput","selectedOption","UnitsSection","setFieldValue","CheckboxInput","CheckboxInputWrapper","Checkbox","toggled","HeatExchangeSection","SettingsPage","sectionProps","Notice","ReactionPreview","ReactionPreviewWrapper","CompoundWrapper","ReactionCard","reactionIndex","editReaction","ReactionCardWrapper","ReactionInfo","ReactionName","KINETIC_MODELS","generateKineticConstants","model","generateHiperbolicModelConstants","generateAutocatalyticModelConstants","generateSimpleModelConstants","updatedExponents","paramKey","reactantExponent","oldConstant","semiSaturationConstant","productExponent","ModalInputSection","ModalColumnInputSection","ReactionCompoundCard","coefficientInput","setCoefficientInput","ReactionCompoundCardWrapper","ReactionCompoundList","reactionCompounds","compoundType","updatedReactionCompound","Equation","components","parenthesisStack","parenthesis","currentStack","level","operation","code","numerator","denominator","elements","base","power","component","SymbolComponent","separatedTerms","split","term","subindex","Parenthesis","elem","Division","DivisionWrapper","Power","PowerWrapper","Subindex","SubindexWrapper","GreekAlpha","GreekBeta","GreekMu","SymbolInfinity","ReactionEquation","keyCompoundSymbol","EquationWrapper","SCI_REGEX","ReactionParamInputCard","paramSymbol","units","updateValue","valueInput","setValueInput","ParamInputWrapper","ParamInputInner","filtered","el","indexOf","join","validString","match","ReactionKineticParameters","updateKineticConstant","tokenizedMuUnits","tokenizedKUnits","globalOrder","reduce","accumulator","tokenizedActivationEnergyUnits","KineticParamsWrapper","param","serializeKineticEquation","equationTokens","addArrheniusExponential","addHyperbolicTerm","addReactantWithExponent","addProductWithExponent","ReactionEditModal","rea","modalReaction","setModalReaction","scrollRef","selectReactantIndex","setSelectReactantIndex","selectProductIndex","setSelectProductIndex","reactantOptions","productOptions","getCompoundKey","deletedCompound","selectReactantInitialValue","selectProductInitialValue","SelectField","CompoundInputWrapper","AddCompound","CompoundInputInner","ReactionList","editedReactionId","setEditedReactionId","editedReaction","ReactionsPage","DISTANCE_FROM_CORNER","drawPlot","canvas","data","colors","context","getContext","clearRect","width","height","lineWidth","yAxisTicks","getTicksYAxis","drawVerticalAxis","ticks","drawHorizontalAxis","drawPlotCurve","effectiveHeight","totalTicks","tickDistance","yPosition","beginPath","strokeStyle","moveTo","lineTo","stroke","font","fillStyle","textAlign","fillText","formatTickValue","params","maxTimeValue","x","maxYAxisValue","plotAreaWidth","plotAreaHeight","j","plotPath","Path2D","points","y","targetTicks","Math","floor","maxValue","maxFunctionalValue","getTickDistance","ceil","maxValuesForEachVariable","max","point","targetTickAmount","powerOfTen","getPowerOfTen","stringValue","toString","toFixed","Plot","canvasRef","innerWidth","canvasWidth","setCanvasWidth","innerHeight","canvasHeight","setCanvasHeight","resizeHandler","Canvas","ref","VariableCheckboxes","selectedVariables","setSelectedVariables","isToggled","Wrapper","CheckboxWrapper","foundIndex","toggleIndex","ColorBadge","CompoundSymbol","includes","span","SidebarOptions","optionsVisible","toggleOptionsVisible","SidebarOptionsWrapper","visible","useGetData","variableData","ResultsPage","setOptionsVisible","selectedCompound","compoundData","OptionsButton","Routes","path","exact","to","pathname","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.13dd9dab.chunk.js","sourcesContent":["export const loadFromKey = (key: string) => {\n  try {\n    const serializedSlice = localStorage.getItem(key)\n    if (serializedSlice === null) {\n      return undefined\n    }\n    return JSON.parse(serializedSlice)\n  } catch (err) {\n    return undefined\n  }\n}\n\nexport const saveToKey = <T extends unknown>(state: T, key: string) => {\n  try {\n    const serializedSlice = JSON.stringify(state)\n    localStorage.setItem(key, serializedSlice)\n  } catch (error) {\n    console.error(error)\n  }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { loadFromKey } from \"../helpers/localStorage\"\n\ntype CompoundsState = Compound[]\nexport const STORAGE_KEY = \"batch-simulator:compounds\"\nconst initialState: CompoundsState = loadFromKey(STORAGE_KEY) || []\n\ntype AddPayload = Compound\ntype UpdatePayload = { id: string; compound: Compound }\ntype RemovePayload = { id: string }\n\nexport const compoundsSlice = createSlice({\n  name: \"compounds\",\n  initialState,\n  reducers: {\n    add: (state, action: PayloadAction<AddPayload>) => {\n      return [...state, action.payload]\n    },\n\n    update: (state, action: PayloadAction<UpdatePayload>) => {\n      const index = state.findIndex((c) => c.id === action.payload.id)\n      if (index === -1) return state\n      state[index] = action.payload.compound\n    },\n\n    remove: (state, action: PayloadAction<RemovePayload>) => {\n      const index = state.findIndex((c) => c.id === action.payload.id)\n      if (index === -1) return state\n      return [...state.slice(0, index), ...state.slice(index + 1, state.length)]\n    },\n\n    reset: () => {\n      return []\n    },\n  },\n})\n\nexport const { add, update, remove, reset } = compoundsSlice.actions\n\nexport default compoundsSlice.reducer\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { loadFromKey } from \"../helpers/localStorage\"\n\ntype ReactionsState = Reaction[]\nexport const STORAGE_KEY = \"batch-simulator:reactions\"\nconst initialState: ReactionsState = loadFromKey(STORAGE_KEY) || []\n\ntype AddPayload = Reaction\ntype UpdatePayload = { id: string; reaction: Reaction }\ntype RemovePayload = { id: string }\ntype RemoveCompoundPayload = { id: string }\n\nexport const reactionsSlice = createSlice({\n  name: \"reactions\",\n  initialState,\n  reducers: {\n    reset: (state) => {\n      return []\n    },\n\n    add: (state, action: PayloadAction<AddPayload>) => {\n      return [...state, action.payload]\n    },\n\n    update: (state, action: PayloadAction<UpdatePayload>) => {\n      const index = state.findIndex((r) => r.id === action.payload.id)\n      if (index === -1) return state\n      state[index] = action.payload.reaction\n    },\n\n    remove: (state, action: PayloadAction<RemovePayload>) => {\n      const index = state.findIndex((r) => r.id === action.payload.id)\n      if (index === -1) return state\n      return [...state.slice(0, index), ...state.slice(index + 1, state.length)]\n    },\n\n    removeCompound: (state, action: PayloadAction<RemoveCompoundPayload>) => {\n      /**\n       * Remove from reactions that have this compound\n       */\n      const compoundId = action.payload.id\n      state.forEach((reaction: Reaction) => {\n        reaction.reactants = reaction.reactants.filter(\n          (reactionCompound: ReactionCompound) =>\n            reactionCompound.compoundId !== compoundId\n        )\n\n        reaction.products = reaction.products.filter(\n          (reactionCompound: ReactionCompound) =>\n            reactionCompound.compoundId !== compoundId\n        )\n\n        if (reaction.keyCompound === compoundId) {\n          reaction.keyCompound = undefined\n        }\n      })\n\n      return state\n    },\n  },\n})\n\nexport const { reset, add, update, remove, removeCompound } =\n  reactionsSlice.actions\n\nexport default reactionsSlice.reducer\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { loadFromKey } from \"../helpers/localStorage\"\n\ntype SettingsState = Settings\nexport const STORAGE_KEY = \"batch-simulator:settings\"\n\nconst initialState: SettingsState = loadFromKey(STORAGE_KEY) || {\n  // Reaction times\n  reactionTime: 30,\n  deadTime: 30,\n  timeStep: 0.1,\n\n  // Units\n  timeUnits: 0,\n  volumeUnits: 0,\n  molarUnits: 0,\n  massUnits: 0,\n  temperatureUnits: 0,\n  energyUnits: 0,\n\n  // Heat Exchange\n  isothermal: true,\n  initialTemperature: 300,\n}\n\ntype SaveFieldAction = PayloadAction<{ field: string; value: string | number }>\ntype SaveAction = PayloadAction<Settings>\n\nexport const settingsSlice = createSlice({\n  name: \"settings\",\n  initialState,\n  reducers: {\n    reset: () => {\n      return initialState\n    },\n\n    save: (state, action: SaveAction) => {\n      return action.payload\n    },\n\n    saveField: (state, action: SaveFieldAction) => {\n      return {\n        ...state,\n        [action.payload.field]: action.payload.value,\n      }\n    },\n  },\n})\n\nexport const { reset, save, saveField } = settingsSlice.actions\n\nexport default settingsSlice.reducer\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\n\ntype SimulationResultsState = SimulationResults\nconst initialState: SimulationResultsState = []\n\ntype SaveAction = PayloadAction<SimulationResultsState>\n\nexport const simulationResultsSlice = createSlice({\n  name: \"simulationResults\",\n  initialState,\n  reducers: {\n    save: (state, action: SaveAction) => {\n      return action.payload\n    },\n  },\n})\n\nexport const { save } = simulationResultsSlice.actions\n\nexport default simulationResultsSlice.reducer\n","import { configureStore } from \"@reduxjs/toolkit\"\nimport compoundsReducer from \"./features/compoundsSlice\"\nimport reactionsReducer from \"./features/reactionsSlice\"\nimport settingsReducer from \"./features/settingsSlice\"\nimport simulationResultsReducer from \"./features/simulationResultsSlice\"\n\nconst store = configureStore({\n  reducer: {\n    compounds: compoundsReducer,\n    reactions: reactionsReducer,\n    settings: settingsReducer,\n    simulationResults: simulationResultsReducer,\n  },\n})\n\nexport default store\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n","import { createGlobalStyle } from \"styled-components\"\n\nconst GlobalStyles = createGlobalStyle`\n  :root {\n    --color-primary-darkest: hsl(213,48%,15%);\n    --color-primary-darker: hsl(213,48%,30%);\n    --color-primary-dark: hsl(213,48%,50%);\n    --color-primary-normal: hsl(213,48%,70%);\n    --color-primary-light: hsl(213,48%,85%);\n    --color-primary-lighter: hsl(213,48%,95%);\n\n    --color-triadic-green-darker: hsl(93,40%,30%);\n    --color-triadic-green-dark: hsl(93,40%,45%);\n    --color-triadic-green-normal: hsl(93,40%,70%);\n    --color-triadic-green-light: hsl(93,40%,85%);\n    --color-triadic-green-lighter: hsl(93,40%,95%);\n\n    --color-triadic-red-darker: hsl(333,48%,30%);\n    --color-triadic-red-dark: hsl(333,48%,45%);\n    --color-triadic-red-normal: hsl(333,48%,70%);\n    --color-triadic-red-light: hsl(333,48%,85%);\n    --color-triadic-red-lighter: hsl(333,48%,95%);\n\n    --color-grey-darker: hsl(213, 20%, 15%);\n    --color-grey-dark: hsl(213, 20%, 30%);\n    --color-grey-normal: hsl(213, 20%, 45%);\n    --color-grey-light: hsl(213, 20%, 70%);\n    --color-grey-lighter: hsl(213, 20%, 85%);\n    --color-grey-lightest: hsl(213, 20%, 95%);\n  }\n  \n  body {\n    margin: 0;\n    background-color: var(--color-grey-lighter);\n    font-family: 'Mulish', sans-serif;\n\n    @media (max-width: 800px) {\n      margin-top: 0;\n    }\n  }\n\n  a, button {\n    cursor: pointer;\n  }\n\n  a, button, input {\n    transition: all 0.15s ease-in-out;\n  }\n\n  /* Scrollbar */\n  /* Width */\n  ::-webkit-scrollbar {\n    opacity: 0;\n    width: 5px;\n  }\n\n  /* Track */\n  ::-webkit-scrollbar-track {\n    background: var(--color-grey-lighter); \n  }\n  \n  /* Handle */\n  ::-webkit-scrollbar-thumb {\n    opacity: 0;\n    border-radius: 10px;\n  }\n\n  /* Handle on hover */\n  ::-webkit-scrollbar-thumb:hover {\n    opacity: 0;\n  }\n\n  @keyframes slide-in {\n    from {\n      opacity: 0;\n      transform: translateY(-20px);\n    }\n\n    to {\n      opacity: 1;\n      transform: translateY(0px);\n    }\n  }\n\n  @keyframes slide-out {\n    from {\n      opacity: 1;\n      transform: translateY(0px);\n    }\n    \n    to {\n      opacity: 0;\n      transform: translateY(-20px);\n    }\n  }\n`\n\nexport default GlobalStyles\n","import styled from \"styled-components\"\n\ninterface IButton {\n  color?: string\n  buttonStyle?: string\n}\n\nconst Button = styled.button<IButton>`\n  align-items: center;\n  border-radius: 5px;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  font-size: 1.1rem;\n  justify-content: space-between;\n  padding: 5px 10px;\n  text-decoration: none;\n\n  ${(props) => colorsBase(props.color)}\n\n  &:hover {\n    ${(props) => colorsHover(props.color)}\n  }\n\n  /* Any additional custom styles */\n  ${(props) => props.buttonStyle ?? \"\"}\n`\n\nexport default Button\n\nconst colorsBase = (color?: string) => {\n  switch (color) {\n    case \"red\":\n      return `\n        background-color: var(--color-triadic-red-dark);\n        color: var(--color-grey-lightest);\n      `\n    case \"green\":\n      return `\n        background-color: var(--color-triadic-green-dark);\n        color: var(--color-grey-lightest);\n      `\n    case \"grey\":\n      return `\n        background-color: var(--color-grey-dark);\n        color: var(--color-grey-lightest);\n      `\n    default:\n      return `\n        background-color: var(--color-primary-dark);\n        color: var(--color-grey-lightest);\n      `\n  }\n}\n\nconst colorsHover = (color?: string) => {\n  switch (color) {\n    case \"red\":\n      return `\n        background-color: var(--color-triadic-red-darker);\n      `\n    case \"green\":\n      return `\n        background-color: var(--color-triadic-green-darker);\n      `\n    case \"grey\":\n      return `\n        background-color: var(--color-grey-darker);\n      `\n    default:\n      return `\n        background-color: var(--color-primary-darker);\n      `\n  }\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\"\nimport type { RootState, AppDispatch } from \"../store\"\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { useEffect } from \"react\"\nimport { useAppDispatch, useAppSelector } from \"./useStore\"\nimport { reset, save, saveField } from \"../features/settingsSlice\"\nimport { saveToKey } from \"../helpers/localStorage\"\n\n/* Constants */\nimport { STORAGE_KEY } from \"../features/settingsSlice\"\n\nconst useSettings = () => {\n  const dispatch = useAppDispatch()\n  const settings = useAppSelector((state) => state.settings)\n\n  useEffect(() => {\n    /* Save to localStorage upon changes to state */\n    saveToKey(settings, STORAGE_KEY)\n  }, [settings])\n\n  return {\n    settings,\n\n    resetSettings: (): void => {\n      dispatch(reset())\n    },\n\n    saveSettings: (newSettings: Settings): void => {\n      dispatch(save(newSettings))\n    },\n\n    saveField: (field: string, value: string | number): void => {\n      dispatch(saveField({ field, value }))\n    },\n  }\n}\n\nexport default useSettings\n","export const TokenTypes: Record<string, TokenType> = {\n  Parameter: \"parameter\",\n  Variable: \"variable\",\n  Operator: \"operator\",\n  LeftParenthesis: \"left-parenthesis\",\n  RightParenthesis: \"right-parenthesis\",\n}\n","export const CompoundTypes: Record<string, CompoundType> = {\n  Reactant: 0,\n  Product: 1,\n}\n\nexport const KineticModels: Record<string, KineticModel> = {\n  simple: 0,\n  hyperbolic: 1,\n  autocatalytic: 2,\n}\n","import randomstring from \"randomstring\"\nimport { useEffect } from \"react\"\nimport { useAppDispatch, useAppSelector } from \"./useStore\"\nimport {\n  add,\n  reset,\n  update,\n  remove,\n  removeCompound,\n} from \"../features/reactionsSlice\"\nimport { STORAGE_KEY } from \"../features/reactionsSlice\"\nimport { saveToKey } from \"../helpers/localStorage\"\nimport { TokenTypes } from \"../helpers/tokenTypes\"\nimport { KineticModels } from \"../helpers/reactionTypes\"\n\nconst useReactions = () => {\n  const dispatch = useAppDispatch()\n  const reactions = useAppSelector((state) => state.reactions)\n\n  useEffect(() => {\n    /* Save to localStorage upon changes to state */\n    saveToKey(reactions, STORAGE_KEY)\n  }, [reactions])\n\n  return {\n    reactions,\n\n    resetReactions: (): void => {\n      dispatch(reset())\n    },\n\n    addReaction: (): void => {\n      const newReaction = {\n        id: randomstring.generate(8),\n        name: \"\",\n        reactants: [],\n        products: [],\n        kineticModel: KineticModels.simple,\n        kineticConstants: {\n          \"k_\\\\inf\": \"1000000\", // Pre exponential term for Arrhenius\n          E_A: \"30000\", // Arrhenius activation energy\n        },\n        kineticEquation: [\n          { type: TokenTypes.Parameter, value: \"<k_\\\\inf>\" },\n          { type: TokenTypes.Operator, value: \"*\" },\n          { type: TokenTypes.Parameter, value: \"e\" },\n          { type: TokenTypes.Operator, value: \"^\" },\n          { type: TokenTypes.LeftParenthesis, value: \"(\" },\n          { type: TokenTypes.LeftParenthesis, value: \"(\" },\n          { type: TokenTypes.Operator, value: \"-\" },\n          { type: TokenTypes.Parameter, value: \"<E_A>\" },\n          { type: TokenTypes.RightParenthesis, value: \")\" },\n          { type: TokenTypes.Operator, value: \"/\" },\n          { type: TokenTypes.LeftParenthesis, value: \"(\" },\n          { type: TokenTypes.Parameter, value: \"<R>\" },\n          { type: TokenTypes.Operator, value: \"*\" },\n          { type: TokenTypes.Variable, value: \"{T}\" },\n          { type: TokenTypes.RightParenthesis, value: \")\" },\n          { type: TokenTypes.RightParenthesis, value: \")\" },\n        ],\n      }\n      dispatch(add(newReaction))\n    },\n\n    updateReaction: (id: string, updatedReaction: Reaction): void => {\n      dispatch(update({ id, reaction: updatedReaction }))\n    },\n\n    removeCompoundFromReactions: (compoundId: string): void => {\n      dispatch(removeCompound({ id: compoundId }))\n    },\n\n    removeReaction: (id: string): void => {\n      dispatch(remove({ id }))\n    },\n  }\n}\n\nexport default useReactions\n","export const COMPOUND_COLORS_CODES = [\n  \"blue1\",\n  \"pink3\",\n  \"yellow\",\n  \"skyBlue2\",\n  \"red2\",\n  \"green1\",\n  \"skyBlue1\",\n  \"orange\",\n  \"violet1\",\n  \"pink1\",\n  \"lime\",\n  \"waterGreen2\",\n  \"red1\",\n  \"blue2\",\n  \"green2\",\n  \"pink2\",\n  \"waterGreen1\",\n  \"violet2\",\n]\n\nexport const COMPOUND_COLORS = {\n  orange: \"hsl(30, 80%, 65%)\",\n  yellow: \"hsl(50, 80%, 65%)\",\n  lime: \"hsl(70, 80%, 65%)\",\n  green1: \"hsl(90, 80%, 65%)\",\n  green2: \"hsl(110, 80%, 65%)\",\n  waterGreen1: \"hsl(130, 80%, 65%)\",\n  waterGreen2: \"hsl(150, 80%, 65%)\",\n  skyBlue1: \"hsl(170, 80%, 65%)\",\n  skyBlue2: \"hsl(190, 80%, 65%)\",\n  blue1: \"hsl(210, 80%, 65%)\",\n  blue2: \"hsl(230, 80%, 65%)\",\n  violet1: \"hsl(250, 80%, 65%)\",\n  violet2: \"hsl(270, 80%, 65%)\",\n  pink1: \"hsl(290, 80%, 65%)\",\n  pink2: \"hsl(310, 80%, 65%)\",\n  pink3: \"hsl(330, 80%, 65%)\",\n  red1: \"hsl(350, 80%, 65%)\",\n  red2: \"hsl(10, 80%, 65%)\",\n}\n","import randomstring from \"randomstring\"\nimport { useEffect } from \"react\"\nimport { useAppDispatch, useAppSelector } from \"./useStore\"\nimport { add, update, remove, reset } from \"../features/compoundsSlice\"\nimport useReactions from \"./useReactions\"\nimport { saveToKey } from \"../helpers/localStorage\"\n\n/* Constants */\nimport { COMPOUND_COLORS_CODES } from \"../constants/compoundColors\"\nimport { STORAGE_KEY } from \"../features/compoundsSlice\"\n\ninterface UsedColors {\n  [key: string]: boolean\n}\n\nconst useCompounds = () => {\n  const dispatch = useAppDispatch()\n  const compounds = useAppSelector((state) => state.compounds)\n  const { resetReactions, removeCompoundFromReactions } = useReactions()\n\n  useEffect(() => {\n    /* Save to localStorage upon changes to state */\n    saveToKey(compounds, STORAGE_KEY)\n  }, [compounds])\n\n  const unusedColor = () => {\n    const colorKeys = COMPOUND_COLORS_CODES\n\n    // Initialize object to keep track of used colors\n    let usedColors: UsedColors = {}\n    colorKeys.forEach((key: string) => (usedColors[key] = false))\n\n    // Find currently used colors\n    compounds.forEach((compound) => (usedColors[compound.color] = true))\n\n    // Find the first unused color\n    let k = 0,\n      foundColor\n    while (k < colorKeys.length && !foundColor) {\n      if (!usedColors[colorKeys[k]]) foundColor = colorKeys[k]\n      k++\n    }\n\n    return foundColor || \"blue1\"\n  }\n\n  return {\n    compounds,\n\n    addCompound: (): void => {\n      const newCompound = {\n        id: randomstring.generate(8),\n        color: unusedColor(),\n        concentration: 0,\n        molecularWeight: 0,\n        symbol: \"A\",\n        name: \"\",\n      }\n      dispatch(add(newCompound))\n    },\n\n    findCompound: (id?: string): Compound | undefined => {\n      return compounds.find((c) => c.id === id)\n    },\n\n    updateCompound: (id: string, updatedCompound: Compound): void => {\n      dispatch(update({ id, compound: updatedCompound }))\n    },\n\n    removeCompound: (id: string): void => {\n      removeCompoundFromReactions(id)\n      dispatch(remove({ id }))\n    },\n\n    removeAllCompounds: (): void => {\n      resetReactions()\n      dispatch(reset())\n    },\n  }\n}\n\nexport default useCompounds\n","import { useAppDispatch, useAppSelector } from \"./useStore\"\nimport { save } from \"../features/simulationResultsSlice\"\n\nconst useSimulationResults = () => {\n  const dispatch = useAppDispatch()\n  const simulationResults = useAppSelector((state) => state.simulationResults)\n\n  return {\n    simulationResults,\n\n    saveSimulationResults: (newSimulationResults: SimulationResults): void => {\n      dispatch(save(newSimulationResults))\n    },\n  }\n}\n\nexport default useSimulationResults\n","export const temperatureUnits: TemperatureUnits = [\"K\", \"R\", \"°C\", \"°F\"]\nexport const timeUnits: TimeUnits = [\"ms\", \"s\", \"min\", \"h\"]\nexport const massUnits: MassUnits = [\"mg\", \"g\", \"kg\", \"lb\"]\nexport const molarUnits: MolarUnits = [\"mol\", \"kmol\", \"lbmol\"]\nexport const volumeUnits: VolumeUnits = [\"L\", \"m3\", \"cm3\"]\nexport const energyUnits: EnergyUnits = [\"cal\", \"kcal\", \"J\", \"kJ\"]\n\n/**\n * Value getters\n * @param index\n * @returns Units value as string\n */\nexport const timeUnitsValue = (index: number) => {\n  return timeUnits[index]\n}\n\nexport const volumeUnitsValue = (index: number) => {\n  return volumeUnits[index]\n}\n\nexport const massUnitsValue = (index: number) => {\n  return massUnits[index]\n}\n\nexport const molarUnitsValue = (index: number) => {\n  return molarUnits[index]\n}\n\nexport const temperatureUnitsValue = (index: number) => {\n  return temperatureUnits[index]\n}\n\nexport const energyUnitsValue = (index: number) => {\n  return energyUnits[index]\n}\n\n/**\n * Options mapping for selects\n */\nconst mapUnitOptions = (arr: string[]) => {\n  return arr.map((unit, index) => ({\n    value: index,\n    displayText: unit,\n    collapsedDisplayText: unit,\n  }))\n}\n\nexport const timeUnitsOptions = mapUnitOptions(timeUnits)\nexport const massUnitsOptions = mapUnitOptions(massUnits)\nexport const molarUnitsOptions = mapUnitOptions(molarUnits)\nexport const volumeUnitsOptions = mapUnitOptions(volumeUnits)\nexport const temperatureUnitsOptions = mapUnitOptions(temperatureUnits)\nexport const energyUnitsOptions = mapUnitOptions(energyUnits)\n","import useSettings from \"./useSettings\"\nimport {\n  timeUnitsValue,\n  volumeUnitsValue,\n  massUnitsValue,\n  molarUnitsValue,\n  temperatureUnitsValue,\n  energyUnitsValue,\n} from \"../helpers/units\"\n\n/**\n * Returns a function that can be called with a math or physical constant [string] as an argument.\n * For the latter, also handles unit conversions based on app settings.\n *\n * It's important to define a standard set of base units. The chosen ones are:\n *  - K\n *  - s\n *  - kg\n *  - mol\n *  - L\n *  - J\n */\n\nconst FACTORS: Factors = {\n  energy: {\n    J: 1,\n    kJ: 1 / 1000,\n    cal: 0.239006,\n    kcal: 0.239006 / 1000,\n  },\n  mass: {\n    kg: 1,\n    g: 1 / 1000,\n    mg: 1 / 1000000,\n    lb: 2.20462,\n  },\n  molar: {\n    mol: 1,\n    kmol: 1 / 1000,\n    lbmol: 0.00220462,\n  },\n  time: {\n    s: 1,\n    min: 1 / 60,\n    h: 1 / (60 * 60),\n    ms: 1000,\n  },\n  temperature: {\n    K: 1,\n    R: 1.8,\n    \"°C\": 1,\n    \"°F\": 1.8,\n  },\n  volume: {\n    L: 1,\n    m3: 1 / 1000,\n    cm3: 1000,\n  },\n}\n\nconst useMathConstants = () => {\n  const { settings } = useSettings()\n  const {\n    energyUnits: energyUnitsIndex,\n    massUnits: massUnitsIndex,\n    molarUnits: molarUnitsIndex,\n    temperatureUnits: temperatureUnitsIndex,\n    timeUnits: timeUnitsIndex,\n    volumeUnits: volumeUnitsIndex,\n  } = settings\n\n  /**\n   * Factor getters from factors object\n   */\n  const getEnergyFactor = () => {\n    const key = energyUnitsValue(energyUnitsIndex)\n    return FACTORS.energy[key]\n  }\n  const getMassFactor = () => {\n    const key = massUnitsValue(massUnitsIndex)\n    return FACTORS.mass[key]\n  }\n  const getMolarFactor = () => {\n    const key = molarUnitsValue(molarUnitsIndex)\n    return FACTORS.molar[key]\n  }\n  const getTemperatureFactor = () => {\n    const key = temperatureUnitsValue(temperatureUnitsIndex)\n    return FACTORS.temperature[key]\n  }\n  const getTimeFactor = () => {\n    const key = timeUnitsValue(timeUnitsIndex)\n    return FACTORS.time[key]\n  }\n  const getVolumeFactor = () => {\n    const key = volumeUnitsValue(volumeUnitsIndex)\n    return FACTORS.volume[key]\n  }\n\n  /**\n   * R - Gas constant\n   * Base units: J / (mol * K)\n   ********************************/\n  const R = () => {\n    const base = 8.314\n    return (\n      (base * getEnergyFactor()) / getTemperatureFactor() / getMolarFactor()\n    )\n  }\n\n  /**\n   * e - Euler's constant\n   * Base units: -\n   ********************************/\n  const e = () => {\n    return 2.7182818\n  }\n\n  /*********************************\n   * *******************************\n   * Mapping of all constants\n   * *******************************\n   ********************************/\n  const CONSTANTS: Record<MathConstant, () => number> = {\n    R,\n    e,\n  }\n\n  return (key: keyof typeof CONSTANTS) => {\n    return CONSTANTS[key].call(null)\n  }\n}\n\nexport default useMathConstants\n","import { TokenTypes } from \"./tokenTypes\"\n\n/**\n * Equation tokenization\n * https://blog.shalvah.me/posts/how-to-build-a-math-expression-tokenizer-using-javascript-or-any-other-language\n * https://blog.shalvah.me/posts/parsing-math-expressions-with-javascript\n */\n\nexport const tokenizeEquation = (equation: string): Token[] => {\n  const tokensArray: Token[] = []\n\n  // Remove spaces, they don't matter\n  equation.replace(/\\s+/g, \"\")\n\n  // Convert to array of characters\n  const charsArray = equation.split(\"\")\n\n  // Define buffers\n  let parameterBuffer: string[] = []\n  let variableBuffer: string[] = []\n\n  /**\n   * Buffer handling\n   */\n  const emptyParameterBuffer = () => {\n    // Push new parameter to the tokens array\n    const newParam = parameterBuffer.join(\"\")\n    tokensArray.push({ type: TokenTypes.Parameter, value: newParam })\n\n    // Empty parameter buffer\n    parameterBuffer = []\n  }\n\n  const emptyVariableBuffer = () => {\n    // Push new variable to the tokens array\n    const newVar = variableBuffer.join(\"\")\n    tokensArray.push({ type: TokenTypes.Variable, value: newVar })\n\n    // Empty variable buffer\n    variableBuffer = []\n  }\n\n  /**\n   * Array traversal\n   * This is the core of the tokenization function\n   *  */\n  charsArray.forEach((char) => {\n    /**\n     * Parameters are always contained in <>, so if the parameterBuffer\n     * isn't empty, you simply keep pushing to it.\n     *  */\n    if (parameterBuffer.length !== 0) {\n      if (isParameterEnd(char)) {\n        parameterBuffer.push(char)\n        emptyParameterBuffer()\n      } else {\n        parameterBuffer.push(char)\n      }\n    }\n    //\n    /**\n     * Variables are always contained in {}. Treatment is exactly the same\n     * as with parameters.\n     */\n    else if (variableBuffer.length !== 0) {\n      if (isVariableEnd(char)) {\n        variableBuffer.push(char)\n        emptyVariableBuffer()\n      } else {\n        variableBuffer.push(char)\n      }\n    }\n    //\n    /**\n     * Check if variable start or parameter start\n     */\n    else if (isVariableStart(char)) {\n      variableBuffer.push(char)\n    } else if (isParameterStart(char)) {\n      parameterBuffer.push(char)\n    }\n    //\n    /**\n     * Only operators and parenthesis remain, so:\n     */\n    else if (isOperator(char)) {\n      tokensArray.push({ type: TokenTypes.Operator, value: char })\n    } else if (isLeftParenthesis(char)) {\n      tokensArray.push({ type: TokenTypes.LeftParenthesis, value: char })\n    } else if (isRightParenthesis(char)) {\n      tokensArray.push({ type: TokenTypes.RightParenthesis, value: char })\n    }\n  })\n\n  return tokensArray\n}\n\nexport const joinTokens = (tokens: Token[]) => {\n  return tokens.map(({ value }) => value).join(\"\")\n}\n\n/**\n * Token class\n */\nconst assoc = {\n  \"^\": \"right\",\n  \"*\": \"left\",\n  \"/\": \"left\",\n  \"+\": \"left\",\n  \"-\": \"left\",\n}\n\nconst prec = {\n  \"^\": 4,\n  \"*\": 3,\n  \"/\": 3,\n  \"+\": 2,\n  \"-\": 2,\n}\n\nexport const precedence = (token: Token) => {\n  return prec[token.value as keyof typeof prec] || 1\n}\n\nexport const associativity = (token: Token) => {\n  return assoc[token.value as keyof typeof assoc] || \"left\"\n}\n\n/**\n * Recognition functions\n *  */\n\n// const isDigit = (char: string): boolean => {\n//   return /\\d/.test(char)\n// }\n// const isLetter = (char: string): boolean => {\n//   return /[a-z]/i.test(char)\n// }\nconst isOperator = (char: string): boolean => {\n  return /\\+|-|\\*|\\/|\\^/.test(char)\n}\nconst isLeftParenthesis = (char: string): boolean => {\n  return char === \"(\"\n}\nconst isRightParenthesis = (char: string): boolean => {\n  return char === \")\"\n}\nconst isParameterStart = (char: string): boolean => {\n  return char === \"<\"\n}\nconst isParameterEnd = (char: string): boolean => {\n  return char === \">\"\n}\nconst isVariableStart = (char: string): boolean => {\n  return char === \"{\"\n}\nconst isVariableEnd = (char: string): boolean => {\n  return char === \"}\"\n}\n","import { associativity, precedence } from \"./tokenization\"\nimport { TokenTypes } from \"./tokenTypes\"\n\nexport const parseEquation = (tokenizedEquation: Token[]): Token[] => {\n  /**\n   * Note: this assumes that the tokenized expression is valid!!\n   * Returns an RPN-ordered version of the tokenized expression\n   * (Reverse Polish Notation, or Infix Notation)\n   *\n   * Based on: https://blog.shalvah.me/posts/parsing-math-expressions-with-javascript\n   */\n\n  const tokens = replaceSigns(tokenizedEquation)\n\n  const outputQueue: Token[] = []\n  const operationStack: Token[] = []\n\n  const peek = <T extends unknown>(array: Array<T>): T => {\n    return array.slice(-1)[0]\n  }\n\n  tokens.forEach((token: Token) => {\n    // Push parameters and variables to output queue\n    if (\n      token.type === TokenTypes.Parameter ||\n      token.type === TokenTypes.Variable\n    ) {\n      outputQueue.push(token)\n    }\n\n    // Functions are not contemplated in this app (for now) ---------------\n\n    // If token is an operator, things get a little more complicated:\n    else if (token.type === TokenTypes.Operator) {\n      while (\n        peek(operationStack) &&\n        peek(operationStack).type === TokenTypes.Operator &&\n        ((associativity(token) === \"left\" &&\n          precedence(token) <= precedence(peek(operationStack))) ||\n          (associativity(token) === \"right\" &&\n            precedence(token) < precedence(peek(operationStack))))\n      ) {\n        outputQueue.push(operationStack.pop() as Token)\n      }\n      // At the end of iteration push o1 onto the operator stack\n      operationStack.push(token)\n    }\n\n    // If the token is a left parenthesis (i.e. \"(\"), then push it onto the stack.\n    else if (token.type === TokenTypes.LeftParenthesis) {\n      operationStack.push(token)\n    }\n\n    // If the token is a right parenthesis (i.e. \")\"):\n    else if (token.type === TokenTypes.RightParenthesis) {\n      // Until the token at the top of the stack is a left parenthesis,\n      // pop operators off the stack onto the output queue.\n      while (\n        peek(operationStack) &&\n        peek(operationStack).type !== TokenTypes.LeftParenthesis\n      ) {\n        outputQueue.push(operationStack.pop() as Token)\n      }\n\n      // Pop the left parenthesis from the stack, but not onto the output queue.\n      // (We 'consume' the parenthesis)\n      operationStack.pop()\n    }\n  })\n\n  return outputQueue.concat(operationStack.reverse())\n}\n\nexport const rpnToString = (rpn: Token[]) => {\n  return rpn.map((token) => token.value).join(\" \")\n}\n\n//\n\nconst replaceSigns = (tokenizedEquation: Token[]): Token[] => {\n  // A special case needs to be accounted for:\n  // If the previous element on the serialized equation is a LeftParenthesis, and the current\n  // element is a (+) or a (-), it's a *SIGN* rather than an operation.\n  //\n  // For this reason, we want to update that token, switching it by a number (parameter)\n  // of value 1 or -1, and add a '*' operation.  let i = 0, parenthesisFound: boolean\n\n  let i = 0,\n    parenthesisFound = false\n\n  while (i < tokenizedEquation.length) {\n    if (tokenizedEquation[i].type === TokenTypes.LeftParenthesis) {\n      parenthesisFound = true\n    }\n    //\n    else if (\n      parenthesisFound &&\n      (tokenizedEquation[i].value === \"+\" || tokenizedEquation[i].value === \"-\")\n    ) {\n      // Set sign to a parameter of value 1 or -1\n      tokenizedEquation[i].type = TokenTypes.Parameter\n      if (tokenizedEquation[i].value === \"+\") tokenizedEquation[i].value = 1\n      else tokenizedEquation[i].value = -1\n\n      // Add an operation (multiplication) right after\n      tokenizedEquation = [\n        ...tokenizedEquation.slice(0, i + 1),\n        { type: TokenTypes.Operator, value: \"*\" },\n        ...tokenizedEquation.slice(i + 1, tokenizedEquation.length),\n      ]\n\n      parenthesisFound = false\n    }\n    //\n    else {\n      parenthesisFound = false\n    }\n\n    i++\n  }\n\n  return tokenizedEquation\n}\n","export const reactionHasCompound = (reaction: Reaction, compoundId: string) => {\n  if (reaction.reactants.findIndex((c) => c.compoundId === compoundId))\n    return true\n  if (reaction.products.findIndex((c) => c.compoundId === compoundId))\n    return true\n  return false\n}\n\nexport const getCoefficientForComponent = (\n  reaction: Reaction,\n  compoundId: string\n) => {\n  const baseStoichiometricCoefficient =\n    getStoichiomericCoefficientForKeyCompound(reaction)\n  let coefficient: number = 0\n\n  reaction.reactants.forEach((c) => {\n    if (c.compoundId === compoundId) {\n      coefficient = -baseStoichiometricCoefficient / c.stoichiometricCoefficient\n    }\n  })\n  if (coefficient !== 0) return coefficient\n\n  reaction.products.forEach((c) => {\n    if (c.compoundId === compoundId) {\n      coefficient = baseStoichiometricCoefficient / c.stoichiometricCoefficient\n    }\n  })\n  return coefficient\n}\n\nconst getStoichiomericCoefficientForKeyCompound = (reaction: Reaction) => {\n  const keyCompound = reaction.reactants.find(\n    (c) => c.compoundId === (reaction.keyCompound as string)\n  ) as ReactionCompound\n  return keyCompound.stoichiometricCoefficient\n}\n","import useSettings from \"../hooks/useSettings\"\nimport useCompounds from \"../hooks/useCompounds\"\nimport useReactions from \"../hooks/useReactions\"\nimport useSimulationResults from \"../hooks/useSimulationResults\"\nimport useMathConstants from \"../hooks/useMathConstants\"\n\nimport { parseEquation } from \"../helpers/tokenParser\"\nimport { getCoefficientForComponent } from \"../helpers/reactions\"\nimport { TokenTypes } from \"../helpers/tokenTypes\"\n\nconst useSimulate = () => {\n  const getConstant = useMathConstants()\n  const { compounds } = useCompounds()\n  const { reactions } = useReactions()\n  const { settings } = useSettings()\n  const { saveSimulationResults } = useSimulationResults()\n\n  const parseReactionEquations = (): ParsedReaction[] => {\n    /**\n     * Parsing a reaction entails:\n     *  1) Replacing parameters for their entered values\n     *  2) Modifying the token order to RPN\n     *  3) Merging reactants and products to compounds, which have a symbol\n     *    and a coefficient\n     *\n     *  The reactions are stored in a new object of type ParsedReaction\n     */\n    const parsedReactions: ParsedReaction[] = []\n\n    reactions.forEach((reaction, index) => {\n      const parsedReaction: ParsedReaction = {}\n\n      // 1) Replace parameters for values & strip variables of {} symbols\n      parsedReaction.kineticEquation = parseParametersAndVariables(reaction)\n\n      // 2) Modify token order to RPN\n      parsedReaction.kineticEquation = parseEquation(\n        parsedReaction.kineticEquation\n      )\n\n      // 3) Merge reactants and products\n      parsedReaction.compounds = mergeCompounds(reaction, compounds)\n\n      parsedReactions.push(parsedReaction)\n    })\n\n    return parsedReactions\n  }\n\n  const parseParametersAndVariables = (reaction: Reaction): KineticEquation => {\n    const kineticEquationCopy = JSON.parse(\n      JSON.stringify(reaction.kineticEquation)\n    )\n\n    kineticEquationCopy.forEach((token: Token, index: number) => {\n      if (token.type === TokenTypes.Parameter) {\n        // Replace parameter by numeric value\n        const key = (token.value as string).replace(/<|>/g, \"\")\n        // Param. may be reaction-related, or be a thermodynamic constant\n        if (reaction.kineticConstants[key]) {\n          token.value = parseFloat(reaction.kineticConstants[key])\n        } else {\n          token.value = getConstant(key as MathConstant)\n        }\n      } else if (token.type === TokenTypes.Variable) {\n        // Strip variable of {} symbols\n        token.value = (token.value as string).replace(/{|}/g, \"\")\n      }\n\n      kineticEquationCopy[index] = token\n    })\n\n    return kineticEquationCopy\n  }\n\n  const mergeCompounds = (\n    reaction: Reaction,\n    compounds: Compound[]\n  ): CompoundWithCoefficient[] => {\n    const parsedCompounds: CompoundWithCoefficient[] = []\n\n    reaction.reactants.forEach((reactionCompound: ReactionCompound) => {\n      const compound: CompoundWithCoefficient = Object.assign(\n        {},\n        {\n          compoundId: reactionCompound.compoundId,\n          symbol: `[${\n            compounds.find((c) => c.id === reactionCompound.compoundId)?.symbol\n          }]`,\n          coefficient: getCoefficientForComponent(\n            reaction,\n            reactionCompound.compoundId\n          ),\n        }\n      )\n      parsedCompounds.push(compound)\n    })\n\n    reaction.products.forEach((reactionCompound: ReactionCompound) => {\n      const compound: CompoundWithCoefficient = Object.assign(\n        {},\n        {\n          compoundId: reactionCompound.compoundId,\n          symbol: `[${\n            compounds.find((c) => c.id === reactionCompound.compoundId)?.symbol\n          }]`,\n          coefficient: getCoefficientForComponent(\n            reaction,\n            reactionCompound.compoundId\n          ),\n        }\n      )\n      parsedCompounds.push(compound)\n    })\n\n    return parsedCompounds\n  }\n\n  //\n  //\n  //\n\n  //: SimulationResults => {\n  const simulate = () => {\n    /**\n     * Reaction equations (as tokens) are reordered to RPN notation\n     * and some more magic happens. Check the method\n     *  */\n    const parsedReactions: ParsedReaction[] = parseReactionEquations()\n\n    // Initialize simulation results\n    const initialValues: TimePoint = { t: 0, T: settings.initialTemperature }\n    compounds.forEach((c) => (initialValues[`[${c.symbol}]`] = c.concentration))\n\n    // Start simulation execution\n    const results = executeSimulation(initialValues, parsedReactions, settings)\n\n    saveSimulationResults(results)\n  }\n\n  return { simulate }\n}\n\nexport default useSimulate\n\n/****************************************************************\n *    SIMULATE METHOD                                           *\n *    ---                                                       *\n ****************************************************************/\n\nconst executeSimulation = (\n  resultsInitialValues: TimePoint,\n  parsedReactions: ParsedReaction[],\n  settings: Settings\n) => {\n  const results: SimulationResults = [resultsInitialValues]\n\n  // Define an iterator for time evolution\n  const createSimulationIterator = (endTime = 10, timeStep = 0.1) => {\n    const rangeIterator = {\n      next: function () {\n        let result\n        const currentTime = results[results.length - 1].t\n\n        if (currentTime < endTime) {\n          result = { done: false }\n          explicitEulerStep(parsedReactions, timeStep, results)\n          return result\n        }\n        return { done: true }\n      },\n    }\n\n    return rangeIterator\n  }\n\n  const iterator = createSimulationIterator(\n    settings.reactionTime,\n    settings.timeStep\n  )\n\n  let result = iterator.next()\n  while (!result.done) {\n    result = iterator.next()\n  }\n\n  return results\n}\n\n/**\n * Mutates the results object, pushing the new calculations as TimePoints\n */\nconst explicitEulerStep = (\n  parsedReactions: ParsedReaction[],\n  timeStep: number,\n  results: SimulationResults\n): void => {\n  const oldTimePoint: TimePoint = JSON.parse(\n    JSON.stringify(results[results.length - 1])\n  )\n  // TODO: Conditionally run T equation if not an isothermic system\n  const newTimePoint: TimePoint = { t: 0, T: oldTimePoint.T }\n\n  // Reaction rates can be calculated for each reaction once,\n  // and reused when calculating compound net reaction rates\n  const reactionRates: number[] = parsedReactions.map((parsedReaction) => {\n    return calculateReactionRate(parsedReaction, oldTimePoint)\n  })\n\n  Object.entries(oldTimePoint).forEach(([variable, value]) => {\n    // variable corresponds to \"t\" or a compound symbol in brackets i.e. \"[A]\"\n    //\n    // variable \"t\" has to be treated differently than the others\n    if (variable === \"t\") {\n      newTimePoint.t = value + timeStep\n      return\n    }\n\n    // For other variables, calculate functional value (net rate of change) associated\n    // with the ODE.\n    // It's a summatory of kinetic velocities\n    //\n    // In other words: d[VAR]/dt = rateOfChange\n    const rateOfChange = calculateNetRateOfChange(\n      parsedReactions,\n      reactionRates,\n      variable\n    )\n\n    // In explicit euler, this reaction rate is used with the time step to calculate the next\n    // functional value. This should be generalized (TODO:)\n    //\n    // Also, values should be zero or higher!\n    newTimePoint[variable] = nonNegative(\n      oldTimePoint[variable] + rateOfChange * timeStep\n    )\n  })\n\n  // Finally, push new TimePoint\n  results.push(newTimePoint)\n}\n\nconst calculateNetRateOfChange = (\n  parsedReactions: ParsedReaction[],\n  reactionRates: number[],\n  variable: string\n) => {\n  let reactionRate = 0\n\n  parsedReactions.forEach((reaction: ParsedReaction, index: number) => {\n    const compound = reaction.compounds?.find(\n      (c) => c.symbol === variable\n    ) as CompoundWithCoefficient\n    // If a compound is found, it means the reaction is involved in the\n    // material balance of the species\n    if (compound) {\n      reactionRate += reactionRates[index] * compound.coefficient\n    }\n  })\n\n  return reactionRate\n}\n\nconst calculateReactionRate = (\n  reaction: ParsedReaction,\n  oldTimePoint: TimePoint\n) => {\n  /**\n   * WARNING: By this point, it is assumed that the provided RPN equation is valid.\n   * This has to be ensured with validation prior to execution, or it can lead to failures.\n   */\n\n  let resultStack: number[] = []\n\n  reaction.kineticEquation?.forEach((token: Token) => {\n    // Tokens are already ordered in RPN at this point, so\n    // what we need to do is push values into the stack,\n    // and then perform binary operations\n    if (token.type === TokenTypes.Parameter)\n      resultStack.push(token.value as number)\n    else if (token.type === TokenTypes.Variable) {\n      resultStack.push(oldTimePoint[token.value])\n    } else {\n      // Can only be a binary operator. Parenthesis have been removed in RPN.\n      // Because it is a binary operator, it will always involve the last two\n      // elements added to the stack, so we first have to pop them\n      const b = resultStack.pop() as number\n      const a = resultStack.pop() as number\n\n      switch (token.value) {\n        case \"+\":\n          resultStack.push(a + b)\n          break\n        case \"-\":\n          resultStack.push(a - b)\n          break\n        case \"*\":\n          resultStack.push(a * b)\n          break\n        case \"/\":\n          resultStack.push(a / b)\n          break\n        case \"^\":\n          resultStack.push(a ** b)\n          break\n      }\n    }\n  })\n\n  // After execution, we should be left with only one element in the stack, which\n  // is the computation result\n  return resultStack[0]\n}\n\nconst nonNegative = (value: number) => {\n  if (value < 0) return 0\n  return value\n}\n","import styled from \"styled-components\"\nimport { useHistory } from \"react-router-dom\"\n\n/* Components */\nimport Button from \"./Button\"\nimport { FiMenu, FiSliders, FiPlay } from \"react-icons/fi\"\nimport { BiAtom, BiLineChart } from \"react-icons/bi\"\nimport { AiOutlineExperiment } from \"react-icons/ai\"\n\n/* Hooks */\nimport useSimulate from \"../hooks/useSimulate\"\nimport useSimulationResults from \"../hooks/useSimulationResults\"\nimport { useState } from \"react\"\n\ninterface ISidebarLinkProps {\n  onClick: () => void\n  title: string\n  icon: JSX.Element\n}\n\nconst Sidebar: React.FC = () => {\n  const { simulate } = useSimulate()\n  const { simulationResults } = useSimulationResults()\n  const history = useHistory()\n  const [expanded, setExpanded] = useState<boolean>(false)\n\n  const onSimulate = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.preventDefault()\n    simulate()\n    history.push(\"/results\")\n  }\n\n  const expandMenu = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    setExpanded(!expanded)\n  }\n\n  const navigateTo = (route: string) => {\n    history.push(route)\n    setExpanded(false)\n  }\n\n  const iconProps = {\n    size: 25,\n  }\n\n  return (\n    <SidebarWrapper expanded={expanded}>\n      <nav>\n        <button onClick={expandMenu} id=\"hamburger\">\n          <SidebarLinkWrapper>\n            <IconWrapper>\n              <FiMenu {...iconProps} />\n            </IconWrapper>\n          </SidebarLinkWrapper>\n        </button>\n        <SidebarLink\n          onClick={() => navigateTo(\"/compounds\")}\n          title=\"Compounds\"\n          icon={<BiAtom {...iconProps} />}\n        />\n        <SidebarLink\n          onClick={() => navigateTo(\"/reactions\")}\n          title=\"Reactions\"\n          icon={<AiOutlineExperiment {...iconProps} />}\n        />\n        <SidebarLink\n          onClick={() => navigateTo(\"/settings\")}\n          title=\"Settings\"\n          icon={<FiSliders {...iconProps} />}\n        />\n        {simulationResults && (\n          <SidebarLink\n            onClick={() => navigateTo(\"/results\")}\n            title=\"Results\"\n            icon={<BiLineChart {...iconProps} />}\n          />\n        )}\n        <a href=\"/\" onClick={onSimulate}>\n          <SidebarLinkWrapper>\n            <IconWrapper>\n              <FiPlay {...iconProps} />\n            </IconWrapper>\n            <p>Simulate</p>\n          </SidebarLinkWrapper>\n        </a>\n      </nav>\n    </SidebarWrapper>\n  )\n}\n\nexport default Sidebar\n\nconst SidebarLink: React.FC<ISidebarLinkProps> = (props) => {\n  const { icon, onClick, title } = props\n  return (\n    <Button onClick={onClick}>\n      <SidebarLinkWrapper>\n        <IconWrapper>{icon}</IconWrapper>\n        <p>{title}</p>\n        {/* <FiChevronRight /> */}\n      </SidebarLinkWrapper>\n    </Button>\n  )\n}\n\nconst SidebarLinkWrapper = styled.div`\n  padding: 0.7rem 0.5rem;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n`\n\nconst IconWrapper = styled.div`\n  width: 25px;\n  height: 25px;\n  margin-right: 0.5rem;\n  @media only screen and (max-width: 750px) {\n    margin-right: 0;\n  }\n`\n\ninterface SidebarWrapperProps {\n  expanded: boolean\n}\n\nconst SidebarWrapper = styled.div<SidebarWrapperProps>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 20;\n  height: 100vh;\n  max-width: ${(props) => (props.expanded ? \"270px\" : \"90px\")};\n  @media screen and (max-width: 750px) {\n    height: 80px;\n    width: 100vw;\n    max-width: 100vw;\n    position: fixed;\n  }\n  flex-grow: 0;\n  flex-shrink: 0;\n  transition: all 0.15s linear;\n  background-color: var(--color-grey-normal);\n\n  nav {\n    margin: 1rem;\n    display: flex;\n    flex-direction: column;\n    @media screen and (max-width: 750px) {\n      flex-direction: row;\n      margin: 0 1rem;\n      align-items: center;\n      height: 100%;\n    }\n\n    a,\n    button {\n      align-items: center;\n      background-color: var(--color-grey-normal);\n      border: none;\n      border-radius: 5px;\n      color: var(--color-grey-lightest);\n      display: flex;\n      font-size: 1.2rem;\n      justify-content: space-between;\n      margin-bottom: 10px;\n      padding: 5px 10px;\n      text-decoration: none;\n\n      &:hover {\n        background-color: rgba(255, 255, 255, 0.3);\n      }\n\n      p {\n        margin: 0;\n      }\n\n      @media screen and (max-width: 750px) {\n        margin-bottom: 0;\n\n        p {\n          display: none;\n        }\n      }\n    }\n  }\n\n  @media screen and (max-width: 750px) {\n    #hamburger {\n      display: none;\n    }\n  }\n`\n","import React from \"react\"\nimport styled from \"styled-components\"\n\n/* Components */\nimport Sidebar from \"../components/Sidebar\"\ninterface IProps {\n  children: JSX.Element | JSX.Element[]\n}\n\nconst MainLayout: React.FC<IProps> = (props) => {\n  const { children } = props\n\n  return (\n    <MainLayoutWrapper>\n      <Sidebar />\n      <MainContentWrapper id=\"scroll-target\">\n        <MainContent>{children}</MainContent>\n      </MainContentWrapper>\n    </MainLayoutWrapper>\n  )\n}\n\nexport default MainLayout\n\nconst MainLayoutWrapper = styled.div`\n  height: 100vh;\n`\n\nconst MainContentWrapper = styled.div`\n  background: var(--color-grey-light);\n  flex-grow: 1;\n  height: 100vh;\n  margin-left: 90px;\n  @media screen and (max-width: 750px) {\n    margin-left: 0;\n    padding-top: 80px;\n    height: calc(100vh - 80px);\n  }\n  position: relative;\n  overflow-y: scroll;\n`\nconst MainContent = styled.div`\n  margin: 20px;\n`\n","import { useEffect, useRef, useState } from \"react\"\n\ninterface ISerialization<T> {\n  serialize: (value: T) => string\n  deserialize: (value: string) => T\n}\n\nconst useLocalStorageState = <T extends unknown>(\n  key: string,\n  defaultValue: T | undefined = undefined,\n  options: ISerialization<T> = {\n    serialize: JSON.stringify,\n    deserialize: JSON.parse,\n  }\n) => {\n  const { serialize, deserialize } = options\n\n  /**\n   * The callback in useState is only called for state initialization\n   *  */\n  const [state, setState] = useState<T>((): T => {\n    const valueInLocalStorage = window.localStorage.getItem(key)\n    if (valueInLocalStorage) {\n      return deserialize(valueInLocalStorage)\n    }\n    return typeof defaultValue === \"function\" ? defaultValue() : defaultValue\n  })\n\n  /**\n   * Keep a reference to the old key in localStorage,\n   * to delete it if the key changes\n   */\n  const prevKeyRef = useRef(key)\n\n  useEffect(() => {\n    // Check if key has changed, and remove previous key if necessary\n    const prevKey = prevKeyRef.current\n    if (prevKey !== key) {\n      window.localStorage.removeItem(prevKey)\n      prevKeyRef.current = key\n    }\n\n    // Set item in localStorage\n    window.localStorage.setItem(key, serialize(state))\n  }, [key, serialize, state])\n\n  return [state, setState]\n}\n\nexport default useLocalStorageState\n","import { useEffect } from \"react\"\nimport useLocalStorageState from \"./useLocalStorageState\"\nimport useCompounds from \"./useCompounds\"\nimport useSettings from \"./useSettings\"\n\nconst CURRENT_VERSION = \"1.0.0\"\n\nconst useVersionControl = () => {\n  const [version, setVersion] = useLocalStorageState(\"currentVersion\")\n  const { removeAllCompounds } = useCompounds()\n  const { resetSettings } = useSettings()\n\n  useEffect(() => {\n    if (version === CURRENT_VERSION) return\n\n    setVersion(CURRENT_VERSION)\n    removeAllCompounds()\n    resetSettings()\n    // eslint-disable-next-line\n  }, [])\n}\n\nexport default useVersionControl\n","import styled from \"styled-components\"\n\nconst PageTitle = styled.h2`\n  color: var(--color-grey-lightest);\n  font-size: 20px;\n  margin-top: 0;\n  display: inline-block;\n`\n\nexport default PageTitle\n","import styled from \"styled-components\"\n\nconst CardButton = styled.button`\n  align-items: center;\n  align-self: stretch;\n  background-color: unset;\n  border: none;\n  border-radius: 5px;\n  color: var(--color-grey-normal);\n  cursor: pointer;\n  display: flex;\n  font-size: 1.5em;\n  margin-left: 0.2rem;\n  padding: 0.5rem;\n  transition: all 0.15s ease-in-out;\n  z-index: 2;\n\n  &:hover {\n    background-color: rgba(255, 255, 255, 0.3);\n    color: var(--color-grey-dark);\n  }\n`\n\nexport default CardButton\n","import styled from \"styled-components\"\n\n/* Components */\nimport CardButton from \"../CardButton\"\nimport { FiEdit, FiTrash2 } from \"react-icons/fi\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\ninterface ICompoundCardProps {\n  compound: Compound\n  editCompound: () => void\n  updateCompound: (compound: Compound) => void\n  validateUnicity: (field: string, value: any) => boolean\n  removeCompound: () => void\n}\n\nconst CompoundCard: React.FC<ICompoundCardProps> = (props) => {\n  const { compound, editCompound, removeCompound } = props\n\n  return (\n    <CompoundCardWrapper>\n      <CompoundCardInner>\n        {/* Tile to display symbol */}\n        <CompoundTile color={compound.color as keyof typeof COMPOUND_COLORS}>\n          {compound.symbol}\n        </CompoundTile>\n\n        {/* Button to toggle modal edition */}\n        <CardButton onClick={editCompound}>\n          <FiEdit />\n        </CardButton>\n\n        {/* Button to delete the compound */}\n        <CardButton onClick={removeCompound}>\n          <FiTrash2 />\n        </CardButton>\n      </CompoundCardInner>\n    </CompoundCardWrapper>\n  )\n}\n\nexport default CompoundCard\n\n/**\n * Styled components\n */\n\nconst CompoundCardWrapper = styled.li``\n\nconst CompoundCardInner = styled.div`\n  margin: 5px;\n  padding: 20px;\n  position: relative;\n\n  align-items: center;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: var(--color-grey-lighter);\n  border-radius: 5px;\n  border: 1.5px solid var(--color-grey-lightest);\n  display: flex;\n  color: var(--color-grey-lightest);\n  cursor: pointer;\n  overflow: hidden;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.15);\n    transform: translateY(-2px);\n  }\n\n  button {\n    padding: 0.8rem;\n  }\n`\n\ninterface ICompoundColorBulletProps {\n  color: keyof typeof COMPOUND_COLORS\n}\n\nconst CompoundTile = styled.div<ICompoundColorBulletProps>`\n  background-color: ${(props) => COMPOUND_COLORS[props.color]};\n  border-radius: 5px;\n  border: 1px solid var(--color-grey-normal);\n  box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.15);\n  color: var(--color-grey-dark);\n  font-size: 1.6rem;\n  padding: 0.5rem 0.9rem;\n  margin-right: 1rem;\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport { FiX } from \"react-icons/fi\"\n\n/* Hooks */\nimport { useEffect } from \"react\"\n\nexport interface IClosing {\n  closing?: boolean\n}\n\ntype EditModalProps = IClosing & {\n  setClosing: (closing: boolean) => void\n  handleClose: () => void\n}\n\nconst EditModal: React.FC<EditModalProps> = (props) => {\n  const { children, closing, setClosing, handleClose } = props\n\n  const closeModal = () => {\n    /**\n     * Animate and close modal after slide animation\n     */\n    setClosing(true)\n    setTimeout(() => {\n      handleClose()\n    }, 250)\n  }\n\n  useEffect(() => {\n    if (closing) {\n      closeModal()\n    }\n    // eslint-disable-next-line\n  }, [closing])\n\n  return (\n    <EditModalWrapper closing={closing}>\n      <EditModalInner closing={closing}>\n        <CloseButton onClick={closeModal} closing={closing}>\n          <FiX />\n        </CloseButton>\n        {children}\n      </EditModalInner>\n    </EditModalWrapper>\n  )\n}\n\nexport default EditModal\n\nconst EditModalWrapper = styled.div<IClosing>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  min-height: 100%;\n  background-color: rgba(0, 0, 0, 0.15);\n\n  animation-name: dim-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  /* Override animation upon modal close */\n  ${(props) =>\n    props.closing\n      ? `\n    animation-name: dim-out;\n    animation-timing-function: ease-in-out;\n    animation-duration: 0.25s;\n    animation-iteration-count: 1;\n    animation-fill-mode: forwards;\n  `\n      : \"\"}\n\n  @keyframes dim-in {\n    from {\n      background-color: rgba(0, 0, 0, 0);\n    }\n\n    to {\n      background-color: rgba(0, 0, 0, 0.15);\n    }\n  }\n\n  @keyframes dim-out {\n    from {\n      background-color: rgba(0, 0, 0, 0.15);\n    }\n\n    to {\n      background-color: rgba(0, 0, 0, 0);\n    }\n  }\n`\n\nconst EditModalInner = styled.div<IClosing>`\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: var(--color-grey-lighter);\n  border: 1px solid var(--color-grey-lightest);\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  border-radius: 5px;\n  flex-grow: 1;\n  margin: 10px;\n  padding: 2rem;\n  padding-top: 3.5rem;\n  position: relative;\n  max-width: 700px;\n  max-height: 600px;\n  overflow-y: scroll;\n  overflow-x: hidden;\n  z-index: 3;\n\n  /* Override animation upon modal close */\n  ${(props) =>\n    props.closing\n      ? `\n    animation-name: slide-out;\n    animation-timing-function: ease-in-out;\n    animation-duration: 0.25s;\n    animation-iteration-count: 1;\n    animation-fill-mode: forwards;\n  `\n      : \"\"}\n\n  label {\n    color: var(--color-grey-darker);\n  }\n`\n\nconst CloseButton = styled.button<IClosing>`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n\n  align-items: center;\n  background-color: unset;\n  border: none;\n  border-radius: 5px;\n  display: flex;\n  ${(props) => (props.closing ? \"disabled: true;\" : \"\")}\n  font-size: 1.3rem;\n  padding: 0.5rem;\n  margin-bottom: 1rem;\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`\n","import styled from \"styled-components\"\n\ninterface ErrorProps {\n  big?: boolean\n}\n\nconst Error: React.FC<ErrorProps> = (props) => {\n  const { big, children } = props\n  return (\n    <ErrorWrapper big={big} className=\"error\">\n      {children}\n    </ErrorWrapper>\n  )\n}\n\nconst ErrorWrapper = styled.div<ErrorProps>`\n  position: absolute;\n  ${(props) =>\n    props.big\n      ? `\n    bottom: 0.9rem;\n    right: 1rem;\n  `\n      : `\n    bottom: 0.4rem;\n    right: 0.5rem;\n  `}\n\n  background-color: var(--color-triadic-red-darker);\n  border-radius: 5px;\n  box-shadow: 0px 0px 4px var(--color-triadic-red-darker);\n  color: white;\n  padding: 0.2rem 0.5rem;\n  pointer-events: none;\n  opacity: 0;\n  transform: translateY(105%);\n  z-index: 4;\n`\n\nexport default Error\n","import styled from \"styled-components\"\n\ninterface IInputProps extends React.HTMLProps<HTMLInputElement> {\n  errors?: boolean\n  transparent?: boolean\n}\n\nconst Input = styled.input<IInputProps>`\n  background-color: var(--color-grey-lightest);\n  border: 1px solid var(--color-grey-normal);\n  border-radius: 5px;\n  flex-grow: 1;\n  font-family: \"Mulish\", sans-serif;\n  min-width: 0;\n  width: 0;\n  outline: none;\n  padding: 0.5rem 1rem;\n  color: var(--color-grey-dark);\n\n  &:autofill {\n    background-color: rgba(255, 255, 255, 0.2);\n  }\n\n  &:focus {\n    box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  }\n\n  /**\n   * Remove arrows from number inputs\n   */\n\n  /* Chrome, Safari, Edge, Opera */\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  /* Firefox */\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n\n  /** Overrides */\n  ${(props) =>\n    props.transparent\n      ? `\n      background-color: rgba(255,255,255,0.2);\n      border-color: hsla(213, 20%, 15%, 0.5);\n      color: var(--color-grey-darker);\n\n      &:focus {\n        border-color: var(--color-grey-darker);\n        background-color: rgba(255,255,255,0.5);\n      }\n      `\n      : \"\"}\n  ${(props) =>\n    props.errors\n      ? `\n        border-color: var(--color-triadic-red-darker) !important\n      `\n      : \"\"}\n`\n\nexport default Input\n","import styled from \"styled-components\"\nimport { FiInfo } from \"react-icons/fi\"\ninterface InfoTooltipProps {\n  text: string | JSX.Element\n}\n\nconst InfoTooltip = (props: InfoTooltipProps) => {\n  const { text } = props\n\n  return (\n    <Icon>\n      <FiInfo color=\"hsl(213, 20%, 95%)\" size={16} />\n      <InfoWrapper>\n        <Info>{text}</Info>\n      </InfoWrapper>\n    </Icon>\n  )\n}\n\nexport default InfoTooltip\n\nconst Icon = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 22px;\n  height: 22px;\n  border-radius: 50%;\n  background-color: var(--color-grey-normal);\n  margin-left: 0.5rem;\n  color: var(--color-white);\n  cursor: pointer;\n  position: relative;\n  &:hover > div > div {\n    opacity: 1;\n  }\n`\n\nconst Info = styled.div`\n  position: relative;\n  opacity: 0;\n  transition: opacity 0.15s linear;\n  padding: 1rem;\n  background-color: var(--color-grey-normal);\n  border-radius: 5px;\n  margin-left: 1rem;\n  margin-bottom: 25px;\n  width: max-content;\n  max-width: 180px;\n  font-size: 1rem;\n  color: var(--color-grey-lightest);\n  overflow: visible;\n  filter: drop-shadow(0 1px 2px var(--color-grey-normal));\n  display: flex;\n\n  &:before {\n    position: absolute;\n    right: 50%;\n    bottom: 0;\n    transform: translateY(100%) translateX(50%);\n    content: \"\";\n    width: 0;\n    height: 0;\n    border-left: 8px solid transparent;\n    border-right: 8px solid transparent;\n    border-top: 8px solid var(--color-grey-normal);\n  }\n`\n\nconst InfoWrapper = styled.div`\n  position: absolute;\n  display: flex;\n  right: 18px;\n  transform: translateX(50%) translateY(-50%);\n  pointer-events: none;\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport Error from \"./Error\"\nimport Input from \"./Input\"\nimport InfoTooltip from \"./InfoTooltip\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\ninterface IFieldInputProps {\n  big?: boolean\n  color?: string\n  error?: string\n  fieldName: string\n  label: string\n  type?: string\n  tooltip?: string\n  transparent?: boolean\n  value: any\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst FieldInput: React.FC<IFieldInputProps> = (props) => {\n  const {\n    big,\n    color,\n    error,\n    fieldName,\n    label,\n    type,\n    tooltip,\n    transparent,\n    value,\n    onBlur,\n    onChange,\n  } = props\n\n  const voidFunction = () => {}\n\n  return (\n    <FieldInputWrapper color={color} big={big}>\n      <LabelWrapper>\n        <label htmlFor={fieldName}>{label}</label>\n        {tooltip && <InfoTooltip text={tooltip} />}\n      </LabelWrapper>\n      <Input\n        errors={!!error}\n        name={fieldName}\n        type={type || \"text\"}\n        autoComplete=\"off\"\n        onBlur={onBlur || voidFunction}\n        onChange={onChange}\n        value={value}\n        transparent={transparent}\n      />\n      {error && <Error big={big}>{error}</Error>}\n    </FieldInputWrapper>\n  )\n}\n\ninterface IFieldInputWrapperProps {\n  color?: string\n  big?: boolean\n}\n\nconst FieldInputWrapper = styled.div<IFieldInputWrapperProps>`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 0.5rem;\n  position: relative;\n\n  ${(props) =>\n    props.color\n      ? `\n    background-color: ${\n      COMPOUND_COLORS[props.color as keyof typeof COMPOUND_COLORS]\n    };\n    border-radius: 5px;\n    box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  `\n      : \"\"}\n  ${(props) =>\n    props.big\n      ? `\n    align-items: flex-start;\n    margin-bottom: 1.5rem;\n    padding: 1rem;\n  `\n      : \"\"}\n\n  label {\n    ${(props) => (props.big ? \"font-size: 1.5rem;\" : \"\")}\n    font-weight: 600;\n    color: ${(props) =>\n      props.color ? \"var(--color-grey-darker)\" : \"var(--color-grey-dark)\"};\n  }\n\n  input {\n    ${(props) =>\n      props.big\n        ? `    \n    font-size: 3rem;\n    margin-left: 1rem;\n    width: 0;\n    `\n        : \"font-size: 1rem;\"}\n    width: 300px;\n    align-self: stretch;\n  }\n\n  &:hover > .error {\n    opacity: 1 !important;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-basis: 50%;\n`\n\nexport default FieldInput\n","import styled from \"styled-components\"\nimport Button from \"./Button\"\n\nconst SubmitButton = styled(Button)`\n  align-self: stretch;\n  font-size: 1.2rem;\n  justify-content: center;\n  margin-top: 1.5rem;\n  padding: 0.5rem;\n  width: 100%;\n`\nexport default SubmitButton\n","/**\n * Validates if field is equal to a provided value.\n * */\nexport const validateEqual = (a: unknown, b: unknown) => {\n  if (a === b) return true\n  return false\n}\n\n/**\n * Validates if field is not empty, which equates to\n * not being undefined, null,\n * In the case it is a string, check that it is not empty.\n * In the case of a number, 0 is valid.\n * */\nexport const validateNotEmpty = (value: unknown) => {\n  if (value === \"\") return false\n  if (typeof value === \"number\") return true\n  if (!value) return false\n  return true\n}\n\n/**\n * Validates if field is greater than, only if the value is numeric.\n * Otherwise, returns false.\n * */\nexport const validateGreaterThan = (\n  value: unknown,\n  threshold: number,\n  equal: boolean\n) => {\n  if (typeof value !== \"number\") return false\n  if (value > threshold) return true\n  if (value === threshold && equal) return true\n  return false\n}\n","import styled from \"styled-components\"\nimport { useFormik } from \"formik\"\n\n/* Components */\nimport EditModal from \"../EditModal\"\nimport FieldInput from \"../forms/FieldInput\"\nimport SubmitButton from \"../SubmitButton\"\n\n/* Helpers */\nimport { validateNotEmpty, validateGreaterThan } from \"../../helpers/validators\"\nimport {\n  volumeUnitsValue,\n  massUnitsValue,\n  molarUnitsValue,\n} from \"../../helpers/units\"\n\n/* Hooks */\nimport { useState } from \"react\"\nimport useCompounds from \"../../hooks/useCompounds\"\nimport useSettings from \"../../hooks/useSettings\"\n\ninterface ICompoundEditModalProps {\n  compound: Compound\n  closeModal: () => void\n}\n\nconst CompoundEditModal: React.FC<ICompoundEditModalProps> = (props) => {\n  const { compound, closeModal } = props\n  const { compounds, updateCompound } = useCompounds()\n  const { settings } = useSettings()\n  const [closing, setClosing] = useState<boolean>(false)\n  const compoundIndex = compounds.findIndex((comp) => comp.id === compound.id)\n\n  const molarUnits = molarUnitsValue(settings.molarUnits)\n  const volumeUnits = volumeUnitsValue(settings.volumeUnits)\n  const massUnits = massUnitsValue(settings.massUnits)\n\n  /**\n   * Validate method for Formik\n   */\n  interface IErrors {\n    symbol?: string\n    concentration?: string\n    name?: string\n    molecularWeight?: string\n  }\n\n  const validate = (values: Compound): IErrors => {\n    const errors: IErrors = {}\n\n    /* Symbol validation */\n    if (!validateNotEmpty(values.symbol))\n      errors.symbol = \"Symbol cannot be empty\"\n    else if (!validateUnicity(\"symbol\", values.symbol))\n      errors.symbol = \"Symbol is already used\"\n\n    /* Concentration validation */\n    if (!validateNotEmpty(values.concentration))\n      errors.concentration = \"Concentration cannot be empty\"\n    else if (!validateGreaterThan(values.concentration, 0, true))\n      errors.concentration = \"Concentration cannot be lower than 0\"\n\n    /* Molecular weight validation */\n    if (!validateNotEmpty(values.molecularWeight))\n      errors.molecularWeight = \"Molecular weight cannot be empty\"\n    else if (!validateGreaterThan(values.molecularWeight, 0, true))\n      errors.molecularWeight = \"Molecular weight cannot be lower than 0\"\n\n    return errors\n  }\n\n  const validateUnicity = (field: string, value: any): boolean => {\n    for (var i = 0; i < compounds.length; i++) {\n      // @ts-ignore\n      if (i !== compoundIndex && compounds[i][field] === value) {\n        return false\n      }\n    }\n    return true\n  }\n\n  /**\n   * Formik form initialization\n   */\n  const formik = useFormik({\n    // @ts-ignore\n    initialValues: {\n      symbol: compound.symbol,\n      concentration: compound.concentration,\n      name: compound.name,\n      molecularWeight: compound.molecularWeight,\n    },\n    validate,\n    onSubmit: (values) => {\n      const updatedCompound = { ...compound, ...values }\n      updateCompound(compound.id, updatedCompound)\n      window.scrollTo({ top: 0, behavior: \"smooth\" })\n      setClosing(true)\n    },\n  })\n\n  return (\n    <EditModal\n      closing={closing}\n      setClosing={setClosing}\n      handleClose={closeModal}\n    >\n      <Form onSubmit={formik.handleSubmit}>\n        <FieldInput\n          fieldName=\"symbol\"\n          label=\"Symbol:\"\n          error={formik.errors.symbol}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            formik.handleChange(event)\n          }}\n          value={formik.values.symbol}\n          color={compound.color}\n          big\n          transparent\n        />\n\n        <FieldInput\n          fieldName=\"concentration\"\n          label={`Initial concentration [${molarUnits}/${volumeUnits}]:`}\n          error={formik.errors.concentration}\n          tooltip=\"Concentration in the loaded mixture\"\n          type=\"number\"\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            formik.handleChange(event)\n          }}\n          value={formik.values.concentration}\n        />\n\n        <FieldInput\n          fieldName=\"molecularWeight\"\n          label={`Molecular weight [${massUnits}/${molarUnits}]:`}\n          error={formik.errors.molecularWeight}\n          type=\"number\"\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            formik.handleChange(event)\n          }}\n          value={formik.values.molecularWeight}\n        />\n\n        <FieldInput\n          fieldName=\"name\"\n          label=\"Compound name (optional):\"\n          error={formik.errors.name}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            formik.handleChange(event)\n          }}\n          value={formik.values.name}\n        />\n\n        <SubmitButton color=\"green\" type=\"submit\">\n          Done\n        </SubmitButton>\n      </Form>\n    </EditModal>\n  )\n}\n\nexport default CompoundEditModal\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n`\n","import styled from \"styled-components\"\n\nconst NoResource = styled.p`\n  padding: 1rem;\n  color: var(--color-grey-dark);\n  font-style: italic;\n`\n\nexport default NoResource\n","import styled from \"styled-components\"\n\n/* Components */\nimport CompoundCard from \"./CompoundCard\"\nimport CompoundEditModal from \"./CompoundEditModal\"\nimport NoResource from \"../NoResource\"\n\n/* Hooks */\nimport useCompounds from \"../../hooks/useCompounds\"\nimport { useState, useMemo } from \"react\"\n\nconst CompoundList: React.FC = (props) => {\n  const { compounds, updateCompound, removeCompound } = useCompounds()\n  const [editedCompoundId, setEditedCompoundId] = useState<string | undefined>(\n    undefined\n  )\n\n  const editCompound = (id?: string) => setEditedCompoundId(id)\n  const editedCompound = useMemo(\n    () =>\n      editedCompoundId\n        ? compounds.find((c) => c.id === editedCompoundId)\n        : undefined,\n    [compounds, editedCompoundId]\n  )\n\n  return (\n    <CompoundListWrapper>\n      {compounds.length === 0 && (\n        <NoResource>No compounds added yet</NoResource>\n      )}\n\n      {compounds.map((compound, index) => (\n        <CompoundCard\n          key={index}\n          compound={compound}\n          editCompound={(): void => {\n            editCompound(compound.id)\n          }}\n          updateCompound={(compound: Compound): void => {\n            updateCompound(compound.id, compound)\n          }}\n          removeCompound={(): void => {\n            removeCompound(compound.id)\n          }}\n          validateUnicity={(field: string, value: any): boolean => {\n            for (var i = 0; i < compounds.length; i++) {\n              // @ts-ignore\n              if (i !== index && compounds[i][field] === value) {\n                return false\n              }\n            }\n            return true\n          }}\n        />\n      ))}\n\n      {/* Edit modal */}\n      {editedCompoundId && (\n        <CompoundEditModal\n          compound={editedCompound as Compound}\n          closeModal={() => editCompound()}\n        />\n      )}\n    </CompoundListWrapper>\n  )\n}\n\nexport default CompoundList\n\n/**\n * Styled components\n */\n\nconst CompoundListWrapper = styled.ul`\n  align-self: stretch;\n  display: flex;\n  flex-wrap: wrap;\n  list-style-type: none;\n  padding-left: 0;\n`\n","/* Components */\nimport Button from \"../components/Button\"\nimport PageTitle from \"../components/PageTitle\"\nimport CompoundList from \"../components/compounds/CompoundList\"\nimport { FiPlus, FiTrash2 } from \"react-icons/fi\"\n\n/* Hooks */\nimport useCompounds from \"../hooks/useCompounds\"\n\nconst deleteButtonStyle = `\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  padding: 0.6rem 1rem;\n`\n\nconst CompoundsPage: React.FC = () => {\n  const { addCompound, removeAllCompounds } = useCompounds()\n\n  const handleResetCompounds = () => {\n    const confirmation = window.confirm(\n      \"Are you sure you want to delete all compounds? This will also delete all reactions\"\n    )\n    if (confirmation) removeAllCompounds()\n  }\n\n  return (\n    <>\n      <PageTitle>Compounds</PageTitle>\n      <Button color=\"green\" onClick={addCompound}>\n        Add <FiPlus />\n      </Button>\n      <Button\n        color=\"red\"\n        buttonStyle={deleteButtonStyle}\n        onClick={handleResetCompounds}\n      >\n        <FiTrash2 size={20} />\n      </Button>\n      <CompoundList />\n    </>\n  )\n}\n\nexport default CompoundsPage\n","import styled from \"styled-components\"\n\nconst InputSection = ({\n  children,\n}: {\n  children: JSX.Element | JSX.Element[]\n}) => {\n  return (\n    <InputSectionWrapper>\n      <InputSectionInner>{children}</InputSectionInner>\n    </InputSectionWrapper>\n  )\n}\n\nexport default InputSection\n\nconst InputSectionWrapper = styled.div`\n  display: flex;\n  flex-basis: 50%;\n\n  @media only screen and (max-width: 940px) {\n    flex-basis: 100%;\n  }\n`\n\nconst InputSectionInner = styled.div`\n  flex-grow: 1;\n  background-color: var(--color-grey-lighter);\n  border-radius: 5px;\n  flex-direction: column;\n  padding: 1rem;\n  margin: 1rem;\n  margin-bottom: 0;\n\n  h2 {\n    color: var(--color-grey-normal);\n    font-size: 1.2rem;\n    margin-top: 0;\n  }\n\n  input {\n    width: auto;\n  }\n`\n","import InputSection from \"./InputSection\"\nimport FieldInput from \"../forms/FieldInput\"\nimport type { FormikProps } from \"formik\"\n\ninterface OperatingTimesProps {\n  formik: FormikProps<Settings>\n  onBlur: (event: React.ChangeEvent<HTMLInputElement>) => void\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst OperatingTimesSection: React.VFC<OperatingTimesProps> = (props) => {\n  const { formik, onBlur, onChange } = props\n\n  return (\n    <InputSection>\n      <h2>Operating times</h2>\n      <FieldInput\n        fieldName=\"reactionTime\"\n        label=\"Reaction time:\"\n        type=\"number\"\n        value={formik.values.reactionTime}\n        error={formik.errors.reactionTime}\n        {...{ onBlur, onChange }}\n      />\n      <FieldInput\n        fieldName=\"deadTime\"\n        label=\"Dead time:\"\n        type=\"number\"\n        tooltip=\"Time needed for discharge, cleaning, etc.\"\n        value={formik.values.deadTime}\n        error={formik.errors.deadTime}\n        {...{ onBlur, onChange }}\n      />\n      <FieldInput\n        fieldName=\"timeStep\"\n        label=\"Time step:\"\n        type=\"number\"\n        tooltip=\"Small time interval for numerical calculation purposes\"\n        value={formik.values.timeStep}\n        error={formik.errors.timeStep}\n        {...{ onBlur, onChange }}\n      />\n    </InputSection>\n  )\n}\n\nexport default OperatingTimesSection\n","import styled from \"styled-components\"\nimport randomstring from \"randomstring\"\n\n/* Components */\nimport { FiChevronDown } from \"react-icons/fi\"\n\n// Hooks\nimport { useEffect, useState, useRef, useCallback } from \"react\"\n\ninterface ISelectProps<T> {\n  alignment?: string\n  defaultDisplayValue?: string\n  hoverIcon?: JSX.Element\n  initialValue?: ISelectOption<T>\n  selectOptions: ISelectOption<T>[]\n  onSelectionChange: (value?: T) => void\n}\n\nexport interface ISelectOption<T> {\n  value?: T\n  displayText?: string\n  collapsedDisplayText?: string\n  hoverBackgroundColor?: string\n}\n\n/* Reusable custom select component */\nconst Select = <T extends string | number>(props: ISelectProps<T>) => {\n  const {\n    alignment,\n    defaultDisplayValue,\n    hoverIcon,\n    initialValue,\n    onSelectionChange,\n    selectOptions,\n  } = props\n\n  // Set state variables\n  const [selecting, setSelecting] = useState<boolean>(false)\n  const [currentValue, setCurrentValue] = useState<T | undefined>(\n    initialValue?.value || undefined\n  )\n\n  // Use ref for id value\n  const id = useRef<string>(randomstring.generate(8))\n\n  /*\n   * Save a ref select component, for event add and remove listeners\n   * when clicking outside\n   */\n  const selectRef = useRef<HTMLElement | null>(null)\n  // const dropdownRef = useRef<HTMLElement | null>(null)\n\n  useEffect(() => {\n    // Save initialValue provided as prop to currentValue, if present\n    if (initialValue) setCurrentValue(initialValue.value)\n\n    // Save ref to rendered Select component\n    selectRef.current = document.getElementById(id.current)\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  /*\n   * Set ref to dropdown when visible\n   */\n  useEffect(() => {\n    if (selecting) selectRef.current = document.getElementById(id.current)\n    else selectRef.current = null\n  }, [selecting])\n\n  /*\n   * A useCallback hook here is needed so that the exact same function is passed\n   * to both addEventListener and removeEventListener\n   *\n   * https://dev.to/marcostreng/how-to-really-remove-eventlisteners-in-react-3och\n   */\n  const clickOutsideHandler = useCallback((event: any): void => {\n    // TODO: Better typing\n    // Uses tips from:\n    // https://stackoverflow.com/questions/152975/how-do-i-detect-a-click-outside-an-element/3028037#3028037\n\n    if (!selectRef.current?.contains(event.target)) {\n      toggleSelecting()\n      // Change state manually because clickOutsideHandler can't have toggleSelecting as a dependency\n      setSelecting(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  /*\n   * Toggles select options, while adding listeners for closing when clicking outside\n   * of the dropdown\n   */\n  const toggleSelecting = (): void => {\n    // Event listeners handling\n    if (!selecting) {\n      window.addEventListener(\"click\", clickOutsideHandler, true)\n    } else {\n      window.removeEventListener(\"click\", clickOutsideHandler, true)\n    }\n\n    // Toggle state variable\n    setSelecting(!selecting)\n  }\n\n  /*\n   * Handles value selection\n   * Definition is pretty self-explanatory\n   */\n  const selectValue = (value?: T): void => {\n    toggleSelecting()\n    setCurrentValue(value)\n    onSelectionChange(value)\n  }\n\n  /*\n   * Current selected value data\n   */\n  const currentValueOption: ISelectOption<T> | undefined = selectOptions.find(\n    (option) => option.value === currentValue\n  )\n\n  return (\n    <SelectWrapper id={id.current}>\n      <SelectValue selecting={selecting} onClick={toggleSelecting}>\n        <p>{currentValueOption?.collapsedDisplayText || defaultDisplayValue}</p>\n        <FiChevronDown size={10} />\n      </SelectValue>\n      {selecting && (\n        <SelectOptions alignment={alignment || \"left\"}>\n          {defaultDisplayValue && (\n            <SelectOption onClick={() => selectValue(undefined)}>\n              <p>{defaultDisplayValue}</p>\n            </SelectOption>\n          )}\n          {selectOptions.map(({ value, displayText, hoverBackgroundColor }) => (\n            <SelectOption\n              key={value}\n              onClick={() => {\n                selectValue(value)\n              }}\n              hoverBackgroundColor={hoverBackgroundColor}\n            >\n              <p>{displayText}</p>\n              <span>{hoverIcon}</span>\n            </SelectOption>\n          ))}\n        </SelectOptions>\n      )}\n    </SelectWrapper>\n  )\n}\n\nexport default Select\n\ninterface ISelecting {\n  selecting: boolean\n}\n\nconst SelectWrapper = styled.div`\n  position: relative;\n  flex: 1;\n`\n\nconst SelectValue = styled.div<ISelecting>`\n  align-items: center;\n  background-color: var(--color-grey-lightest);\n  border: 1px solid var(--color-grey-normal);\n  border-radius: 5px;\n  cursor: pointer;\n  display: flex;\n  font-size: 1.1rem;\n  outline: none;\n  padding: 5px 10px;\n  transition: all 0.15s linear;\n  ${(props) =>\n    props.selecting\n      ? `box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15),\n    0px 0px 2px var(--color-grey-normal);`\n      : \"\"}\n\n  & > p {\n    margin: 0;\n    flex-grow: 1;\n  }\n\n  & > svg {\n    margin-left: 0.5rem;\n  }\n`\n\ninterface ISelectOptions {\n  alignment: string\n}\n\nconst SelectOptions = styled.div<ISelectOptions>`\n  position: absolute;\n  top: 100%;\n\n  align-items: stretch;\n  ${(props) => (props.alignment === \"left\" ? \"left: 0;\" : \"\")}\n  ${(props) => (props.alignment === \"right\" ? \"right: 0;\" : \"\")}\n  background-color: var(--color-grey-lightest);\n  border: none;\n  border-radius: 5px;\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15),\n    0px 0px 2px var(--color-grey-normal);\n  display: flex;\n  flex-direction: column;\n  font-size: 1.2rem;\n  margin-top: 0.5rem;\n  max-height: 400px;\n  overflow-y: scroll;\n  padding: 0.5rem;\n  transition: all 0.05s linear;\n  width: auto;\n  z-index: 20;\n`\n\ninterface ISelectOptionProps {\n  hoverBackgroundColor?: string\n}\n\nconst SelectOption = styled.button<ISelectOptionProps>`\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  display: flex;\n  font-size: 1rem;\n  text-align: left;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n\n  &:hover {\n    background-color: ${(props) =>\n      props.hoverBackgroundColor || \"var(--color-grey-lighter)\"};\n\n    & > span {\n      opacity: 1;\n    }\n  }\n\n  & > p {\n    white-space: nowrap;\n    overflow-x: hidden;\n    text-overflow: ellipsis;\n    margin: 0;\n    flex-grow: 1;\n  }\n\n  & > span {\n    display: inline-flex;\n    align-items: center;\n    opacity: 0;\n    transition: opacity 0.15s linear;\n  }\n`\n","import styled from \"styled-components\"\nimport InfoTooltip from \"./InfoTooltip\"\nimport Select, { ISelectOption } from \"../Select\"\n\ninterface SelectInputProps {\n  selectedOption: any\n  fieldName: string\n  selectOptions: ISelectOption<any>[]\n  label: string\n  tooltip?: string\n  onSelectionChange: (value: any) => void\n}\n\nconst SelectInput: React.FC<SelectInputProps> = (props) => {\n  const {\n    fieldName,\n    label,\n    selectOptions,\n    tooltip,\n    selectedOption,\n    onSelectionChange,\n  } = props\n\n  const currentValue = selectOptions.find((option) => {\n    return option.value === selectedOption.value\n  })\n  return (\n    <SelectInputWrapper>\n      <LabelWrapper>\n        <label htmlFor={fieldName}>{label}</label>\n        {tooltip && <InfoTooltip text={tooltip} />}\n      </LabelWrapper>\n      <Select\n        initialValue={currentValue}\n        selectOptions={selectOptions}\n        onSelectionChange={onSelectionChange}\n      />\n    </SelectInputWrapper>\n  )\n}\n\nconst SelectInputWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  align-self: flex-start;\n  padding: 0.5rem;\n  position: relative;\n\n  label {\n    font-weight: 600;\n    color: var(--color-grey-dark);\n    margin-right: 1rem;\n  }\n\n  &:hover > .error {\n    opacity: 1 !important;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-basis: 50%;\n  align-items: center;\n`\n\nexport default SelectInput\n","import { VFC } from \"react\"\nimport InputSection from \"./InputSection\"\nimport SelectInput from \"../forms/SelectInput\"\nimport {\n  timeUnitsOptions,\n  volumeUnitsOptions,\n  massUnitsOptions,\n  molarUnitsOptions,\n  temperatureUnitsOptions,\n  energyUnitsOptions,\n} from \"../../helpers/units\"\nimport type { FormikProps } from \"formik\"\n\ninterface UnitsProps {\n  formik: FormikProps<Settings>\n}\n\nconst UnitsSection: VFC<UnitsProps> = (props) => {\n  const { formik } = props\n\n  return (\n    <InputSection>\n      <h2>Units</h2>\n      <SelectInput\n        selectedOption={timeUnitsOptions[formik.values.timeUnits]}\n        fieldName=\"timeUnits\"\n        label=\"Time units:\"\n        selectOptions={timeUnitsOptions}\n        onSelectionChange={(value) => {\n          formik.setFieldValue(\"timeUnits\", value, false)\n          formik.handleSubmit()\n        }}\n      />\n      <SelectInput\n        selectedOption={volumeUnitsOptions[formik.values.volumeUnits]}\n        fieldName=\"volumeUnits\"\n        label=\"Volume units:\"\n        selectOptions={volumeUnitsOptions}\n        onSelectionChange={(value) => {\n          formik.setFieldValue(\"volumeUnits\", value, false)\n          formik.handleSubmit()\n        }}\n      />\n      <SelectInput\n        selectedOption={molarUnitsOptions[formik.values.molarUnits]}\n        fieldName=\"molarUnits\"\n        label=\"Molar units:\"\n        selectOptions={molarUnitsOptions}\n        onSelectionChange={(value) => {\n          formik.setFieldValue(\"molarUnits\", value, false)\n          formik.handleSubmit()\n        }}\n      />\n      <SelectInput\n        selectedOption={massUnitsOptions[formik.values.massUnits]}\n        fieldName=\"massUnits\"\n        label=\"Mass units:\"\n        selectOptions={massUnitsOptions}\n        onSelectionChange={(value) => {\n          formik.setFieldValue(\"massUnits\", value, false)\n          formik.handleSubmit()\n        }}\n      />\n      <SelectInput\n        selectedOption={temperatureUnitsOptions[formik.values.temperatureUnits]}\n        fieldName=\"temperatureUnits\"\n        label=\"Temperature units:\"\n        selectOptions={temperatureUnitsOptions}\n        onSelectionChange={(value) => {\n          formik.setFieldValue(\"temperatureUnits\", value, false)\n          formik.handleSubmit()\n        }}\n      />\n      <SelectInput\n        selectedOption={energyUnitsOptions[formik.values.energyUnits]}\n        fieldName=\"energyUnits\"\n        label=\"Energy units:\"\n        selectOptions={energyUnitsOptions}\n        onSelectionChange={(value) => {\n          formik.setFieldValue(\"energyUnits\", value, false)\n          formik.handleSubmit()\n        }}\n      />\n    </InputSection>\n  )\n}\n\nexport default UnitsSection\n","import styled from \"styled-components\"\n\n/* Components */\nimport Error from \"./Error\"\nimport InfoTooltip from \"./InfoTooltip\"\nimport { FaCheck } from \"react-icons/fa\"\n\n/* Types */\nimport type { FormikProps } from \"formik\"\n\n/*********************************\n * CAUTION: This checkbox only works inside a formik form\n *********************************/\n\ninterface CheckboxInputProps<T> {\n  error?: string\n  fieldName: string\n  formik: FormikProps<T>\n  label: string\n  tooltip?: string\n}\n\nconst CheckboxInput = <T extends unknown>(props: CheckboxInputProps<T>) => {\n  const { fieldName, formik, label, tooltip } = props\n\n  const key = fieldName as keyof typeof formik.values\n  const value = formik.values[key]\n  const error = formik.errors[key]\n\n  const onToggle = () => {\n    formik.setFieldValue(fieldName, !formik.values[key], false)\n    formik.handleSubmit()\n  }\n\n  return (\n    <CheckboxInputWrapper>\n      <Checkbox onClick={onToggle} toggled={!!value}>\n        {value && <FaCheck size={10} />}\n      </Checkbox>\n      <LabelWrapper>\n        <label htmlFor={fieldName}>{label}</label>\n        {tooltip && <InfoTooltip text={tooltip} />}\n      </LabelWrapper>\n      {error && <Error>{error}</Error>}\n    </CheckboxInputWrapper>\n  )\n}\n\nexport default CheckboxInput\n\nconst CheckboxInputWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  align-self: flex-start;\n  padding: 0.5rem;\n  position: relative;\n\n  label {\n    font-weight: 600;\n    color: var(--color-grey-dark);\n  }\n\n  &:hover > .error {\n    opacity: 1 !important;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`\n\ninterface CheckboxProps {\n  toggled?: boolean\n}\n\nconst Checkbox = styled.div<CheckboxProps>`\n  width: 0.8rem;\n  height: 0.8rem;\n  border: 2px solid var(--color-grey-normal);\n  background-color: ${(props) =>\n    props.toggled ? \"var(--color-grey-normal)\" : \"var(--color-grey-lightest)\"};\n  border-radius: 3px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 0.5rem;\n\n  svg {\n    fill: var(--color-grey-lightest);\n  }\n`\n","import InputSection from \"./InputSection\"\nimport FieldInput from \"../forms/FieldInput\"\nimport CheckboxInput from \"../forms/CheckboxInput\"\n\n/* Hooks */\nimport useSettings from \"../../hooks/useSettings\"\n\nimport { temperatureUnitsValue } from \"../../helpers/units\"\n\nimport type { FormikProps } from \"formik\"\n\ninterface HeatExchangeProps {\n  formik: FormikProps<Settings>\n  onBlur: (event: React.ChangeEvent<HTMLInputElement>) => void\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst HeatExchangeSection: React.VFC<HeatExchangeProps> = (props) => {\n  const { formik, onBlur, onChange } = props\n  const { settings } = useSettings()\n\n  const temperatureUnits = temperatureUnitsValue(settings.temperatureUnits)\n  return (\n    <InputSection>\n      <h2>Heat Exchange</h2>\n      <CheckboxInput<Settings>\n        fieldName=\"isothermic\"\n        label=\"Isothermic system\"\n        {...{ formik }}\n      />\n      <FieldInput\n        fieldName=\"initialTemperature\"\n        label={`Initial Temperature [${temperatureUnits}]:`}\n        type=\"number\"\n        value={formik.values.initialTemperature}\n        error={formik.errors.initialTemperature}\n        {...{ onBlur, onChange }}\n      />\n    </InputSection>\n  )\n}\n\nexport default HeatExchangeSection\n","import styled from \"styled-components\"\n\n/* Components */\nimport PageTitle from \"../components/PageTitle\"\nimport OperatingTimesSection from \"../components/settings/OperatingTimesSection\"\nimport UnitsSection from \"../components/settings/UnitsSection\"\nimport HeatExchangeSection from \"../components/settings/HeatExchangeSection\"\n\n/* Helpers */\nimport {\n  validateEqual,\n  validateNotEmpty,\n  validateGreaterThan,\n} from \"../helpers/validators\"\n\n/* Hooks */\nimport useSettings from \"../hooks/useSettings\"\nimport { useFormik } from \"formik\"\n\n/* Types */\nimport type { FormikProps } from \"formik\"\n\nconst SettingsPage: React.VFC = () => {\n  const { settings, saveSettings } = useSettings()\n\n  /**\n   * Form validation function\n   */\n  const validate = (values: Settings): SettingsErrors => {\n    const { deadTime, initialTemperature, timeStep, reactionTime } = values\n    const errors: SettingsErrors = {}\n\n    /* Reaction time validation */\n    if (!validateNotEmpty(reactionTime))\n      errors.reactionTime = \"Reaction time cannot be empty\"\n    else if (!validateGreaterThan(reactionTime, 0, true))\n      errors.reactionTime = \"Reaction time cannot be lower than 0\"\n\n    /* Dead time validation */\n    if (!validateNotEmpty(deadTime))\n      errors.deadTime = \"Dead time cannot be empty\"\n    else if (!validateGreaterThan(deadTime, 0, true))\n      errors.deadTime = \"Dead time cannot be lower than 0\"\n\n    /* Time step validation */\n    if (!validateNotEmpty(timeStep))\n      errors.timeStep = \"Time step cannot be empty\"\n    else if (!validateGreaterThan(timeStep, 0, false))\n      errors.timeStep = \"Time step has to be greater than 0\"\n    // TODO: Time step has to be lower than reaction time\n\n    /* Initial temperature validation */\n    if (!validateNotEmpty(timeStep))\n      errors.initialTemperature = \"Initial temperature cannot be empty\"\n    else if (\n      (validateEqual(initialTemperature, \"K\") ||\n        validateEqual(initialTemperature, \"R\")) &&\n      !validateGreaterThan(initialTemperature, 0, false)\n    )\n      errors.initialTemperature =\n        \"Initial temperature cannot be equal or lower than 0\"\n    else if (\n      validateEqual(initialTemperature, \"°C\") &&\n      !validateGreaterThan(initialTemperature, -273.15, false)\n    )\n      errors.initialTemperature =\n        \"Initial temperature cannot be equal or lower than -273.15\"\n    else if (\n      validateEqual(initialTemperature, \"°F\") &&\n      !validateGreaterThan(initialTemperature, -459.67, false)\n    )\n      errors.initialTemperature =\n        \"Initial temperature cannot be equal or lower than -459.67\"\n\n    return errors\n  }\n\n  const formik: FormikProps<Settings> = useFormik({\n    initialValues: { ...settings },\n    validate,\n    onSubmit: (values) => {\n      saveSettings(values)\n    },\n  })\n\n  const submit = () => {\n    formik.handleSubmit()\n  }\n\n  const onBlur = submit\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n    formik.handleChange(event)\n\n  const sectionProps = {\n    formik,\n    onBlur,\n    onChange,\n  }\n\n  return (\n    <>\n      <PageTitle>Operation</PageTitle>\n\n      <Form>\n        <OperatingTimesSection {...sectionProps} />\n        <UnitsSection {...sectionProps} />\n        <HeatExchangeSection {...sectionProps} />\n      </Form>\n    </>\n  )\n}\n\nexport default SettingsPage\n\nconst Form = styled.form`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 1rem;\n`\n","import styled from \"styled-components\"\n\nconst Notice = styled.p`\n  color: var(--color-grey-normal);\n  font-style: italic;\n  margin: 0.5rem;\n`\n\nexport default Notice\n","import styled from \"styled-components\"\n\n/* Components */\nimport { Fragment } from \"react\"\nimport Notice from \"../Notice\"\nimport { FiArrowRight, FiPlus } from \"react-icons/fi\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Hooks */\nimport useCompounds from \"../../hooks/useCompounds\"\n\ninterface IReactionPreviewProps {\n  reaction: Reaction\n}\n\nconst ReactionPreview: React.FC<IReactionPreviewProps> = (props) => {\n  const { reaction } = props\n  const { findCompound } = useCompounds()\n\n  return (\n    <ReactionPreviewWrapper>\n      {reaction.reactants.length === 0 && reaction.products.length === 0 && (\n        <Notice>No reaction data</Notice>\n      )}\n\n      {reaction.reactants.map((reactionCompound, index) => {\n        const compound = findCompound(reactionCompound.compoundId) as Compound\n\n        return (\n          <Fragment key={reactionCompound.compoundId}>\n            {index !== 0 && <FiPlus size={25} />}\n            <CompoundWrapper>\n              <p>{reactionCompound.stoichiometricCoefficient}</p>\n              <CompoundTile\n                color={compound.color as keyof typeof COMPOUND_COLORS}\n              >\n                {compound.symbol}\n              </CompoundTile>\n            </CompoundWrapper>\n          </Fragment>\n        )\n      })}\n\n      {reaction.reactants.length > 0 && reaction.products.length > 0 && (\n        <FiArrowRight size={25} />\n      )}\n\n      {reaction.products.map((reactionCompound, index) => {\n        const compound = findCompound(reactionCompound.compoundId) as Compound\n\n        return (\n          <Fragment key={reactionCompound.compoundId}>\n            {index !== 0 && <FiPlus size={25} />}\n            <CompoundWrapper>\n              <p>{reactionCompound.stoichiometricCoefficient}</p>\n              <CompoundTile\n                color={compound.color as keyof typeof COMPOUND_COLORS}\n              >\n                {compound.symbol}\n              </CompoundTile>\n            </CompoundWrapper>\n          </Fragment>\n        )\n      })}\n    </ReactionPreviewWrapper>\n  )\n}\n\nexport default ReactionPreview\n\nconst ReactionPreviewWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-grow: 1;\n  min-height: 3rem;\n`\n\nconst CompoundWrapper = styled.div`\n  align-items: flex-end;\n  display: flex;\n  margin: 0 0.5rem;\n\n  p {\n    color: var(--color-grey-dark);\n    font-size: 1.6rem;\n    margin: 0 0 0.2rem 0;\n  }\n`\n\ninterface ICompoundColorBulletProps {\n  color: keyof typeof COMPOUND_COLORS\n}\n\nconst CompoundTile = styled.div<ICompoundColorBulletProps>`\n  background-color: ${(props) => COMPOUND_COLORS[props.color]};\n  border-radius: 5px;\n  border: 1px solid var(--color-grey-normal);\n  box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.15);\n  color: var(--color-grey-dark);\n  font-size: 1.6rem;\n  margin: 0 0.5rem;\n  padding: 0.5rem 0.9rem;\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport CardButton from \"../CardButton\"\nimport ReactionPreview from \"./ReactionPreview\"\nimport { FiEdit, FiTrash2 } from \"react-icons/fi\"\n\ninterface IReactionCardProps {\n  reaction: Reaction\n  reactionIndex: number\n  editReaction: () => void\n  removeReaction: () => void\n}\n\nconst ReactionCard: React.FC<IReactionCardProps> = (props) => {\n  const { reaction, reactionIndex, editReaction, removeReaction } = props\n\n  return (\n    <ReactionCardWrapper>\n      <ReactionInfo>\n        <ReactionName>\n          {`#${reactionIndex + 1}`} {reaction.name ? ` - ${reaction.name}` : \"\"}\n        </ReactionName>\n        <ReactionPreview reaction={reaction} />\n      </ReactionInfo>\n      <CardButton onClick={editReaction}>\n        <FiEdit />\n      </CardButton>\n      <CardButton onClick={removeReaction}>\n        <FiTrash2 />\n      </CardButton>\n    </ReactionCardWrapper>\n  )\n}\n\nexport default ReactionCard\n\nconst ReactionCardWrapper = styled.div`\n  margin: 10px;\n  padding: 20px;\n  position: relative;\n\n  align-items: center;\n  align-self: stretch;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: var(--color-grey-lighter);\n  border-radius: 5px;\n  border: 1.5px solid var(--color-grey-lightest);\n  display: flex;\n  color: var(--color-grey-dark);\n  cursor: pointer;\n  overflow: hidden;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.15);\n    transform: translateY(-2px);\n  }\n\n  p:not(:first-child) {\n    flex-grow: 1;\n    margin: 0;\n  }\n`\n\nconst ReactionName = styled.p`\n  color: var(--color-grey-normal);\n  flex-grow: 0;\n  font-size: 1.2rem;\n  font-weight: 600;\n  margin: 0;\n  padding-left: 0.6rem;\n  padding-bottom: 0.5rem;\n`\n\nconst ReactionInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n`\n","/**\n * This is a placeholder for more complex kinetic models,\n * where constants can be added and used in expressions\n *\n * Kinetic constants are representes by:\n *  - A principal constant, with key @reactionConstant\n *  - A compound-specific constant, with key @compoundId\n *\n * More complex models are not considerer, for simplicity of\n * the MVP1\n */\n\nimport { KineticModels } from \"../helpers/reactionTypes\"\n\nexport const KINETIC_MODELS = [\"Simple\", \"Hiperbolic\", \"Autocatalytic\"]\n\nexport const generateKineticConstants = (\n  model: KineticModel,\n  reaction: Reaction,\n  compounds: Compound[]\n): KineticConstants => {\n  switch (model) {\n    case KineticModels.hyperbolic:\n      return generateHiperbolicModelConstants(reaction, compounds)\n    case KineticModels.autocatalytic:\n      return generateAutocatalyticModelConstants(reaction, compounds)\n    default:\n      // simple\n      return generateSimpleModelConstants(reaction, compounds)\n  }\n}\n\nconst generateSimpleModelConstants = (\n  reaction: Reaction,\n  compounds: Compound[]\n) => {\n  const updatedExponents: KineticConstants = {\n    \"k_\\\\inf\": reaction.kineticConstants[\"k_\\\\inf\"],\n    E_A: reaction.kineticConstants.E_A,\n  }\n\n  reaction.reactants.forEach((reactionCompound: ReactionCompound) => {\n    const compound = compounds.find(\n      (c) => c.id === reactionCompound.compoundId\n    ) as Compound\n    const paramKey = reactantExponent(compound)\n    const oldConstant = reaction.kineticConstants[paramKey]\n\n    if (oldConstant === undefined) {\n      updatedExponents[paramKey] = \"1\"\n    } else {\n      updatedExponents[paramKey] = oldConstant\n    }\n  })\n\n  return { ...updatedExponents }\n}\n\nconst generateHiperbolicModelConstants = (\n  reaction: Reaction,\n  compounds: Compound[]\n) => {\n  const updatedExponents: KineticConstants = {\n    \"k_\\\\inf\": reaction.kineticConstants[\"k_\\\\inf\"],\n    E_A: reaction.kineticConstants.E_A,\n  }\n\n  reaction.reactants.forEach((reactionCompound: ReactionCompound) => {\n    const compound = compounds.find(\n      (c) => c.id === reactionCompound.compoundId\n    ) as Compound\n    const paramKey = semiSaturationConstant(compound)\n    const oldConstant = reaction.kineticConstants[paramKey]\n\n    if (oldConstant === undefined) {\n      updatedExponents[paramKey] = \"1\"\n    } else {\n      updatedExponents[paramKey] = oldConstant\n    }\n  })\n\n  return { ...updatedExponents }\n}\n\nconst generateAutocatalyticModelConstants = (\n  reaction: Reaction,\n  compounds: Compound[]\n) => {\n  const updatedExponents: KineticConstants = {\n    \"k_\\\\inf\": reaction.kineticConstants[\"k_\\\\inf\"],\n    E_A: reaction.kineticConstants.E_A,\n  }\n\n  reaction.reactants.forEach((reactionCompound: ReactionCompound) => {\n    const compound = compounds.find(\n      (c) => c.id === reactionCompound.compoundId\n    ) as Compound\n    const paramKey = reactantExponent(compound)\n    const oldConstant = reaction.kineticConstants[paramKey]\n\n    if (oldConstant === undefined) {\n      updatedExponents[paramKey] = \"1\"\n    } else {\n      updatedExponents[paramKey] = oldConstant\n    }\n  })\n  reaction.products.forEach((reactionCompound: ReactionCompound) => {\n    const compound = compounds.find(\n      (c) => c.id === reactionCompound.compoundId\n    ) as Compound\n    const paramKey = productExponent(compound)\n    const oldConstant = reaction.kineticConstants[paramKey]\n\n    if (oldConstant === undefined) {\n      updatedExponents[paramKey] = \"1\"\n    } else {\n      updatedExponents[paramKey] = oldConstant\n    }\n  })\n\n  return { ...updatedExponents }\n}\n\n// Some placeholder parameters\n\nexport const reactantExponent = (compound: Compound) => {\n  return `\\\\alpha_${compound.symbol}`\n}\n\nexport const productExponent = (compound: Compound) => {\n  return `\\\\beta_${compound.symbol}`\n}\n\nexport const semiSaturationConstant = (compound: Compound) => {\n  return `K_${compound.symbol}`\n}\n","import styled from \"styled-components\"\n\nexport const ModalInputSection = styled.div`\n  border-top: 1px solid var(--color-grey-light);\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 2rem;\n  padding: 2rem 1rem 0rem;\n\n  h2 {\n    color: var(--color-grey-dark);\n    font-size: 20px;\n    margin-top: 0;\n  }\n`\n\nexport const ModalColumnInputSection = styled(ModalInputSection)`\n  flex-direction: column;\n  flex-wrap: nowrap;\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport CardButton from \"../CardButton\"\nimport { FiTrash2 } from \"react-icons/fi\"\nimport Input from \"../forms/Input\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Helpers */\nimport { validateNotEmpty } from \"../../helpers/validators\"\n\n/* Hooks */\nimport { useState } from \"react\"\n\ninterface IReactionCompoundCardProps {\n  key: string\n  compound: Compound\n  reactionCompound: ReactionCompound\n  updateCompound: (updatedReactionCompound: ReactionCompound) => void\n  removeCompound: () => void\n}\n\nconst ReactionCompoundCard: React.FC<IReactionCompoundCardProps> = (props) => {\n  const { compound, reactionCompound, updateCompound, removeCompound } = props\n\n  /* Coefficient is short for Stoichiometric Coefficient in this component */\n  const [coefficientInput, setCoefficientInput] = useState<number | \"\">(\n    reactionCompound.stoichiometricCoefficient\n  )\n\n  const handleCoefficientChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    if (event.target.value === \"\") {\n      setCoefficientInput(\"\")\n      return\n    }\n    setCoefficientInput(parseFloat(event.target.value))\n  }\n\n  const validateAndUpdateCoefficient = () => {\n    if (validateNotEmpty(coefficientInput)) {\n      updateCompound({\n        ...reactionCompound,\n        stoichiometricCoefficient: coefficientInput as number,\n      })\n      return\n    }\n    setCoefficientInput(reactionCompound.stoichiometricCoefficient)\n  }\n\n  return (\n    <ReactionCompoundCardWrapper\n      color={compound.color as keyof typeof COMPOUND_COLORS}\n    >\n      <h1>{compound.symbol}</h1>\n      <Input\n        value={coefficientInput}\n        type=\"number\"\n        onChange={handleCoefficientChange}\n        onBlur={validateAndUpdateCoefficient}\n        transparent\n      />\n      <CardButton onClick={removeCompound}>\n        <FiTrash2 />\n      </CardButton>\n    </ReactionCompoundCardWrapper>\n  )\n}\n\nexport default ReactionCompoundCard\n\ninterface IReactionCompoundCardWrapperProps {\n  color: keyof typeof COMPOUND_COLORS\n}\n\nconst ReactionCompoundCardWrapper = styled.div<IReactionCompoundCardWrapperProps>`\n  margin: 5px;\n  padding: 1rem 1.3rem;\n  position: relative;\n\n  align-items: center;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: ${(props) => COMPOUND_COLORS[props.color]};\n  border-radius: 5px;\n  color: var(--color-grey-dark);\n  display: flex;\n  cursor: pointer;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    & {\n      box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n      transform: translateY(-2px);\n    }\n  }\n\n  h1 {\n    flex-grow: 1;\n    font-size: 1.8rem;\n    margin: 0;\n  }\n\n  input {\n    font-size: 1.3rem;\n    width: 0px;\n  }\n\n  button {\n    opacity: 1;\n    margin-left: 0.5rem;\n  }\n`\n","/* Components */\nimport ReactionCompoundCard from \"./ReactionCompoundCard\"\n\n/* Hooks */\nimport useCompounds from \"../../hooks/useCompounds\"\n\ninterface IReactionCompoundListProps {\n  compoundType: CompoundType\n  reactionCompounds: ReactionCompound[]\n  reactionIndex: number\n  removeCompound: (compoundIndex: number, compoundType: CompoundType) => void\n  updateCompound: (\n    compoundIndex: number,\n    compoundType: CompoundType,\n    updatedCompound: ReactionCompound\n  ) => void\n}\n\nconst ReactionCompoundList: React.FC<IReactionCompoundListProps> = (props) => {\n  const { reactionCompounds, removeCompound, updateCompound, compoundType } =\n    props\n  const { findCompound } = useCompounds()\n\n  return (\n    <>\n      {reactionCompounds.map((reactionCompound) => {\n        const compound = findCompound(reactionCompound.compoundId) as Compound\n        /**\n         * compoundIndex is the index in the reaction object (reactants or products)\n         *  */\n        const compoundIndex = reactionCompounds.findIndex(\n          (c) => c.compoundId === reactionCompound.compoundId\n        ) as number\n\n        return (\n          <ReactionCompoundCard\n            key={reactionCompound.compoundId}\n            compound={compound}\n            reactionCompound={reactionCompound}\n            updateCompound={(updatedReactionCompound: ReactionCompound) => {\n              updateCompound(\n                compoundIndex,\n                compoundType,\n                updatedReactionCompound\n              )\n            }}\n            removeCompound={() => {\n              removeCompound(compoundIndex, compoundType)\n            }}\n          />\n        )\n      })}\n    </>\n  )\n}\n\nexport default ReactionCompoundList\n","import styled from \"styled-components\"\nimport { Fragment } from \"react\"\nimport { TokenTypes } from \"../helpers/tokenTypes\"\ninterface IEquation {\n  tokenizedEquation: Token[]\n}\n\n// It is necessary to specify the 'parenthesis level' at which the operation is done\ninterface Operation {\n  code: JSX.Element | string\n  level: number\n}\n\nexport const Equation: React.FC<IEquation> = (props) => {\n  const { tokenizedEquation } = props\n  const components: JSX.Element[] = []\n\n  const parenthesisStack: (JSX.Element | string)[][] = []\n  const operationStack: Operation[] = []\n\n  tokenizedEquation.forEach((token) => {\n    /**\n     * Parenthesis treatment takes precedence over everything else.\n     *\n     * A buffer is pushed to the parenthesis stack upon finding a left bracket.\n     *\n     * When a right parenthesis is found, the last element from the buffer is popped,\n     * and added as a parenthesis component to the latest parenthesis stack, or the components array\n     */\n    if (token.type === TokenTypes.LeftParenthesis) {\n      parenthesisStack.push([])\n    } else if (token.type === TokenTypes.RightParenthesis) {\n      // If the syntax is correct, pop should never return undefined\n      const parenthesis = parenthesisStack.pop() as (string | JSX.Element)[]\n\n      // If there are elements in the parenthesisStack, then push any new components to it\n      // If not, push any new components to the components array\n      const currentStack =\n        parenthesisStack.length === 0\n          ? components\n          : parenthesisStack[parenthesisStack.length - 1]\n\n      // If there are operations in the operationStack, and if the latest operation\n      // matches the parenthesis level, pop most recent one\n      if (\n        operationStack.length > 0 &&\n        operationStack[operationStack.length - 1].level ===\n          parenthesisStack.length\n      ) {\n        const operation = operationStack.pop() as Operation\n\n        //\n        if (operation.code === \"/\") {\n          const numerator = currentStack.pop() as string | JSX.Element\n          currentStack.push(\n            <Division\n              numerator={numerator}\n              denominator={<Parenthesis elements={parenthesis} />}\n            />\n          )\n        } else if (operation.code === \"^\") {\n          const base = currentStack.pop() as string | JSX.Element\n          currentStack.push(\n            <Power base={base} power={<Parenthesis elements={parenthesis} />} />\n          )\n        } else if (operation.code === \"-\" || operation.code === \"+\") {\n          currentStack.push(operation.code)\n          currentStack.push(<Parenthesis elements={parenthesis} />)\n        }\n      } else {\n        // No *valid* operations in operationStack, simply push component\n        currentStack.push(<Parenthesis elements={parenthesis} />)\n      }\n    }\n    //\n    /**\n     * Variables and parameters are easy to treat.\n     *\n     * The only considerations are to push to the parenthesis stack\n     * if a buffer is present, and to build Division and Power components if\n     * necessary.\n     */\n    else if (\n      token.type === TokenTypes.Parameter ||\n      token.type === TokenTypes.Variable\n    ) {\n      /**\n       * Push to parenthesis stack if one is present\n       */\n      if (parenthesisStack.length > 0) {\n        parenthesisStack[parenthesisStack.length - 1].push(\n          <SymbolComponent\n            symbol={(token.value as string).replace(/<|>|{|}/g, \"\")}\n          />\n        )\n      }\n      //\n      /**\n       * Then, check if division or power are present in the stack\n       *  */\n      else if (operationStack.length > 0) {\n        /**\n         * Pop most recent operation from stack\n         */\n        const operation = operationStack.pop() as Operation\n        //\n        if (operation.code === \"/\") {\n          const numerator = components.pop() as string | JSX.Element\n          components.push(\n            <Division\n              numerator={numerator}\n              denominator={\n                <SymbolComponent\n                  symbol={(token.value as string).replace(/<|>|{|}/g, \"\")}\n                />\n              }\n            />\n          )\n        } else if (operation.code === \"^\") {\n          const base = components.pop() as string | JSX.Element\n          components.push(\n            <Power\n              base={base}\n              power={\n                <SymbolComponent\n                  symbol={(token.value as string).replace(/<|>|{|}/g, \"\")}\n                />\n              }\n            />\n          )\n        }\n      }\n      //\n      /**\n       * Next steps are easier: close parenthesis or just push to components\n       */\n      else {\n        components.push(\n          <SymbolComponent\n            symbol={(token.value as string).replace(/<|>|{|}/g, \"\")}\n          />\n        )\n      }\n    }\n    //\n    /**\n     * Division and power are special in that they need the previous\n     * element in components. For this reason, the use a stack.\n     * */\n    else if (token.type === TokenTypes.Operator) {\n      if (token.value === \"/\" || token.value === \"^\") {\n        //\n        operationStack.push({\n          code: token.value,\n          level: parenthesisStack.length,\n        })\n      }\n      //\n      else if (parenthesisStack.length > 0) {\n        if (token.value === \"+\" || token.value === \"-\") {\n          parenthesisStack[parenthesisStack.length - 1].push(<>{token.value}</>)\n        } else if (token.value === \"*\") {\n          parenthesisStack[parenthesisStack.length - 1].push(<>.</>)\n        }\n      } else {\n        if (token.value === \"+\" || token.value === \"-\") {\n          components.push(<>{token.value}</>)\n        } else if (token.value === \"*\") {\n          components.push(<>.</>)\n        }\n      }\n    }\n  })\n\n  return (\n    <>\n      {components.map((component, index) => (\n        <Fragment key={index}>{component}</Fragment>\n      ))}\n    </>\n  )\n}\n\n// ----------------------------------------------------------------\n/**\n * Symbol Component\n * For alphanumeric expressions such as variables or parameters\n */\ninterface ISymbolComponent {\n  symbol: string\n}\n\nexport const SymbolComponent: React.FC<ISymbolComponent> = (props) => {\n  const { symbol } = props\n\n  /**\n   * Expressions may have subindices\n   * For now, they may not have superindices (TODO: maybe?)\n   * TODO: Support commas for subindex separation?\n   */\n  const separatedTerms: (string | JSX.Element)[] = symbol.split(\"_\")\n\n  // Replace symbols represented as strings for components\n  separatedTerms.forEach((term, index) => {\n    switch (term) {\n      case \"\\\\alpha\":\n        separatedTerms[index] = <GreekAlpha />\n        break\n      case \"\\\\beta\":\n        separatedTerms[index] = <GreekBeta />\n        break\n      case \"\\\\mu\":\n        separatedTerms[index] = <GreekMu />\n        break\n      case \"\\\\inf\":\n        separatedTerms[index] = <SymbolInfinity />\n        break\n      default:\n    }\n  })\n\n  for (let i = separatedTerms.length - 1; i > 0; i--) {\n    // Last term will be the subindex\n    const subindex = separatedTerms.pop() as string | JSX.Element\n    separatedTerms[i - 1] = (\n      <Subindex base={separatedTerms[i - 1]} subindex={subindex} />\n    )\n  }\n\n  // Final result is at separatedTerms[0]\n  return separatedTerms[0] as JSX.Element\n}\n\n// ----------------------------------------------------------------\n/**\n * Parenthesis\n */\n\ninterface IParenthesisProps {\n  elements: (string | JSX.Element)[]\n}\n\nexport const Parenthesis: React.FC<IParenthesisProps> = (props) => {\n  const { elements } = props\n\n  return (\n    <>\n      {elements.map((elem, index) => (\n        <Fragment key={index}>{elem}</Fragment>\n      ))}\n    </>\n  )\n}\n\n// ----------------------------------------------------------------\n/**\n * Division\n */\n\ninterface IDivisionProps {\n  numerator: string | JSX.Element\n  denominator: string | JSX.Element\n}\n\nexport const Division: React.FC<IDivisionProps> = (props) => {\n  const { numerator, denominator } = props\n\n  return (\n    <DivisionWrapper>\n      <div>{numerator}</div>\n      <div></div>\n      <div>{denominator}</div>\n    </DivisionWrapper>\n  )\n}\n\nconst DivisionWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n\n  & > div:not(:nth-child(2)) {\n    display: flex;\n    padding: 0.5rem;\n    position: relative;\n  }\n\n  & > div:nth-child(2) {\n    width: 100%;\n    height: 2px;\n    background-color: var(--color-grey-dark);\n  }\n`\n\n// ----------------------------------------------------------------\n/**\n * Power\n *  */\n\ninterface IPowerProps {\n  base: string | JSX.Element\n  power: string | JSX.Element\n}\n\nexport const Power: React.FC<IPowerProps> = (props) => {\n  const { base, power } = props\n  return (\n    <PowerWrapper>\n      <div>{base}</div>\n      <div className=\"exponent\">{power}</div>\n    </PowerWrapper>\n  )\n}\n\nconst PowerWrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n\n  & > .exponent {\n    transform: translateY(-30%) scale(0.7);\n  }\n`\n\n// ----------------------------------------------------------------\n/**\n * Subindex\n *  */\n\ninterface ISubindexProps {\n  base: string | JSX.Element\n  subindex: string | JSX.Element\n}\n\nexport const Subindex: React.FC<ISubindexProps> = (props) => {\n  const { base, subindex } = props\n  return (\n    <SubindexWrapper>\n      <div>{base}</div>\n      <div className=\"subindex\">{subindex}</div>\n    </SubindexWrapper>\n  )\n}\n\nconst SubindexWrapper = styled.div`\n  position: relative;\n  display: flex;\n\n  & > .subindex {\n    transform: translateY(30%) scale(0.75);\n  }\n`\n\n// ----------------------------------------------------------------\n/**\n * Greek letters\n */\n\nexport const GreekAlpha = () => <span>&alpha;</span>\nexport const GreekBeta = () => <span>&beta;</span>\nexport const GreekMu = () => <span>&mu;</span>\n\n// ----------------------------------------------------------------\n/**\n * Other Symbols\n */\nexport const SymbolInfinity = () => <span>&infin;</span>\n","import styled from \"styled-components\"\n\n/* Components */\nimport { Equation, Subindex } from \"../MathExpressions\"\n\n/* Hooks */\nimport useCompounds from \"../../hooks/useCompounds\"\n\ninterface IReactionEquationProps {\n  reaction: Reaction\n  keyCompoundSymbol?: string\n}\n\nconst ReactionEquation: React.FC<IReactionEquationProps> = (props) => {\n  const { reaction } = props\n  const { findCompound } = useCompounds()\n\n  const keyCompound = findCompound(reaction.keyCompound)\n  const keyCompoundSymbol: string | undefined = keyCompound?.symbol || undefined\n\n  return (\n    <EquationWrapper>\n      {keyCompoundSymbol && (\n        <>\n          <Subindex base=\"r\" subindex={keyCompoundSymbol} />\n          &nbsp;=&nbsp;\n        </>\n      )}\n      <Equation tokenizedEquation={reaction.kineticEquation} />\n    </EquationWrapper>\n  )\n}\n\nexport default ReactionEquation\n\n//\n\nconst EquationWrapper = styled.div`\n  align-items: center;\n  align-self: stretch;\n  background-color: var(--color-grey-lightest);\n  border: 1px solid var(--color-grey-light);\n  border-radius: 5px;\n  box-shadow: 0px 3px 5px rgba(0, 0, 0, 0.1);\n  color: var(--color-grey-dark);\n  display: flex;\n  font-size: 1.8rem;\n  justify-content: center;\n  padding: 1.5rem;\n  margin: 1.5rem 0 1rem;\n\n  span {\n    font-family: \"Comfortaa\", symbol;\n  }\n`\n","export const SCI_REGEX: RegExp = /(\\d+(.\\d+)?([eE]{1,1}[-]?\\d+(.\\d+)?)?)/g\n","import styled from \"styled-components\"\n\n/* Components */\nimport InfoTooltip from \"../forms/InfoTooltip\"\nimport Input from \"../forms/Input\"\n\n/* Helpers */\nimport { validateNotEmpty } from \"../../helpers/validators\"\nimport { SCI_REGEX } from \"../../constants/regexs\"\n\n/* Hooks */\nimport { useState } from \"react\"\n\ninterface IReactionParamInputCardProps {\n  paramSymbol: string | JSX.Element | JSX.Element[]\n  units?: JSX.Element\n  value: string\n  updateValue: (value: string) => void\n}\n\nconst ALLOWED_CHARS = \"0123456789.-+eE\"\n\nconst ReactionParamInputCard: React.FC<IReactionParamInputCardProps> = (\n  props\n) => {\n  const { paramSymbol, value, units, updateValue } = props\n  const [valueInput, setValueInput] = useState<string>(value)\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.value === \"\") {\n      setValueInput(\"\")\n      return\n    }\n\n    // Filter input unallowed characters\n    const filtered = event.target.value\n      .split(\"\")\n      .filter((el) => ALLOWED_CHARS.indexOf(el) > -1)\n      .join(\"\")\n\n    setValueInput(filtered)\n  }\n\n  const validateAndUpdateConstant = () => {\n    if (!validateNotEmpty(valueInput)) {\n      // Reset value\n      setValueInput(valueInput)\n      return\n    }\n\n    const validString = valueInput.match(SCI_REGEX)?.[0]\n    if (!validString) {\n      // Reset value\n      setValueInput(valueInput)\n      return\n    }\n\n    updateValue(validString)\n    setValueInput(validString)\n  }\n\n  return (\n    <ParamInputWrapper>\n      <ParamInputInner>\n        <h1>{paramSymbol}</h1>\n        <Input\n          value={valueInput}\n          type=\"text\"\n          onChange={handleChange}\n          onBlur={validateAndUpdateConstant}\n          transparent\n        />\n        {units && <InfoTooltip text={units} />}\n      </ParamInputInner>\n    </ParamInputWrapper>\n  )\n}\n\nexport default ReactionParamInputCard\n\nconst ParamInputWrapper = styled.div`\n  flex-basis: 50%;\n  flex-shrink: 0;\n  position: relative;\n  z-index: 2;\n\n  @media screen and (max-width: 600px) {\n    flex-basis: 100%;\n  }\n\n  &:hover {\n    z-index: 3;\n  }\n`\n\nconst ParamInputInner = styled.div`\n  position: relative;\n  align-items: center;\n  background-color: var(--color-grey-light);\n  border-radius: 5px;\n  cursor: pointer;\n  display: flex;\n  margin: 0.5rem;\n  padding: 1rem 1.3rem;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n    transform: translateY(-2px);\n  }\n\n  h1 {\n    color: var(--color-grey-dark);\n    font-size: 1.6rem;\n    margin: 0;\n    margin-right: 1rem;\n    flex-grow: 1;\n\n    span {\n      /* Greek symbols */\n      font-family: \"Comfortaa\", symbol;\n    }\n  }\n\n  input {\n    font-size: 1.4rem;\n  }\n`\n","import styled from \"styled-components\"\nimport ReactionParamInputCard from \"./ReactionParamInputCard\"\nimport useSettings from \"../../hooks/useSettings\"\nimport { Equation, SymbolComponent } from \"../MathExpressions\"\nimport { TokenTypes } from \"../../helpers/tokenTypes\"\nimport { KineticModels } from \"../../helpers/reactionTypes\"\nimport {\n  timeUnitsValue,\n  temperatureUnitsValue,\n  volumeUnitsValue,\n  molarUnitsValue,\n  energyUnitsValue,\n} from \"../../helpers/units\"\n\ninterface IReactionKineticParametersProps {\n  compounds: Compound[]\n  reaction: Reaction\n  updateKineticConstant: (key: string, value: string) => void\n}\n\nconst ReactionKineticParameters: React.FC<IReactionKineticParametersProps> = (\n  props\n) => {\n  const { reaction, updateKineticConstant } = props\n  const { settings } = useSettings()\n  const kineticModel: KineticModel = reaction.kineticModel\n\n  const timeUnits = timeUnitsValue(settings.timeUnits)\n  const temperatureUnits = temperatureUnitsValue(settings.temperatureUnits)\n  const volumeUnits = volumeUnitsValue(settings.volumeUnits)\n  const molarUnits = molarUnitsValue(settings.molarUnits)\n  const energyUnits = energyUnitsValue(settings.energyUnits)\n\n  const tokenizedMuUnits = [\n    {\n      type: TokenTypes.Parameter,\n      value: `${timeUnits}`,\n    },\n    { type: TokenTypes.Operator, value: \"^\" },\n    { type: TokenTypes.Parameter, value: `-1` },\n  ]\n\n  const tokenizedKUnits = [\n    {\n      type: TokenTypes.Parameter,\n      value: `${timeUnits}`,\n    },\n    { type: TokenTypes.Operator, value: \"^\" },\n    { type: TokenTypes.Parameter, value: `-1` },\n  ]\n\n  const globalOrder = Object.entries(reaction?.kineticConstants).reduce(\n    (accumulator, [key, value]) => {\n      if (key === \"k_\\\\inf\" || key === \"E_A\") {\n        return accumulator\n      }\n      return accumulator + parseFloat(value)\n    },\n    0\n  )\n\n  if (globalOrder !== 1) {\n    tokenizedKUnits.push({ type: TokenTypes.Operator, value: \"*\" })\n    tokenizedKUnits.push({\n      type: TokenTypes.Parameter,\n      value: `${volumeUnits}`,\n    })\n    tokenizedKUnits.push({ type: TokenTypes.Operator, value: \"^\" })\n    tokenizedKUnits.push({\n      type: TokenTypes.Parameter,\n      value: `${globalOrder - 1}`,\n    })\n    tokenizedKUnits.push({ type: TokenTypes.Operator, value: \"*\" })\n    tokenizedKUnits.push({\n      type: TokenTypes.Parameter,\n      value: `${molarUnits}`,\n    })\n    tokenizedKUnits.push({ type: TokenTypes.Operator, value: \"^\" })\n    tokenizedKUnits.push({\n      type: TokenTypes.Parameter,\n      value: `${-(globalOrder - 1)}`,\n    })\n  }\n\n  const tokenizedActivationEnergyUnits = [\n    {\n      type: TokenTypes.Parameter,\n      value: `${energyUnits}`,\n    },\n    {\n      type: TokenTypes.Operator,\n      value: \"*\",\n    },\n    {\n      type: TokenTypes.Parameter,\n      value: `${molarUnits}`,\n    },\n    {\n      type: TokenTypes.Operator,\n      value: \"^\",\n    },\n    {\n      type: TokenTypes.Parameter,\n      value: \"-1\",\n    },\n    {\n      type: TokenTypes.Operator,\n      value: \"*\",\n    },\n    {\n      type: TokenTypes.Parameter,\n      value: `${temperatureUnits}`,\n    },\n    {\n      type: TokenTypes.Operator,\n      value: \"^\",\n    },\n    {\n      type: TokenTypes.Parameter,\n      value: \"-1\",\n    },\n  ]\n\n  return (\n    <KineticParamsWrapper>\n      {Object.entries(reaction.kineticConstants).map(([param, value]) => {\n        let units\n\n        if (param === \"k_\\\\inf\") {\n          if (kineticModel === KineticModels.hyperbolic) {\n            units = <Equation tokenizedEquation={tokenizedMuUnits} />\n          } else {\n            units = <Equation tokenizedEquation={tokenizedKUnits} />\n          }\n        }\n\n        if (param === \"E_A\") {\n          units = (\n            <Equation tokenizedEquation={tokenizedActivationEnergyUnits} />\n          )\n        }\n\n        return (\n          <ReactionParamInputCard\n            key={param}\n            paramSymbol={<SymbolComponent symbol={param} />}\n            value={value}\n            units={units}\n            updateValue={(value: string) => {\n              updateKineticConstant(param, value)\n            }}\n          />\n        )\n      })}\n    </KineticParamsWrapper>\n  )\n}\n\nexport default ReactionKineticParameters\n\nconst KineticParamsWrapper = styled.div`\n  align-self: stretch;\n  background-color: var(--color-grey-lightest);\n  border-radius: 5px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  margin-top: 0.5rem;\n  padding: 0.5rem;\n\n  input {\n    margin-left: 0;\n  }\n`\n","import { TokenTypes } from \"./tokenTypes\"\nimport { KineticModels } from \"./reactionTypes\"\n\nconst serializeKineticEquation = (\n  reaction: Reaction,\n  compounds: Compound[]\n): Token[] => {\n  const findCompound = (id: string): Compound | undefined => {\n    return compounds.find((c) => c.id === id)\n  }\n\n  const equationTokens: Token[] = []\n  /**\n   * TODO: this is just a placeholder for a future serialization system, maybe\n   * with direct user input!\n   *\n   * Returns tokenized equation with standard notation\n   */\n  switch (reaction.kineticModel) {\n    case KineticModels.hyperbolic:\n      equationTokens.push({ type: TokenTypes.Parameter, value: `<k_\\\\inf>` })\n      addArrheniusExponential(equationTokens)\n\n      reaction.reactants.forEach((reactionCompound) => {\n        const { symbol } = findCompound(reactionCompound.compoundId) as Compound\n        addHyperbolicTerm(equationTokens, symbol)\n      })\n      return equationTokens\n\n    //\n\n    case KineticModels.autocatalytic:\n      equationTokens.push({ type: TokenTypes.Parameter, value: `<k_\\\\inf>` })\n      addArrheniusExponential(equationTokens)\n\n      reaction.reactants.forEach((reactionCompound) => {\n        const { symbol } = findCompound(reactionCompound.compoundId) as Compound\n        addReactantWithExponent(equationTokens, symbol)\n      })\n      reaction.products.forEach((reactionCompound) => {\n        const { symbol } = findCompound(reactionCompound.compoundId) as Compound\n        addProductWithExponent(equationTokens, symbol)\n      })\n      return equationTokens\n\n    //\n\n    default:\n      equationTokens.push({ type: TokenTypes.Parameter, value: `<k_\\\\inf>` })\n      addArrheniusExponential(equationTokens)\n\n      reaction.reactants.forEach((reactionCompound: ReactionCompound) => {\n        const { symbol } = findCompound(reactionCompound.compoundId) as Compound\n        addReactantWithExponent(equationTokens, symbol)\n      })\n      return equationTokens\n  }\n}\n\nexport default serializeKineticEquation\n\n// Helpers\n\nconst addArrheniusExponential = (equationTokens: Token[]): void => {\n  equationTokens.push({ type: TokenTypes.Operator, value: \"*\" })\n  equationTokens.push({ type: TokenTypes.Parameter, value: \"e\" })\n  equationTokens.push({ type: TokenTypes.Operator, value: \"^\" })\n  equationTokens.push({ type: TokenTypes.LeftParenthesis, value: \"(\" })\n  equationTokens.push({ type: TokenTypes.LeftParenthesis, value: \"(\" })\n  equationTokens.push({ type: TokenTypes.Operator, value: \"-\" })\n  equationTokens.push({ type: TokenTypes.Parameter, value: \"<E_A>\" })\n  equationTokens.push({ type: TokenTypes.RightParenthesis, value: \")\" })\n  equationTokens.push({ type: TokenTypes.Operator, value: \"/\" })\n  equationTokens.push({ type: TokenTypes.LeftParenthesis, value: \"(\" })\n  equationTokens.push({ type: TokenTypes.Parameter, value: \"<R>\" })\n  equationTokens.push({ type: TokenTypes.Operator, value: \"*\" })\n  equationTokens.push({ type: TokenTypes.Variable, value: \"{T}\" })\n  equationTokens.push({ type: TokenTypes.RightParenthesis, value: \")\" })\n  equationTokens.push({ type: TokenTypes.RightParenthesis, value: \")\" })\n}\n\nconst addReactantWithExponent = (\n  equationTokens: Token[],\n  symbol: string\n): void => {\n  equationTokens.push({ type: TokenTypes.Operator, value: \"*\" })\n  equationTokens.push({ type: TokenTypes.Variable, value: `{[${symbol}]}` })\n  equationTokens.push({ type: TokenTypes.Operator, value: \"^\" })\n  equationTokens.push({\n    type: TokenTypes.Parameter,\n    value: `<\\\\alpha_${symbol}>`,\n  })\n}\n\nconst addProductWithExponent = (\n  equationTokens: Token[],\n  symbol: string\n): void => {\n  equationTokens.push({ type: TokenTypes.Operator, value: \"*\" })\n  equationTokens.push({ type: TokenTypes.Variable, value: `{[${symbol}]}` })\n  equationTokens.push({ type: TokenTypes.Operator, value: \"^\" })\n  equationTokens.push({\n    type: TokenTypes.Parameter,\n    value: `<\\\\beta_${symbol}>`,\n  })\n}\n\nconst addHyperbolicTerm = (equationTokens: Token[], symbol: string): void => {\n  equationTokens.push({ type: TokenTypes.Operator, value: \"*\" })\n  equationTokens.push({ type: TokenTypes.Variable, value: `{[${symbol}]}` })\n  equationTokens.push({ type: TokenTypes.Operator, value: \"/\" })\n  equationTokens.push({ type: TokenTypes.LeftParenthesis, value: \"(\" })\n  equationTokens.push({ type: TokenTypes.Parameter, value: `<K_${symbol}>` })\n  equationTokens.push({ type: TokenTypes.Operator, value: \"+\" })\n  equationTokens.push({ type: TokenTypes.Variable, value: `{[${symbol}]}` })\n  equationTokens.push({ type: TokenTypes.RightParenthesis, value: \")\" })\n}\n","import styled from \"styled-components\"\n\n/* Constants */\nimport {\n  KINETIC_MODELS,\n  generateKineticConstants,\n} from \"../../constants/kineticModels\"\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Components */\nimport EditModal from \"../EditModal\"\nimport FieldInput from \"../forms/FieldInput\"\nimport Notice from \"../Notice\"\nimport Select from \"../Select\"\nimport SubmitButton from \"../SubmitButton\"\nimport {\n  ModalInputSection,\n  ModalColumnInputSection,\n} from \"../ModalInputSection\"\nimport { FiPlus } from \"react-icons/fi\"\nimport ReactionCompoundList from \"./ReactionCompoundList\"\nimport ReactionEquation from \"./ReactionEquation\"\nimport ReactionKineticParameters from \"./ReactionKineticParameters\"\nimport ReactionPreview from \"./ReactionPreview\"\n\n/* Helpers */\nimport serializeKineticEquation from \"../../helpers/serializeKineticEquation\"\nimport { CompoundTypes } from \"../../helpers/reactionTypes\"\n\n/* Hooks */\nimport { useMemo, useState, useRef } from \"react\"\nimport useCompounds from \"../../hooks/useCompounds\"\nimport useReactions from \"../../hooks/useReactions\"\n\ninterface IReactionEditModalProps {\n  compounds: Compound[]\n  reaction: Reaction\n  closeModal: () => void\n}\n\nconst ReactionEditModal: React.FC<IReactionEditModalProps> = (props) => {\n  const { compounds, reaction, closeModal } = props\n  const { findCompound } = useCompounds()\n  const { reactions, updateReaction } = useReactions()\n  const [closing, setClosing] = useState<boolean>(false)\n  const reactionIndex = reactions.findIndex((rea) => rea.id === reaction.id)\n  /**\n   * Copied state for reaction editing\n   */\n  const [modalReaction, setModalReaction] = useState<Reaction>(\n    JSON.parse(JSON.stringify(reaction))\n  )\n\n  /* Keep a reference to scrolled element */\n  const scrollRef = useRef(document.getElementById(\"scroll-target\"))\n\n  /* For the select input, both for reactants and products */\n  const [selectReactantIndex, setSelectReactantIndex] = useState<\n    number | undefined\n  >(undefined)\n  const [selectProductIndex, setSelectProductIndex] = useState<\n    number | undefined\n  >(undefined)\n\n  /**\n   * Select options\n   */\n  const reactantOptions = useMemo(() => {\n    return compounds\n      .filter((compound) => {\n        for (const reactant of modalReaction.reactants) {\n          if (reactant.compoundId === compound.id) {\n            return false\n          }\n        }\n        return true\n      })\n      .map((compound) => {\n        const index = compounds.findIndex((c) => c.id === compound.id)\n        return {\n          value: index,\n          displayText: compound.symbol,\n          collapsedDisplayText: compound.symbol,\n          hoverBackgroundColor:\n            COMPOUND_COLORS[compound.color as keyof typeof COMPOUND_COLORS],\n        }\n      })\n    // eslint-disable-next-line\n  }, [modalReaction.reactants])\n\n  const productOptions = useMemo(() => {\n    return compounds\n      .filter((compound) => {\n        for (const product of modalReaction.products) {\n          if (product.compoundId === compound.id) {\n            return false\n          }\n        }\n        return true\n      })\n      .map((compound) => {\n        const index = compounds.findIndex((c) => c.id === compound.id)\n        return {\n          value: index,\n          displayText: compound.symbol,\n          collapsedDisplayText: compound.symbol,\n          hoverBackgroundColor:\n            COMPOUND_COLORS[compound.color as keyof typeof COMPOUND_COLORS],\n        }\n      })\n    // eslint-disable-next-line\n  }, [modalReaction.products])\n\n  /**\n   * Handle compound form updates\n   */\n  const getCompoundKey = (\n    compoundType: CompoundType\n  ): \"products\" | \"reactants\" => {\n    if (compoundType === CompoundTypes.Reactant) return \"reactants\"\n    return \"products\"\n  }\n\n  const addCompound = (\n    compoundId: string,\n    compoundType: CompoundType\n  ): void => {\n    /* Determine which array to push to */\n    const key = getCompoundKey(compoundType)\n    const updatedReaction = JSON.parse(JSON.stringify(modalReaction))\n\n    updatedReaction[key].push({\n      compoundId,\n      stoichiometricCoefficient: 1,\n    })\n\n    /* Recalculate kinetic constants */\n    const kineticConstants = generateKineticConstants(\n      updatedReaction.kineticModel,\n      updatedReaction,\n      compounds\n    )\n    updatedReaction.kineticConstants = kineticConstants\n    updatedReaction.kineticEquation = serializeKineticEquation(\n      updatedReaction,\n      compounds\n    )\n\n    setModalReaction(updatedReaction)\n  }\n\n  const updateCompound = (\n    compoundIndex: number,\n    compoundType: CompoundType,\n    updatedCompound: ReactionCompound\n  ): void => {\n    /* Determine which array to push to */\n    const key = getCompoundKey(compoundType)\n    const updatedReaction = { ...modalReaction }\n\n    updatedReaction[key][compoundIndex] = updatedCompound\n\n    setModalReaction(updatedReaction)\n  }\n\n  const removeCompound = (\n    compoundIndex: number,\n    compoundType: CompoundType\n  ) => {\n    /* Determine which array to push to */\n    const key = getCompoundKey(compoundType)\n    const updatedReaction = { ...modalReaction }\n    const deletedCompound = updatedReaction[key][compoundIndex]\n\n    /* Update reaction compounds */\n    updatedReaction[key] = [\n      ...updatedReaction[key].slice(0, compoundIndex),\n      ...updatedReaction[key].slice(\n        compoundIndex + 1,\n        updatedReaction[key].length\n      ),\n    ]\n\n    /* Set keyCompound to undefined if deleted compound is keyCompound */\n    if (deletedCompound.compoundId === modalReaction.keyCompound) {\n      updatedReaction.keyCompound = undefined\n    }\n\n    /* Recalculate kinetic constants and equation */\n    const kineticConstants = generateKineticConstants(\n      updatedReaction.kineticModel as KineticModel,\n      updatedReaction,\n      compounds\n    )\n    updatedReaction.kineticConstants = kineticConstants\n    updatedReaction.kineticEquation = serializeKineticEquation(\n      updatedReaction,\n      compounds\n    )\n\n    setModalReaction(updatedReaction)\n  }\n\n  /**\n   * Handle kinetic constant change\n   */\n\n  const handleKineticConstantUpdate = (key: string, value: string) => {\n    const updatedReaction = JSON.parse(JSON.stringify(modalReaction))\n    updatedReaction.kineticConstants[key] = value\n    setModalReaction(updatedReaction)\n  }\n\n  /* For select state */\n  const selectReactantInitialValue = selectReactantIndex\n    ? {\n        value: selectReactantIndex,\n        displayText: compounds[selectReactantIndex].symbol,\n        collapsedDisplayText: compounds[selectReactantIndex].symbol,\n      }\n    : undefined\n\n  const selectProductInitialValue = selectProductIndex\n    ? {\n        value: selectProductIndex,\n        displayText: compounds[selectProductIndex].symbol,\n        collapsedDisplayText: compounds[selectProductIndex].symbol,\n      }\n    : undefined\n\n  return (\n    <EditModal\n      closing={closing}\n      setClosing={setClosing}\n      handleClose={closeModal}\n    >\n      <ReactionPreview reaction={modalReaction} />\n      <br />\n      <SelectField>\n        <FieldInput\n          fieldName=\"name\"\n          label=\"Reaction name:\"\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            setModalReaction({\n              ...modalReaction,\n              name: event.target.value,\n            })\n          }}\n          value={modalReaction.name}\n        />\n      </SelectField>\n\n      {/* Compounds input */}\n      <ModalInputSection>\n        <CompoundInputWrapper>\n          <h2>Reactants</h2>\n          <AddCompound>\n            <Select\n              defaultDisplayValue=\"Compound...\"\n              hoverIcon={<FiPlus />}\n              initialValue={selectReactantInitialValue}\n              selectOptions={reactantOptions}\n              onSelectionChange={(index: number | undefined) => {\n                if (index !== undefined) {\n                  addCompound(compounds[index].id, CompoundTypes.Reactant)\n                }\n                setSelectReactantIndex(undefined)\n              }}\n            />\n          </AddCompound>\n          <CompoundInputInner>\n            {modalReaction.reactants.length !== 0 ? (\n              <ReactionCompoundList\n                reactionIndex={reactionIndex}\n                reactionCompounds={modalReaction.reactants}\n                removeCompound={removeCompound}\n                updateCompound={updateCompound}\n                compoundType={CompoundTypes.Reactant}\n              />\n            ) : (\n              <Notice>No compounds...</Notice>\n            )}\n          </CompoundInputInner>\n        </CompoundInputWrapper>\n\n        <CompoundInputWrapper>\n          <h2>Products</h2>\n          <AddCompound>\n            <Select\n              defaultDisplayValue=\"Compound...\"\n              hoverIcon={<FiPlus />}\n              initialValue={selectProductInitialValue}\n              selectOptions={productOptions}\n              onSelectionChange={(index: number | undefined) => {\n                if (index !== undefined) {\n                  addCompound(compounds[index].id, CompoundTypes.Product)\n                }\n                setSelectProductIndex(undefined)\n              }}\n            />\n          </AddCompound>\n          <CompoundInputInner>\n            {modalReaction.products.length !== 0 ? (\n              <ReactionCompoundList\n                reactionIndex={reactionIndex}\n                reactionCompounds={modalReaction.products}\n                removeCompound={removeCompound}\n                updateCompound={updateCompound}\n                compoundType={CompoundTypes.Product}\n              />\n            ) : (\n              <Notice>No compounds...</Notice>\n            )}\n          </CompoundInputInner>\n        </CompoundInputWrapper>\n      </ModalInputSection>\n\n      {/* Kinetics input */}\n      <ModalColumnInputSection>\n        <h2>Kinetics</h2>\n        <SelectField>\n          <p>Kinetic model</p>\n          <Select\n            initialValue={{\n              value: modalReaction.kineticModel,\n              displayText: KINETIC_MODELS[modalReaction.kineticModel],\n              collapsedDisplayText: KINETIC_MODELS[modalReaction.kineticModel],\n            }}\n            selectOptions={KINETIC_MODELS.map((model, index) => ({\n              value: index,\n              displayText: model,\n              collapsedDisplayText: model,\n            }))}\n            onSelectionChange={(value) => {\n              const updatedReaction = JSON.parse(JSON.stringify(modalReaction))\n\n              updatedReaction.kineticConstants = generateKineticConstants(\n                value as KineticModel,\n                modalReaction,\n                compounds\n              )\n              updatedReaction.kineticModel = value\n              updatedReaction.kineticEquation = serializeKineticEquation(\n                updatedReaction,\n                compounds\n              )\n\n              setModalReaction(updatedReaction)\n            }}\n          />\n        </SelectField>\n        <SelectField>\n          <p>Key compound</p>\n          <Select\n            defaultDisplayValue=\"Reactant...\"\n            initialValue={\n              modalReaction.keyCompound !== undefined\n                ? {\n                    value: modalReaction.keyCompound,\n                    displayText: (\n                      findCompound(modalReaction.keyCompound) as Compound\n                    ).symbol,\n                    collapsedDisplayText: (\n                      findCompound(modalReaction.keyCompound) as Compound\n                    ).symbol,\n                  }\n                : undefined\n            }\n            selectOptions={modalReaction.reactants.map((reactionCompound) => ({\n              value: reactionCompound.compoundId,\n              displayText: (\n                findCompound(reactionCompound.compoundId) as Compound\n              ).symbol,\n              collapsedDisplayText: (\n                findCompound(reactionCompound.compoundId) as Compound\n              ).symbol,\n            }))}\n            onSelectionChange={(value: string | undefined) => {\n              const updatedReaction = JSON.parse(JSON.stringify(modalReaction))\n              updatedReaction.keyCompound = value\n              setModalReaction(updatedReaction)\n            }}\n          />\n        </SelectField>\n        <ReactionEquation reaction={modalReaction} />\n        <ReactionKineticParameters\n          reaction={modalReaction}\n          compounds={compounds}\n          updateKineticConstant={handleKineticConstantUpdate}\n        />\n      </ModalColumnInputSection>\n\n      <SubmitButton\n        color=\"green\"\n        onClick={() => {\n          updateReaction(reaction.id, modalReaction)\n          scrollRef?.current?.scrollTo({ top: 0, behavior: \"smooth\" })\n          setClosing(true)\n        }}\n      >\n        Done\n      </SubmitButton>\n    </EditModal>\n  )\n}\n\nexport default ReactionEditModal\n\nconst SelectField = styled.div`\n  display: flex;\n  align-items: center;\n  width: 50%;\n\n  p {\n    color: var(--color-grey-dark);\n    flex-grow: 1;\n    font-size: 1rem;\n    margin-right: 1.4rem;\n    flex-basis: 50%;\n  }\n\n  div {\n    flex-basis: 45%;\n  }\n\n  @media screen and (max-width: 750px) {\n    width: 100%;\n  }\n`\n\nconst CompoundInputWrapper = styled.div`\n  flex-basis: 50%;\n\n  @media (max-width: 700px) {\n    flex-basis: 100%;\n  }\n`\n\nconst CompoundInputInner = styled.div`\n  background-color: var(--color-grey-lightest);\n  border: 1px solid var(--color-grey-light);\n  border-radius: 5px;\n  box-shadow: 0px 3px 5px rgba(0, 0, 0, 0.1);\n  margin: 0.5rem 0.3rem;\n  padding: 0.5rem;\n`\n\nconst AddCompound = styled.div`\n  display: flex;\n  margin: 0.3rem;\n\n  & > button {\n    margin-left: 0.5rem;\n  }\n`\n","/* Components */\nimport ReactionCard from \"./ReactionCard\"\nimport ReactionEditModal from \"./ReactionEditModal\"\nimport NoResource from \"../NoResource\"\n\n/* Hooks */\nimport { useMemo, useState } from \"react\"\nimport useCompounds from \"../../hooks/useCompounds\"\nimport useReactions from \"../../hooks/useReactions\"\n\nconst ReactionList: React.FC = () => {\n  const { compounds } = useCompounds()\n  const { reactions, removeReaction } = useReactions()\n  const [editedReactionId, setEditedReactionId] = useState<string | undefined>(\n    undefined\n  )\n\n  const editReaction = (id?: string) => setEditedReactionId(id)\n  const editedReaction = useMemo(\n    () =>\n      editedReactionId\n        ? reactions.find((r) => r.id === editedReactionId)\n        : undefined,\n    [reactions, editedReactionId]\n  )\n\n  return (\n    <>\n      {reactions.length === 0 && (\n        <NoResource>No reactions added yet</NoResource>\n      )}\n\n      {reactions.map((reaction, index) => (\n        <ReactionCard\n          reaction={reaction}\n          reactionIndex={index}\n          editReaction={(): void => {\n            editReaction(reaction.id)\n          }}\n          removeReaction={(): void => {\n            removeReaction(reaction.id)\n          }}\n          key={index}\n        >\n          Reaction\n        </ReactionCard>\n      ))}\n\n      {/* Edit modal */}\n      {editedReactionId && (\n        <ReactionEditModal\n          compounds={compounds}\n          reaction={editedReaction as Reaction}\n          closeModal={() => editReaction()}\n        />\n      )}\n    </>\n  )\n}\n\nexport default ReactionList\n","/* Components */\nimport Button from \"../components/Button\"\nimport PageTitle from \"../components/PageTitle\"\nimport ReactionList from \"../components/reactions/ReactionList\"\nimport { FiPlus, FiTrash2 } from \"react-icons/fi\"\n\n/* Hooks */\nimport useReactions from \"../hooks/useReactions\"\n\nconst deleteButtonStyle = `\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  padding: 0.6rem 1rem;\n`\n\nconst ReactionsPage: React.FC = () => {\n  const { addReaction, resetReactions } = useReactions()\n\n  const handleResetReactions = () => {\n    const confirmation = window.confirm(\n      \"Are you sure you want to delete all reactions?\"\n    )\n    if (confirmation) resetReactions()\n  }\n\n  return (\n    <>\n      <PageTitle>Reactions</PageTitle>\n      <Button color=\"green\" onClick={addReaction}>\n        Add <FiPlus />\n      </Button>\n      <Button\n        color=\"red\"\n        buttonStyle={deleteButtonStyle}\n        onClick={handleResetReactions}\n      >\n        <FiTrash2 size={20} />\n      </Button>\n      <ReactionList />\n    </>\n  )\n}\n\nexport default ReactionsPage\n","interface Ticks {\n  tickDistance: number\n  totalTicks: number\n}\n\nconst DISTANCE_FROM_CORNER = 30\nconst AVERAGE_TICK_DISTANCE = 50\n\n/**\n * Main function to be exported an used in /components/Plot.tsx\n * @param canvas\n */\n\ninterface DrawPlotParams {\n  canvas: HTMLCanvasElement\n  data: Point[][]\n  colors: string[]\n}\n\nexport const drawPlot = ({ canvas, data, colors }: DrawPlotParams) => {\n  const context = canvas.getContext(\"2d\")\n  if (!context) return\n\n  context.clearRect(0, 0, context.canvas.width, context.canvas.height)\n  context.lineWidth = 1\n\n  const yAxisTicks = getTicksYAxis({ height: context.canvas.height, data })\n\n  drawVerticalAxis({ context, ticks: yAxisTicks })\n  drawHorizontalAxis({ context, ticks: yAxisTicks }) // TODO: Change for x axis ticks\n  drawPlotCurve({\n    context,\n    data,\n    colors,\n    yAxisTicks,\n  })\n}\n\n/**\n * Auxiliary draw functions\n */\ninterface DrawAxisParams {\n  context: CanvasRenderingContext2D\n  ticks: Ticks\n}\n\nconst drawVerticalAxis = ({ context, ticks }: DrawAxisParams) => {\n  const width = context.canvas.width\n  const height = context.canvas.height\n  const effectiveHeight = height - DISTANCE_FROM_CORNER * 2\n\n  const { totalTicks, tickDistance } = ticks\n\n  // Once we get the total ticks, it's time to draw them.\n  // We use the entire canvas height for the ticks, so that the\n  // plot always fits in the designated area.\n  for (let i = 1; i <= totalTicks; i++) {\n    const yPosition =\n      height - DISTANCE_FROM_CORNER - (effectiveHeight * i) / totalTicks\n\n    context.beginPath()\n    context.strokeStyle = \"hsl(213, 20%, 20%)\"\n    context.moveTo(10, yPosition)\n    context.lineTo(DISTANCE_FROM_CORNER, yPosition)\n    context.stroke()\n\n    context.beginPath()\n    context.strokeStyle = \"hsl(213, 20%, 85%)\"\n    context.moveTo(DISTANCE_FROM_CORNER, yPosition)\n    context.lineTo(width - DISTANCE_FROM_CORNER, yPosition)\n    context.stroke()\n\n    context.font = \"16px Mulish\"\n    context.fillStyle = \"hsl(213, 20%, 80%)\"\n    context.textAlign = \"right\"\n    context.fillText(\n      formatTickValue(i * tickDistance),\n      width - DISTANCE_FROM_CORNER,\n      yPosition + 18\n    )\n  }\n\n  // Draw actual axis line\n  context.strokeStyle = \"hsl(213, 20%, 20%)\"\n  context.beginPath()\n  context.moveTo(DISTANCE_FROM_CORNER, DISTANCE_FROM_CORNER)\n  context.lineTo(DISTANCE_FROM_CORNER, height - DISTANCE_FROM_CORNER)\n  context.stroke()\n}\n\nconst drawHorizontalAxis = ({ context, ticks }: DrawAxisParams) => {\n  const height = context.canvas.height\n  const width = context.canvas.width\n\n  context.strokeStyle = \"hsl(213, 20%, 30%)\"\n  context.beginPath()\n  context.moveTo(DISTANCE_FROM_CORNER, height - DISTANCE_FROM_CORNER)\n  context.lineTo(width - DISTANCE_FROM_CORNER, height - DISTANCE_FROM_CORNER)\n  context.stroke()\n}\n\ninterface DrawPlotCurveParams {\n  context: CanvasRenderingContext2D\n  data: Point[][]\n  colors: string[]\n  yAxisTicks: Ticks\n}\n\nconst drawPlotCurve = (params: DrawPlotCurveParams) => {\n  const { colors, context, data, yAxisTicks } = params\n  const maxTimeValue = data.length !== 0 ? data[0][data[0].length - 1]?.x : 10\n  const maxYAxisValue = yAxisTicks.tickDistance * yAxisTicks.totalTicks\n\n  const plotAreaWidth = context.canvas.width - DISTANCE_FROM_CORNER * 2\n  const plotAreaHeight = context.canvas.height - DISTANCE_FROM_CORNER * 2\n\n  for (let j = 0; j < data.length; j++) {\n    context.beginPath()\n    const plotPath = new Path2D()\n    const points = data[j]\n    const color = colors[j]\n    for (let i = 1; i < points.length; i++) {\n      plotPath.moveTo(\n        DISTANCE_FROM_CORNER + (plotAreaWidth * points[i - 1].x) / maxTimeValue,\n        DISTANCE_FROM_CORNER +\n          plotAreaHeight * (1 - points[i - 1].y / maxYAxisValue)\n      )\n      plotPath.lineTo(\n        DISTANCE_FROM_CORNER + (plotAreaWidth * points[i].x) / maxTimeValue,\n        DISTANCE_FROM_CORNER +\n          plotAreaHeight * (1 - points[i].y / maxYAxisValue)\n      )\n    }\n    context.lineWidth = 4\n    context.strokeStyle = color\n    context.stroke(plotPath)\n  }\n}\n\n/**\n * Other auxiliary functions\n */\n\ninterface GetTicksYAxisParams {\n  height: number\n  data: Point[][]\n}\n\n// Gets total ticks and tick distance for y axis\nconst getTicksYAxis = (params: GetTicksYAxisParams): Ticks => {\n  const { data, height } = params\n\n  const targetTicks =\n    Math.floor((height - DISTANCE_FROM_CORNER) / AVERAGE_TICK_DISTANCE) || 10\n  const maxValue = maxFunctionalValue(data) || 10\n  const tickDistance = getTickDistance(maxValue, targetTicks)\n  const totalTicks = Math.ceil(maxValue / tickDistance)\n\n  return { tickDistance, totalTicks }\n}\n\n// Gets max functional value to set axis values correctly\nconst maxFunctionalValue = (data: Point[][]) => {\n  const maxValuesForEachVariable: number[] = []\n\n  if (data.length === 0) return 10\n\n  data.forEach((points: Point[]) => {\n    maxValuesForEachVariable.push(\n      Math.max(...points.map((point: Point) => point.y))\n    )\n  })\n\n  return Math.max(...maxValuesForEachVariable)\n}\n\n// Gets tick distance given a max value and a target tick amount\nconst getTickDistance = (maxValue: number, targetTickAmount: number) => {\n  const powerOfTen = getPowerOfTen(maxValue)\n\n  if (maxValue / 10 ** powerOfTen < 3) {\n    return 10 ** (powerOfTen - 1)\n  }\n  return 10 ** powerOfTen\n\n  // if (Math.ceil(maxValue / baseTickDistance) < targetTickAmount) {\n\n  // }\n\n  // while ()\n  // const rawDistance = maxValue / (targetTickAmount + 1)\n\n  // let multiplier = 1\n  // if (rawDistance > 1) {\n  //   while (rawDistance / (multiplier * 10) > 1) {\n  //     multiplier = multiplier * 10\n  //   }\n  // } else {\n  //   multiplier = 0.1\n  //   while (rawDistance / (multiplier * 0.1) < 1) {\n  //     multiplier = multiplier * 0.1\n  //   }\n  // }\n\n  // return Math.floor(rawDistance / multiplier) * multiplier\n}\n\n// Format tick value to 1 decimals and scientific notation if needed\nconst formatTickValue = (value: number) => {\n  if (value >= 100 || value < 0.1) {\n    const stringValue = value.toString()\n    return `${stringValue[0]}.${stringValue[1]}e${getPowerOfTen(value)}`\n  }\n\n  if (value < 100 && value >= 10) return value.toFixed(0)\n  if (value < 10 && value >= 1) return value.toFixed(1)\n  return value.toFixed(2) // if (value < 1 && value >= 0.1)\n}\n\n// Get power of ten for scientific notation\nconst getPowerOfTen = (value: number) => {\n  let power = 0\n\n  if (value > 1) {\n    while (value / 10 ** power >= 10) {\n      power++\n    }\n    return power\n  }\n\n  while (value * 10 ** power <= 0.1) {\n    power++\n  }\n  if (power === 0) return power\n  return power * -1\n}\n","import { useEffect, useCallback, useRef, useState } from \"react\"\nimport styled from \"styled-components\"\nimport { drawPlot } from \"../helpers/drawPlot\"\n\ninterface PlotProps {\n  data: Point[][]\n  colors: string[]\n}\n\nconst Plot = (props: PlotProps) => {\n  const { colors, data } = props\n\n  // See this article for more reference:\n  // https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n\n  const canvasRef = useRef<HTMLCanvasElement | null>(null)\n  const [canvasWidth, setCanvasWidth] = useState(window.innerWidth - 130)\n  const [canvasHeight, setCanvasHeight] = useState(window.innerHeight - 80)\n\n  const resizeHandler = useCallback(() => {\n    setCanvasWidth(window.innerWidth - 130)\n    setCanvasHeight(window.innerHeight - 120)\n\n    // Re-draw plot\n    drawPlot({\n      canvas: canvasRef.current as HTMLCanvasElement,\n      data,\n      colors,\n    })\n    // eslint-disable-next-line\n  }, [data])\n\n  useEffect(() => {\n    // Event listener to set width and height of canvas programatically\n    window.addEventListener(\"resize\", resizeHandler)\n    drawPlot({\n      canvas: canvasRef.current as HTMLCanvasElement,\n      data,\n      colors,\n    })\n\n    // Cleanup for resize handler\n    return () => window.removeEventListener(\"resize\", resizeHandler)\n\n    // eslint-disable-next-line\n  }, [resizeHandler, data])\n\n  return <Canvas ref={canvasRef} height={canvasHeight} width={canvasWidth} />\n}\n\nexport default Plot\n\nconst Canvas = styled.canvas`\n  border-radius: 5px;\n  background-color: var(--color-grey-lightest);\n`\n","import styled from \"styled-components\"\nimport useCompounds from \"../../hooks/useCompounds\"\nimport { FaCheck } from \"react-icons/fa\"\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\nimport type { Dispatch, SetStateAction } from \"react\"\n\ninterface VariableCheckboxesProps {\n  selectedVariables: number[]\n  setSelectedVariables: Dispatch<SetStateAction<number[]>>\n}\n\nconst VariableCheckboxes = (props: VariableCheckboxesProps) => {\n  const { selectedVariables, setSelectedVariables } = props\n  const { compounds } = useCompounds()\n\n  const isToggled = (compoundIndex: number): boolean => {\n    const foundIndex = selectedVariables.findIndex(\n      (value) => value === compoundIndex\n    )\n    if (foundIndex === -1) return false\n    return true\n  }\n\n  const toggleIndex = (compoundIndex: number): void => {\n    const foundIndex = selectedVariables.findIndex(\n      (value) => value === compoundIndex\n    )\n    if (foundIndex === -1) {\n      // Add variable to selected ones\n      setSelectedVariables([...selectedVariables, compoundIndex])\n      return\n    }\n\n    // Remove from selected ones if found\n    setSelectedVariables([\n      ...selectedVariables.slice(0, foundIndex),\n      ...selectedVariables.slice(foundIndex + 1, selectedVariables.length),\n    ])\n  }\n\n  return (\n    <Wrapper>\n      {compounds.map((compound, index) => {\n        const color =\n          COMPOUND_COLORS[compound.color as keyof typeof COMPOUND_COLORS]\n        return (\n          <CheckboxWrapper\n            onClick={() => toggleIndex(index)}\n            toggled={isToggled(index)}\n            key={compound.id}\n            color={color}\n          >\n            <ColorBadge color={color} toggled={isToggled(index)} />\n            <CompoundSymbol>{compound.symbol}</CompoundSymbol>\n            <Checkbox>\n              {selectedVariables.includes(index) ? <FaCheck /> : null}\n            </Checkbox>\n          </CheckboxWrapper>\n        )\n      })}\n    </Wrapper>\n  )\n}\n\nexport default VariableCheckboxes\ninterface CheckboxProps {\n  color: string\n  toggled: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`\n\nconst CheckboxWrapper = styled.button<CheckboxProps>`\n  background-color: ${(props) =>\n    props.toggled ? props.color : \"var(--color-grey-lighter)\"};\n  border-radius: 5px;\n  border: none;\n  margin-bottom: 0.5rem;\n  padding: 0.5rem;\n  display: flex;\n  align-items: center;\n\n  &:hover {\n    ${(props) =>\n      props.toggled\n        ? \"opacity: 0.8\"\n        : \"background-color: var(--color-grey-lightest)\"};\n  }\n`\n\nconst ColorBadge = styled.div<CheckboxProps>`\n  width: 1rem;\n  height: 1rem;\n  border-radius: 50%;\n  background-color: ${(props) => props.color};\n  margin-right: 1rem;\n  box-shadow: ${(props) =>\n    props.toggled ? \"\" : \"0 2px 5px -2px var(--color-grey-normal)\"};\n`\n\nconst CompoundSymbol = styled.span`\n  flex-grow: 1;\n  text-align: left;\n  font-size: 1rem;\n`\n\nconst Checkbox = styled.div`\n  width: 1.1rem;\n  height: 1.1rem;\n  border: 2px solid var(--color-grey-darker);\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  svg {\n    fill: var(--color-grey-darker);\n  }\n`\n","import styled from \"styled-components\"\nimport { FiX } from \"react-icons/fi\"\nimport VariableCheckboxes from \"./VariableCheckboxes\"\nimport type { Dispatch, SetStateAction } from \"react\"\n\ninterface SidebarOptionsProps {\n  optionsVisible: boolean\n  toggleOptionsVisible: () => void\n  selectedVariables: number[]\n  setSelectedVariables: Dispatch<SetStateAction<number[]>>\n}\n\nconst SidebarOptions = (props: SidebarOptionsProps) => {\n  const {\n    optionsVisible,\n    toggleOptionsVisible,\n    selectedVariables,\n    setSelectedVariables,\n  } = props\n\n  return (\n    <SidebarOptionsWrapper visible={optionsVisible}>\n      <CloseButton onClick={toggleOptionsVisible}>\n        <FiX size={20} />\n      </CloseButton>\n      <h3>Variables</h3>\n      <VariableCheckboxes {...{ selectedVariables, setSelectedVariables }} />\n    </SidebarOptionsWrapper>\n  )\n}\n\nexport default SidebarOptions\n\ninterface SidebarWrapperProps {\n  visible: boolean\n}\n\nconst SidebarOptionsWrapper = styled.div<SidebarWrapperProps>`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  width: calc(300px - 2rem);\n  padding: 1rem;\n  padding-top: 2rem;\n  transform: ${(props) =>\n    props.visible ? \"translateX(0px)\" : \"translateX(300px)\"};\n  background-color: var(--color-grey-light);\n  transition: all 0.15s ease-in-out;\n  box-shadow: ${(props) =>\n    props.visible ? \"0 0 20px -5px var(--color-grey-normal)\" : \"unset\"};\n`\n\nconst CloseButton = styled.div`\n  position: absolute;\n  top: 0.5rem;\n  left: 0.5rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0.5rem;\n  border-radius: 5px;\n  transition: background-color 0.15s ease-in-out;\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`\n","import useSimulationResults from \"../hooks/useSimulationResults\"\n\nconst useGetData = () => {\n  const { simulationResults } = useSimulationResults()\n\n  /**\n   * Maps requested variable data to Victory-readable data\n   */\n  const variableData = (variable: string): Point[] => {\n    return simulationResults?.map((data: TimePoint) => {\n      return {\n        x: data.t,\n        y: data[variable],\n      }\n    }) as Point[]\n  }\n\n  return { variableData }\n}\n\nexport default useGetData\n","import styled from \"styled-components\"\n\n/* Components */\nimport PageTitle from \"../components/PageTitle\"\nimport Plot from \"../components/Plot\"\nimport SidebarOptions from \"../components/results/SidebarOptions\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../constants/compoundColors\"\n\n/* Hooks */\nimport { useMemo, useState } from \"react\"\nimport useCompounds from \"../hooks/useCompounds\"\nimport useGetData from \"../hooks/useGetData\"\n\nconst ResultsPage: React.VFC = () => {\n  const { variableData } = useGetData()\n  const { compounds } = useCompounds()\n  const [selectedVariables, setSelectedVariables] = useState<number[]>([0])\n  const [optionsVisible, setOptionsVisible] = useState<boolean>(false)\n\n  const toggleOptionsVisible = () => setOptionsVisible(!optionsVisible)\n\n  /* Derived state from selectedVariable */\n\n  const [data, colors] = useMemo(() => {\n    const data: Point[][] = []\n    const colors: string[] = []\n\n    selectedVariables.forEach((compoundIndex: number) => {\n      const selectedCompound = compounds[compoundIndex]\n      const compoundData: Point[] = variableData(`[${selectedCompound.symbol}]`)\n      data.push(compoundData)\n      colors.push(\n        COMPOUND_COLORS[selectedCompound.color as keyof typeof COMPOUND_COLORS]\n      )\n    })\n\n    return [data, colors]\n    // eslint-disable-next-line\n  }, [selectedVariables])\n\n  return (\n    <>\n      <PageTitle>Results</PageTitle>\n      <OptionsButton onClick={toggleOptionsVisible}>Options</OptionsButton>\n      <SidebarOptions\n        {...{\n          optionsVisible,\n          toggleOptionsVisible,\n          selectedVariables,\n          setSelectedVariables,\n        }}\n      />\n      <Plot data={data} colors={colors} />\n    </>\n  )\n}\n\nexport default ResultsPage\n\nconst OptionsButton = styled.button`\n  float: right;\n  margin-bottom: 0.5rem;\n  padding: 0.8rem;\n  background-color: var(--color-grey-lighter);\n  border: none;\n  font-size: 1rem;\n  border-radius: 5px;\n\n  &:hover {\n    background-color: var(--color-grey-lightest);\n  }\n`\n","import { Switch, Redirect, Route } from \"react-router-dom\"\n\n/* Hooks */\nimport useSimulationResults from \"./hooks/useSimulationResults\"\nimport useVersionControl from \"./hooks/useVersionControl\"\n\n/* Pages */\nimport CompoundsPage from \"./pages/CompoundsPage\"\nimport SettingsPage from \"./pages/SettingsPage\"\nimport ReactionsPage from \"./pages/ReactionsPage\"\nimport ResultsPage from \"./pages/ResultsPage\"\n\nconst Routes = () => {\n  const { simulationResults } = useSimulationResults()\n\n  useVersionControl()\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={CompoundsPage} />\n      <Route path=\"/compounds\" component={CompoundsPage} />\n      <Route path=\"/reactions\" component={ReactionsPage} />\n      <Route path=\"/settings\" component={SettingsPage} />\n\n      {/* Redirect for deployed URL */}\n      <Route path=\"/batch-simulator\">\n        <Redirect\n          to={{\n            pathname: \"/\",\n          }}\n        />\n      </Route>\n\n      {/* Redirect /results to / if no data is available */}\n      <Route path=\"/results\" component={ResultsPage}>\n        {simulationResults?.length ? (\n          <ResultsPage />\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/\",\n            }}\n          />\n        )}\n      </Route>\n    </Switch>\n  )\n}\n\nexport default Routes\n","import { BrowserRouter as Router } from \"react-router-dom\"\nimport { Provider } from \"react-redux\"\nimport store from \"./store\"\nimport GlobalStyles from \"./GlobalStyles\"\n\n/* Layouts */\nimport MainLayout from \"./layouts/MainLayout\"\n\n/* Components */\nimport Routes from \"./Routes\"\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Router>\n        <GlobalStyles />\n        <MainLayout>\n          <Routes />\n        </MainLayout>\n      </Router>\n    </Provider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}