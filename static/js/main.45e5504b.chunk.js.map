{"version":3,"sources":["helpers/tokenization.tsx","helpers/localStorage.ts","features/compoundsSlice.ts","features/reactionsSlice.ts","features/settingsSlice.ts","features/simulationResultsSlice.ts","store.ts","GlobalStyles.tsx","components/Button.tsx","hooks/useStore.tsx","hooks/useSettings.ts","types/Reaction.tsx","hooks/useReactions.tsx","constants/compoundColors.tsx","hooks/useCompounds.tsx","hooks/useSimulationResults.ts","helpers/tokenParser.tsx","helpers/reactions.tsx","hooks/useSimulate.tsx","components/Sidebar.tsx","layouts/MainLayout.tsx","components/PageTitle.tsx","components/CardButton.tsx","components/compounds/CompoundCard.tsx","components/EditModal.tsx","components/forms/Error.tsx","components/forms/Input.tsx","components/forms/InfoTooltip.tsx","components/forms/FieldInput.tsx","components/SubmitButton.tsx","helpers/validators.tsx","components/compounds/CompoundEditModal.tsx","components/NoResource.tsx","components/compounds/CompoundList.tsx","pages/CompoundsPage.tsx","components/settings/InputSection.tsx","components/settings/OperatingTimesSection.tsx","components/settings/UnitsSection.tsx","components/forms/CheckboxInput.tsx","components/settings/HeatExchangeSection.tsx","pages/SettingsPage.tsx","components/Notice.tsx","components/reactions/ReactionPreview.tsx","components/reactions/ReactionCard.tsx","constants/kineticModels.tsx","components/Select.tsx","components/ModalInputSection.tsx","components/reactions/ReactionCompoundCard.tsx","components/reactions/ReactionCompoundList.tsx","components/MathExpressions.tsx","components/reactions/ReactionEquation.tsx","components/reactions/ReactionParamInputCard.tsx","components/reactions/ReactionKineticParameters.tsx","helpers/serializeKineticEquation.ts","components/reactions/ReactionEditModal.tsx","components/reactions/ReactionList.tsx","pages/ReactionsPage.tsx","helpers/drawPlot.ts","components/Plot.tsx","components/results/VariableCheckboxes.tsx","components/results/SidebarOptions.tsx","hooks/useGetData.tsx","pages/ResultsPage.tsx","Routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TokenTypes","loadFromKey","key","serializedSlice","localStorage","getItem","JSON","parse","err","saveToKey","state","stringify","setItem","error","console","STORAGE_KEY","initialState","compoundsSlice","createSlice","name","reducers","add","action","payload","update","index","findIndex","c","id","compound","remove","slice","length","reset","actions","reactionsSlice","r","reaction","removeCompound","compoundId","forEach","reactants","filter","reactionCompound","products","keyCompound","undefined","reactionTime","deadTime","timeStep","timeUnits","volumeUnits","molarUnits","massUnits","temperatureUnits","isothermal","initialTemperature","settingsSlice","save","saveField","field","value","simulationResultsSlice","store","configureStore","reducer","compounds","compoundsReducer","reactions","reactionsReducer","settings","settingsReducer","simulationResults","simulationResultsReducer","GlobalStyles","createGlobalStyle","Button","styled","button","props","colorsBase","color","colorsHover","buttonStyle","useAppDispatch","useDispatch","useAppSelector","useSelector","useSettings","dispatch","useEffect","saveSettings","newSettings","CompoundType","KineticModel","assoc","prec","Token","type","this","useReactions","resetReactions","addReaction","newReaction","randomstring","generate","kineticModel","kineticConstants","E_A","kineticEquation","Parameter","Operator","LeftParenthesis","RightParenthesis","Variable","updateReaction","updatedReaction","removeCompoundFromReactions","removeReaction","COMPOUND_COLORS_CODES","COMPOUND_COLORS","orange","yellow","lime","green1","green2","waterGreen1","waterGreen2","skyBlue1","skyBlue2","blue1","blue2","violet1","violet2","pink1","pink2","pink3","red1","red2","useCompounds","unusedColor","colorKeys","usedColors","foundColor","k","addCompound","newCompound","concentration","molecularWeight","symbol","findCompound","find","updateCompound","updatedCompound","removeAllCompounds","useSimulationResults","saveSimulationResults","newSimulationResults","replaceSigns","tokenizedEquation","i","parenthesisFound","getCoefficientForComponent","baseStoichiometricCoefficient","getStoichiomericCoefficientForKeyCompound","coefficient","stoichiometricCoefficient","CONSTANTS","e","R","T","useSimulate","simulate","parsedReactions","parseReactionEquations","initialValues","t","results","executeSimulation","parsedReaction","parseParametersAndVariables","tokens","outputQueue","operationStack","peek","array","token","push","associativity","precedence","pop","concat","reverse","parseEquation","mergeCompounds","kineticEquationCopy","replace","parsedCompounds","Object","assign","resultsInitialValues","iterator","endTime","rangeIterator","next","result","done","explicitEulerStep","createSimulationIterator","oldTimePoint","newTimePoint","reactionRates","map","calculateReactionRate","entries","variable","rateOfChange","calculateNetRateOfChange","nonNegative","reactionRate","resultStack","b","a","Sidebar","history","useHistory","useState","expanded","setExpanded","navigateTo","route","iconProps","size","SidebarWrapper","href","onClick","event","preventDefault","SidebarLinkWrapper","IconWrapper","title","icon","SidebarLink","div","MainLayout","children","MainLayoutWrapper","MainContentWrapper","MainContent","PageTitle","h2","CardButton","CompoundCard","editCompound","CompoundCardWrapper","CompoundCardInner","CompoundTile","li","EditModal","closing","setClosing","handleClose","closeModal","setTimeout","EditModalWrapper","EditModalInner","CloseButton","ErrorWrapper","big","Error","className","Input","input","errors","InfoTooltip","text","Icon","InfoWrapper","Info","FieldInputWrapper","row","LabelWrapper","FieldInput","fieldName","label","tooltip","onBlur","onChange","htmlFor","autoComplete","SubmitButton","validateEqual","validateNotEmpty","validateGreaterThan","threshold","equal","CompoundEditModal","compoundIndex","comp","validateUnicity","formik","useFormik","validate","values","onSubmit","window","scrollTo","top","behavior","Form","handleSubmit","handleChange","form","NoResource","p","CompoundList","editedCompoundId","setEditedCompoundId","editedCompound","useMemo","CompoundListWrapper","ul","CompoundsPage","confirm","InputSection","InputSectionWrapper","InputSectionInner","OperatingTimesSection","UnitsSection","CheckboxInput","CheckboxInputWrapper","Checkbox","setFieldValue","toggled","HeatExchangeSection","SettingsPage","sectionProps","Notice","ReactionPreview","ReactionPreviewWrapper","CompoundWrapper","ReactionCard","reactionIndex","editReaction","ReactionCardWrapper","ReactionInfo","ReactionName","KINETIC_MODELS","generateKineticConstants","model","hyperbolic","generateHiperbolicModelConstants","autocatalytic","generateAutocatalyticModelConstants","generateSimpleModelConstants","updatedExponents","paramKey","reactantExponent","oldConstant","semiSaturationConstant","productExponent","Select","alignment","defaultDisplayValue","hoverIcon","initialValue","onSelectionChange","selectOptions","selecting","setSelecting","currentValue","setCurrentValue","useRef","selectRef","current","document","getElementById","clickOutsideHandler","useCallback","contains","target","toggleSelecting","removeEventListener","addEventListener","selectValue","currentValueOption","option","SelectWrapper","SelectValue","collapsedDisplayText","SelectOptions","SelectOption","displayText","hoverBackgroundColor","ModalInputSection","ModalColumnInputSection","ReactionCompoundCard","coefficientInput","setCoefficientInput","ReactionCompoundCardWrapper","parseFloat","ReactionCompoundList","reactionCompounds","compoundType","updatedReactionCompound","Equation","components","parenthesisStack","parenthesis","currentStack","level","operation","code","numerator","denominator","elements","base","power","component","SymbolComponent","separatedTerms","split","term","subindex","Parenthesis","elem","Division","DivisionWrapper","Power","PowerWrapper","Subindex","SubindexWrapper","GreekAlpha","GreekBeta","GreekMu","SymbolInfinity","ReactionEquation","keyCompoundSymbol","EquationWrapper","ReactionParamInputCard","paramSymbol","units","updateValue","valueInput","setValueInput","ParamInputWrapper","ParamInputInner","ReactionKineticParameters","updateKineticConstant","tokenizedMuUnits","tokenizedKUnits","globalOrder","reduce","accumulator","KineticParamsWrapper","param","serializeKineticEquation","equationTokens","addArrheniusExponential","addHyperbolicTerm","addReactantWithExponent","addProductWithExponent","ReactionEditModal","rea","modalReaction","setModalReaction","scrollRef","selectReactantIndex","setSelectReactantIndex","selectProductIndex","setSelectProductIndex","reactantOptions","productOptions","getCompoundKey","Reactant","deletedCompound","selectReactantInitialValue","selectProductInitialValue","CompoundInputWrapper","AddCompound","CompoundInputInner","Product","SelectField","ReactionList","editedReactionId","setEditedReactionId","editedReaction","ReactionsPage","DISTANCE_FROM_CORNER","drawPlot","canvas","data","colors","context","getContext","clearRect","width","height","lineWidth","yAxisTicks","getTicksYAxis","drawVerticalAxis","ticks","drawHorizontalAxis","drawPlotCurve","effectiveHeight","totalTicks","tickDistance","yPosition","beginPath","strokeStyle","moveTo","lineTo","stroke","font","fillStyle","textAlign","fillText","formatTickValue","params","maxTimeValue","x","maxYAxisValue","plotAreaWidth","plotAreaHeight","j","plotPath","Path2D","points","y","targetTicks","Math","floor","maxValue","maxFunctionalValue","getTickDistance","ceil","maxValuesForEachVariable","max","point","targetTickAmount","powerOfTen","getPowerOfTen","stringValue","toString","toFixed","Plot","canvasRef","innerWidth","canvasWidth","setCanvasWidth","innerHeight","canvasHeight","setCanvasHeight","resizeHandler","Canvas","ref","VariableCheckboxes","selectedVariables","setSelectedVariables","isToggled","Wrapper","CheckboxWrapper","foundIndex","toggleIndex","ColorBadge","CompoundSymbol","includes","span","SidebarOptions","optionsVisible","toggleOptionsVisible","SidebarOptionsWrapper","visible","useGetData","variableData","ResultsPage","setOptionsVisible","selectedCompound","compoundData","OptionsButton","Routes","path","exact","to","pathname","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uWAMYA,E,0ECNCC,EAAc,SAACC,GAC1B,IACE,IAAMC,EAAkBC,aAAaC,QAAQH,GAC7C,GAAwB,OAApBC,EACF,OAEF,OAAOG,KAAKC,MAAMJ,GAClB,MAAOK,GACP,SAISC,EAAY,SAAoBC,EAAUR,GACrD,IACE,IAAMC,EAAkBG,KAAKK,UAAUD,GACvCN,aAAaQ,QAAQV,EAAKC,GAC1B,MAAOU,GACPC,QAAQD,MAAMA,KCZLE,EAAc,4BACrBC,EAA+Bf,EAAYc,IAAgB,GAMpDE,EAAiBC,YAAY,CACxCC,KAAM,YACNH,eACAI,SAAU,CACRC,IAAK,SAACX,EAAOY,GACX,MAAM,GAAN,mBAAWZ,GAAX,CAAkBY,EAAOC,WAG3BC,OAAQ,SAACd,EAAOY,GACd,IAAMG,EAAQf,EAAMgB,WAAU,SAACC,GAAD,OAAOA,EAAEC,KAAON,EAAOC,QAAQK,MAC7D,IAAe,IAAXH,EAAc,OAAOf,EACzBA,EAAMe,GAASH,EAAOC,QAAQM,UAGhCC,OAAQ,SAACpB,EAAOY,GACd,IAAMG,EAAQf,EAAMgB,WAAU,SAACC,GAAD,OAAOA,EAAEC,KAAON,EAAOC,QAAQK,MAC7D,OAAe,IAAXH,EAAqBf,EACnB,GAAN,mBAAWA,EAAMqB,MAAM,EAAGN,IAA1B,YAAqCf,EAAMqB,MAAMN,EAAQ,EAAGf,EAAMsB,WAGpEC,MAAO,WACL,MAAO,O,EAKiChB,EAAeiB,QAA9Cb,E,EAAAA,IAAKG,E,EAAAA,OAAQM,E,EAAAA,OAAQG,E,EAAAA,MAErBhB,IAAf,QClCaF,EAAc,4BACrBC,EAA+Bf,EAAYc,IAAgB,GAOpDoB,EAAiBjB,YAAY,CACxCC,KAAM,YACNH,eACAI,SAAU,CACRa,MAAO,SAACvB,GACN,MAAO,IAGTW,IAAK,SAACX,EAAOY,GACX,MAAM,GAAN,mBAAWZ,GAAX,CAAkBY,EAAOC,WAG3BC,OAAQ,SAACd,EAAOY,GACd,IAAMG,EAAQf,EAAMgB,WAAU,SAACU,GAAD,OAAOA,EAAER,KAAON,EAAOC,QAAQK,MAC7D,IAAe,IAAXH,EAAc,OAAOf,EACzBA,EAAMe,GAASH,EAAOC,QAAQc,UAGhCP,OAAQ,SAACpB,EAAOY,GACd,IAAMG,EAAQf,EAAMgB,WAAU,SAACU,GAAD,OAAOA,EAAER,KAAON,EAAOC,QAAQK,MAC7D,OAAe,IAAXH,EAAqBf,EACnB,GAAN,mBAAWA,EAAMqB,MAAM,EAAGN,IAA1B,YAAqCf,EAAMqB,MAAMN,EAAQ,EAAGf,EAAMsB,WAGpEM,eAAgB,SAAC5B,EAAOY,GAItB,IAAMiB,EAAajB,EAAOC,QAAQK,GAiBlC,OAhBAlB,EAAM8B,SAAQ,SAACH,GACbA,EAASI,UAAYJ,EAASI,UAAUC,QACtC,SAACC,GAAD,OACEA,EAAiBJ,aAAeA,KAGpCF,EAASO,SAAWP,EAASO,SAASF,QACpC,SAACC,GAAD,OACEA,EAAiBJ,aAAeA,KAGhCF,EAASQ,cAAgBN,IAC3BF,EAASQ,iBAAcC,MAIpBpC,M,EAMXyB,EAAeD,QADFD,E,EAAAA,MAAOZ,E,EAAAA,IAAKG,E,EAAAA,OAAQM,E,EAAAA,OAAQQ,E,EAAAA,eAG5BH,IAAf,Q,eC9DapB,EAAc,2BACrBC,EAA8Bf,EAAYc,IAAgB,CAE9DgC,aAAc,GACdC,SAAU,GACVC,SAAU,GAGVC,UAAW,IACXC,YAAa,IACbC,WAAY,MACZC,UAAW,KACXC,iBAAkB,IAGlBC,YAAY,EACZC,mBAAoB,IAMTC,EAAgBvC,YAAY,CACvCC,KAAM,WACNH,eACAI,SAAU,CACRsC,KAAM,SAAChD,EAAOY,GACZ,OAAOA,EAAOC,SAGhBoC,UAAW,SAACjD,EAAOY,GACjB,OAAO,2BACFZ,GADL,kBAEGY,EAAOC,QAAQqC,MAAQtC,EAAOC,QAAQsC,Y,EAMZJ,EAAcvB,QAAlCwB,E,EAAAA,KAAMC,E,EAAAA,UAENF,IAAf,QCtCaK,EAAyB5C,YAAY,CAChDC,KAAM,oBACNH,aAN2C,GAO3CI,SAAU,CACRsC,KAAM,SAAChD,EAAOY,GACZ,OAAOA,EAAOC,YAKLmC,EAASI,EAAuB5B,QAAhCwB,KAEAI,IAAf,QCLeC,EATDC,YAAe,CAC3BC,QAAS,CACPC,UAAWC,EACXC,UAAWC,EACXC,SAAUC,EACVC,kBAAmBC,K,cCwGRC,EAjHMC,YAAH,ghF,eC0BHC,EArBAC,IAAOC,OAAV,gUAWR,SAACC,GAAD,OAAWC,GAAWD,EAAME,UAG1B,SAACF,GAAD,OAAWG,GAAYH,EAAME,UAI/B,SAACF,GAAD,uBAAWA,EAAMI,mBAAjB,QAAgC,MAK9BH,GAAa,SAACC,GAClB,OAAQA,GACN,IAAK,MACH,MAAM,iHAIR,IAAK,QACH,MAAM,mHAIR,IAAK,OACH,MAAM,0GAIR,QACE,MAAM,+GAONC,GAAc,SAACD,GACnB,OAAQA,GACN,IAAK,MACH,MAAM,uEAGR,IAAK,QACH,MAAM,yEAGR,IAAK,OACH,MAAM,gEAGR,QACE,MAAM,qE,2BClECG,GAAiB,kBAAMC,eACvBC,GAAkDC,IC4BhDC,GAtBK,WAClB,IAAMC,EAAWL,KACXd,EAAWgB,IAAe,SAAC5E,GAAD,OAAWA,EAAM4D,YAOjD,OALAoB,qBAAU,WAERjF,EAAU6D,EAAUvD,KACnB,CAACuD,IAEG,CACLA,WAEAqB,aAAc,SAACC,GACbH,EAAS/B,EAAKkC,KAGhBjC,UAAW,SAACC,EAAeC,GACzB4B,EAAS9B,EAAU,CAAEC,QAAOC,c,kDVtBtB7D,O,yBAAAA,I,uBAAAA,I,uBAAAA,I,qCAAAA,I,wCAAAA,M,KAQL,I,kHWaK6F,GAkBAC,GXiENC,GAAQ,CACZ,IAAK,QACL,IAAK,OACL,IAAK,OACL,IAAK,OACL,IAAK,QAGDC,GAAO,CACX,IAAK,EACL,IAAK,EACL,IAAK,EACL,IAAK,EACL,IAAK,GAGMC,GAAb,WAIE,WAAYC,EAAcrC,GAAyB,0BAHnDqC,UAGkD,OAFlDrC,WAEkD,EAChDsC,KAAKD,KAAOA,EACZC,KAAKtC,MAAQA,EANjB,6CASE,WACE,OAAOmC,GAAKG,KAAKtC,QAA+B,IAVpD,yBAaE,WACE,OAAOkC,GAAMI,KAAKtC,QAAgC,WAdtD,KY1CeuC,GA/DM,WACnB,IAAMX,EAAWL,KACXhB,EAAYkB,IAAe,SAAC5E,GAAD,OAAWA,EAAM0D,aAOlD,OALAsB,qBAAU,WAERjF,EAAU2D,EAAWrD,KACpB,CAACqD,IAEG,CACLA,YAEAiC,eAAgB,WACdZ,EAASxD,MAGXqE,YAAa,WACX,IAAMC,EAAc,CAClB3E,GAAI4E,KAAaC,SAAS,GAC1BtF,KAAM,GACNsB,UAAW,GACXG,SAAU,GACV8D,aAAc,EACdC,iBAAkB,CAChB,UAAW,IACXC,IAAK,KAEPC,gBAAiB,CACf,IAAIZ,GAAMjG,EAAW8G,UAAW,aAChC,IAAIb,GAAMjG,EAAW+G,SAAU,KAC/B,IAAId,GAAMjG,EAAW8G,UAAW,KAChC,IAAIb,GAAMjG,EAAW+G,SAAU,KAC/B,IAAId,GAAMjG,EAAWgH,gBAAiB,KACtC,IAAIf,GAAMjG,EAAWgH,gBAAiB,KACtC,IAAIf,GAAMjG,EAAW+G,SAAU,KAC/B,IAAId,GAAMjG,EAAW8G,UAAW,SAChC,IAAIb,GAAMjG,EAAWiH,iBAAkB,KACvC,IAAIhB,GAAMjG,EAAW+G,SAAU,KAC/B,IAAId,GAAMjG,EAAWgH,gBAAiB,KACtC,IAAIf,GAAMjG,EAAW8G,UAAW,OAChC,IAAIb,GAAMjG,EAAW+G,SAAU,KAC/B,IAAId,GAAMjG,EAAWkH,SAAU,OAC/B,IAAIjB,GAAMjG,EAAWiH,iBAAkB,KACvC,IAAIhB,GAAMjG,EAAWiH,iBAAkB,OAG3CxB,EAASpE,EAAIkF,KAGfY,eAAgB,SAACvF,EAAYwF,GAC3B3B,EAASjE,EAAO,CAAEI,KAAIS,SAAU+E,MAGlCC,4BAA6B,SAAC9E,GAC5BkD,EAASnD,EAAe,CAAEV,GAAIW,MAGhC+E,eAAgB,SAAC1F,GACf6D,EAAS3D,EAAO,CAAEF,WC/EX2F,GAAwB,CACnC,QACA,QACA,SACA,WACA,OACA,SACA,WACA,SACA,UACA,QACA,OACA,cACA,OACA,QACA,SACA,QACA,cACA,WAGWC,GAAkB,CAC7BC,OAAQ,oBACRC,OAAQ,oBACRC,KAAM,oBACNC,OAAQ,oBACRC,OAAQ,qBACRC,YAAa,qBACbC,YAAa,qBACbC,SAAU,qBACVC,SAAU,qBACVC,MAAO,qBACPC,MAAO,qBACPC,QAAS,qBACTC,QAAS,qBACTC,MAAO,qBACPC,MAAO,qBACPC,MAAO,qBACPC,KAAM,qBACNC,KAAM,qBC6COC,GAlEM,WACnB,IAAMlD,EAAWL,KACXlB,EAAYoB,IAAe,SAAC5E,GAAD,OAAWA,EAAMwD,aAFzB,EAG+BkC,KAAhDC,EAHiB,EAGjBA,eAAgBgB,EAHC,EAGDA,4BAExB3B,qBAAU,WAERjF,EAAUyD,EAAWnD,KACpB,CAACmD,IAEJ,IAAM0E,EAAc,WAClB,IAAMC,EAAYtB,GAGduB,EAAyB,GAC7BD,EAAUrG,SAAQ,SAACtC,GAAD,OAAkB4I,EAAW5I,IAAO,KAGtDgE,EAAU1B,SAAQ,SAACX,GAAD,OAAeiH,EAAWjH,EAASoD,QAAS,KAK9D,IAFA,IACE8D,EADEC,EAAI,EAEDA,EAAIH,EAAU7G,SAAW+G,GACzBD,EAAWD,EAAUG,MAAKD,EAAaF,EAAUG,IACtDA,IAGF,OAAOD,GAAc,SAGvB,MAAO,CACL7E,YAEA+E,YAAa,WACX,IAAMC,EAAc,CAClBtH,GAAI4E,KAAaC,SAAS,GAC1BxB,MAAO2D,IACPO,cAAe,EACfC,gBAAiB,EACjBC,OAAQ,IACRlI,KAAM,IAERsE,EAASpE,EAAI6H,KAGfI,aAAc,SAAC1H,GACb,OAAOsC,EAAUqF,MAAK,SAAC5H,GAAD,OAAOA,EAAEC,KAAOA,MAGxC4H,eAAgB,SAAC5H,EAAY6H,GAC3BhE,EAASjE,EAAO,CAAEI,KAAIC,SAAU4H,MAGlCnH,eAAgB,SAACV,GACfyF,EAA4BzF,GAC5B6D,EAAS3D,EAAO,CAAEF,SAGpB8H,mBAAoB,WAClBrD,IACAZ,EAASxD,QC5DA0H,GAbc,WAC3B,IAAMlE,EAAWL,KAGjB,MAAO,CACLZ,kBAHwBc,IAAe,SAAC5E,GAAD,OAAWA,EAAM8D,qBAKxDoF,sBAAuB,SAACC,GACtBpE,EAAS/B,EAAKmG,OCgEdC,GAAe,SAACC,GAWpB,IAHA,IAAIC,EAAI,EACNC,GAAmB,EAEdD,EAAID,EAAkB/H,QACvB+H,EAAkBC,GAAG9D,OAASlG,EAAWgH,gBAC3CiD,GAAmB,IAInBA,GACgC,MAA/BF,EAAkBC,GAAGnG,OAAgD,MAA/BkG,EAAkBC,GAAGnG,QAG5DkG,EAAkBC,GAAG9D,KAAOlG,EAAW8G,UACJ,MAA/BiD,EAAkBC,GAAGnG,MAAekG,EAAkBC,GAAGnG,MAAQ,EAChEkG,EAAkBC,GAAGnG,OAAS,EAGnCkG,EAAiB,sBACZA,EAAkBhI,MAAM,EAAGiI,EAAI,IADnB,CAEf,IAAI/D,GAAMjG,EAAW+G,SAAU,MAFhB,YAGZgD,EAAkBhI,MAAMiI,EAAI,EAAGD,EAAkB/H,WAOtDiI,GAAmB,GAGrBD,IAGF,OAAOD,GChHIG,GAA6B,SAAC7H,EAAoBE,GAC7D,IAAM4H,EAAgCC,GAA0C/H,GAC5EgI,EAAsB,EAO1B,OALAhI,EAASI,UAAUD,SAAQ,SAACb,GACtBA,EAAEY,aAAeA,IACnB8H,GAAgBF,EAAgCxI,EAAE2I,8BAGlC,IAAhBD,GAEJhI,EAASO,SAASJ,SAAQ,SAACb,GACrBA,EAAEY,aAAeA,IACnB8H,EAAcF,EAAgCxI,EAAE2I,8BAJtBD,GAU1BD,GAA4C,SAAC/H,GAEjD,OADoBA,EAASI,UAAU8G,MAAK,SAAC5H,GAAD,OAAOA,EAAEY,aAAeF,EAASQ,eAC1DyH,2BCTfC,GAAY,CAChBC,EAAG,UAEHC,EAAG,KACHC,EAAG,KAiCUC,GA9BK,WAAO,IACjBzG,EAAcyE,KAAdzE,UACAE,EAAcgC,KAAdhC,UACAE,EAAakB,KAAblB,SACAsF,EAA0BD,KAA1BC,sBAuBR,MAAO,CAAEgB,SApBQ,WAKf,IAAMC,EAAoCC,GACxC1G,EACAF,GAII6G,EAA2B,CAAEC,EAAG,EAAGN,EAAGpG,EAASd,oBACrDU,EAAU1B,SAAQ,SAACb,GAAD,OAAQoJ,EAAc,IAAD,OAAKpJ,EAAE0H,OAAP,MAAoB1H,EAAEwH,iBAG7D,IAAM8B,EAAUC,GAAkBH,EAAeF,EAAiBvG,GAElEsF,EAAsBqB,MAYpBH,GAAyB,SAC7B1G,EACAF,GAWA,IAAM2G,EAAoC,GAmB1C,OAjBAzG,EAAU5B,SAAQ,SAACH,EAAUZ,GAC3B,IAAM0J,EAAiC,GAGvCA,EAAetE,gBAAkBuE,GAA4B/I,GAG7D8I,EAAetE,gBFnFU,SAACkD,GAS5B,IAAMsB,EAASvB,GAAaC,GAEtBuB,EAAuB,GACvBC,EAA0B,GAE1BC,EAAO,SAAoBC,GAC/B,OAAOA,EAAM1J,OAAO,GAAG,IAoDzB,OAjDAsJ,EAAO7I,SAAQ,SAACkJ,GAEd,GACEA,EAAMxF,OAASlG,EAAW8G,WAC1B4E,EAAMxF,OAASlG,EAAWkH,SAE1BoE,EAAYK,KAAKD,QAMd,GAAIA,EAAMxF,OAASlG,EAAW+G,SAAU,CAC3C,KACEyE,EAAKD,IACLC,EAAKD,GAAgBrF,OAASlG,EAAW+G,WACf,SAAxB2E,EAAME,eACNF,EAAMG,YAAcL,EAAKD,GAAgBM,YAChB,UAAxBH,EAAME,eACLF,EAAMG,WAAaL,EAAKD,GAAgBM,aAE5CP,EAAYK,KAAKJ,EAAeO,OAGlCP,EAAeI,KAAKD,QAIjB,GAAIA,EAAMxF,OAASlG,EAAWgH,gBACjCuE,EAAeI,KAAKD,QAIjB,GAAIA,EAAMxF,OAASlG,EAAWiH,iBAAkB,CAGnD,KACEuE,EAAKD,IACLC,EAAKD,GAAgBrF,OAASlG,EAAWgH,iBAEzCsE,EAAYK,KAAKJ,EAAeO,OAKlCP,EAAeO,UAIZR,EAAYS,OAAOR,EAAeS,WEgBNC,CAC/Bd,EAAetE,iBAIjBsE,EAAejH,UAAYgI,GAAe7J,EAAU6B,GAEpD2G,EAAgBc,KAAKR,MAGhBN,GAGHO,GAA8B,SAAC/I,GACnC,IAAM8J,EAAsB7L,KAAKC,MAC/BD,KAAKK,UAAU0B,EAASwE,kBAmB1B,OAhBAsF,EAAoB3J,SAAQ,SAACkJ,EAAcjK,GACzC,GAAIiK,EAAMxF,OAASlG,EAAW8G,UAAW,CAEvC,IAAM5G,EAAOwL,EAAM7H,MAAiBuI,QAAQ,OAAQ,IAEhD/J,EAASsE,iBAAiBzG,GAC5BwL,EAAM7H,MAAQxB,EAASsE,iBAAiBzG,GACrCwL,EAAM7H,MAAQ0G,GAAUrK,QACpBwL,EAAMxF,OAASlG,EAAWkH,WAEnCwE,EAAM7H,MAAS6H,EAAM7H,MAAiBuI,QAAQ,OAAQ,KAGxDD,EAAoB1K,GAAS,IAAIwE,GAAMyF,EAAMxF,KAAMwF,EAAM7H,UAGpDsI,GAGHD,GAAiB,SACrB7J,EACA6B,GAEA,IAAMmI,EAA6C,GAoCnD,OAlCAhK,EAASI,UAAUD,SAAQ,SAACG,GAAwC,IAAD,EAC3Dd,EAAoCyK,OAAOC,OAC/C,GACA,CACEhK,WAAYI,EAAiBJ,WAC7B8G,OAAO,IAAD,iBACJnF,EAAUqF,MAAK,SAAC5H,GAAD,OAAOA,EAAEC,KAAOe,EAAiBJ,qBAD5C,aACJ,EAA6D8G,OADzD,KAGNgB,YAAaH,GACX7H,EACAM,EAAiBJ,cAIvB8J,EAAgBV,KAAK9J,MAGvBQ,EAASO,SAASJ,SAAQ,SAACG,GAAwC,IAAD,EAC1Dd,EAAoCyK,OAAOC,OAC/C,GACA,CACEhK,WAAYI,EAAiBJ,WAC7B8G,OAAO,IAAD,iBACJnF,EAAUqF,MAAK,SAAC5H,GAAD,OAAOA,EAAEC,KAAOe,EAAiBJ,qBAD5C,aACJ,EAA6D8G,OADzD,KAGNgB,YAAaH,GACX7H,EACAM,EAAiBJ,cAIvB8J,EAAgBV,KAAK9J,MAGhBwK,GAQHnB,GAAoB,SACxBsB,EACA3B,EACAvG,GA6BA,IA3BA,IAAM2G,EAA6B,CAACuB,GAqB9BC,EAlB2B,WAAmC,IAAlCC,EAAiC,uDAAvB,GAAIzJ,EAAmB,uDAAR,GACnD0J,EAAgB,CACpBC,KAAM,WACJ,IAAIC,EAGJ,OAFoB5B,EAAQA,EAAQjJ,OAAS,GAAGgJ,EAE9B0B,GAChBG,EAAS,CAAEC,MAAM,GACjBC,GAAkBlC,EAAiB5H,EAAUgI,GACtC4B,GAEF,CAAEC,MAAM,KAInB,OAAOH,EAGQK,CACf1I,EAASvB,aACTuB,EAASrB,UAGP4J,EAASJ,EAASG,QACdC,EAAOC,MACbD,EAASJ,EAASG,OAGpB,OAAO3B,GAMH8B,GAAoB,SACxBlC,EACA5H,EACAgI,GAEA,IAAMgC,EAA0B3M,KAAKC,MACnCD,KAAKK,UAAUsK,EAAQA,EAAQjJ,OAAS,KAGpCkL,EAA0B,CAAElC,EAAG,EAAGN,EAAGuC,EAAavC,GAIlDyC,EAA0BtC,EAAgBuC,KAAI,SAACjC,GACnD,OAAOkC,GAAsBlC,EAAgB8B,MAG/CX,OAAOgB,QAAQL,GAAczK,SAAQ,YAAwB,IAAD,mBAArB+K,EAAqB,KAAX1J,EAAW,KAI1D,GAAiB,MAAb0J,EAAJ,CAUA,IAAMC,EAAeC,GACnB5C,EACAsC,EACAI,GAOFL,EAAaK,GAAYG,GACvBT,EAAaM,GAAYC,EAAevK,QApBxCiK,EAAalC,EAAInH,EAAQZ,KAyB7BgI,EAAQU,KAAKuB,IAGTO,GAA2B,SAC/B5C,EACAsC,EACAI,GAEA,IAAII,EAAe,EAanB,OAXA9C,EAAgBrI,SAAQ,SAACH,EAA0BZ,GAAmB,IAAD,EAC7DI,EAAQ,UAAGQ,EAAS6B,iBAAZ,aAAG,EAAoBqF,MACnC,SAAC5H,GAAD,OAAOA,EAAE0H,SAAWkE,KAIlB1L,IACF8L,GAAgBR,EAAc1L,GAASI,EAASwI,gBAI7CsD,GAGHN,GAAwB,SAC5BhL,EACA4K,GACI,IAAD,EAMCW,EAAwB,GAuC5B,OArCA,UAAAvL,EAASwE,uBAAT,SAA0BrE,SAAQ,SAACkJ,GAIjC,GAAIA,EAAMxF,OAASlG,EAAW8G,UAC5B8G,EAAYjC,KAAKD,EAAM7H,YACpB,GAAI6H,EAAMxF,OAASlG,EAAWkH,SACjC0G,EAAYjC,KAAKsB,EAAavB,EAAM7H,YAC/B,CAIL,IAAMgK,EAAID,EAAY9B,MAChBgC,EAAIF,EAAY9B,MAEtB,OAAQJ,EAAM7H,OACZ,IAAK,IACH+J,EAAYjC,KAAKmC,EAAID,GACrB,MACF,IAAK,IACHD,EAAYjC,KAAKmC,EAAID,GACrB,MACF,IAAK,IACHD,EAAYjC,KAAKmC,EAAID,GACrB,MACF,IAAK,IACHD,EAAYjC,KAAKmC,EAAID,GACrB,MACF,IAAK,IACHD,EAAYjC,KAAZ,SAAiBmC,EAAKD,SAQvBD,EAAY,IAGfF,GAAc,SAAC7J,GACnB,OAAIA,EAAQ,EAAU,EACfA,G,QCrPMkK,GAvEW,WAAO,IACvBnD,EAAaD,KAAbC,SACApG,EAAsBmF,KAAtBnF,kBACFwJ,EAAUC,cAHc,EAIEC,oBAAkB,GAJpB,mBAIvBC,EAJuB,KAIbC,EAJa,KAiBxBC,EAAa,SAACC,GAClBN,EAAQrC,KAAK2C,GACbF,GAAY,IAGRG,EAAY,CAChBC,KAAM,IAGR,OACE,eAACC,GAAD,CAAgBN,SAAUA,EAA1B,SACE,iCACE,oBAAGO,KAAK,IAAIC,QAjBC,SAACC,GAClBA,EAAMC,iBACNT,GAAaD,IAeT,SACE,eAACW,GAAD,UACE,eAACC,GAAD,UACE,eAAC,KAAD,eAAYR,UAIlB,eAAC,GAAD,CACEI,QAAS,kBAAMN,EAAW,eAC1BW,MAAM,YACNC,KAAM,eAAC,KAAD,eAAYV,MAEpB,eAAC,GAAD,CACEI,QAAS,kBAAMN,EAAW,eAC1BW,MAAM,YACNC,KAAM,eAAC,KAAD,eAAyBV,MAEjC,eAAC,GAAD,CACEI,QAAS,kBAAMN,EAAW,cAC1BW,MAAM,WACNC,KAAM,eAAC,KAAD,eAAeV,MAEtB/J,GACC,eAAC,GAAD,CACEmK,QAAS,kBAAMN,EAAW,aAC1BW,MAAM,UACNC,KAAM,eAAC,KAAD,eAAiBV,MAG3B,oBAAGG,KAAK,IAAIC,QApDC,SAACC,GAClBA,EAAMC,iBACNjE,IACAoD,EAAQrC,KAAK,aAiDT,SACE,gBAACmD,GAAD,WACE,eAACC,GAAD,UACE,eAAC,KAAD,eAAYR,MAEd,qDAUNW,GAA2C,SAACnK,GAAW,IACnDkK,EAAyBlK,EAAzBkK,KAAMN,EAAmB5J,EAAnB4J,QAASK,EAAUjK,EAAViK,MACvB,OACE,eAAC,EAAD,CAAQL,QAASA,EAAjB,SACE,gBAACG,GAAD,WACE,eAACC,GAAD,UAAcE,IACd,6BAAID,UAONF,GAAqBjK,IAAOsK,IAAV,wHAOlBJ,GAAclK,IAAOsK,IAAV,wFAUXV,GAAiB5J,IAAOsK,IAAV,uzBAML,SAACpK,GAAD,OAAYA,EAAMoJ,SAAW,QAAU,UC3GvCiB,GAbsB,SAACrK,GAAW,IACvCsK,EAAatK,EAAbsK,SAER,OACE,gBAACC,GAAD,WACE,eAAC,GAAD,IACA,eAACC,GAAD,CAAoB3N,GAAG,gBAAvB,SACE,eAAC4N,GAAD,UAAcH,UAQhBC,GAAoBzK,IAAOsK,IAAV,gDAIjBI,GAAqB1K,IAAOsK,IAAV,6KAQlBK,GAAc3K,IAAOsK,IAAV,+CC3BFM,GAPG5K,IAAO6K,GAAV,oICqBAC,GArBI9K,IAAOC,OAAV,2bC2CD8K,GAzBoC,SAAC7K,GAAW,IACrDlD,EAA2CkD,EAA3ClD,SAAUgO,EAAiC9K,EAAjC8K,aAAcvN,EAAmByC,EAAnBzC,eAEhC,OACE,eAACwN,GAAD,UACE,gBAACC,GAAD,WAEE,eAACC,GAAD,CAAc/K,MAAOpD,EAASoD,MAA9B,SACGpD,EAASwH,SAIZ,eAAC,GAAD,CAAYsF,QAASkB,EAArB,SACE,eAAC,KAAD,MAIF,eAAC,GAAD,CAAYlB,QAASrM,EAArB,SACE,eAAC,KAAD,YAaJwN,GAAsBjL,IAAOoL,GAAV,4BAEnBF,GAAoBlL,IAAOsK,IAAV,0oBAiCjBa,GAAenL,IAAOsK,IAAV,yOACI,SAACpK,GAAD,OAAWyC,GAAgBzC,EAAME,U,SClCxCiL,GAhC8B,SAACnL,GAAW,IAC/CsK,EAA+CtK,EAA/CsK,SAAUc,EAAqCpL,EAArCoL,QAASC,EAA4BrL,EAA5BqL,WAAYC,EAAgBtL,EAAhBsL,YAEjCC,EAAa,WAIjBF,GAAW,GACXG,YAAW,WACTF,MACC,MAUL,OAPA3K,qBAAU,WACJyK,GACFG,MAGD,CAACH,IAGF,eAACK,GAAD,CAAkBL,QAASA,EAA3B,SACE,gBAACM,GAAD,CAAgBN,QAASA,EAAzB,UACE,eAACO,GAAD,CAAa/B,QAAS2B,EAAYH,QAASA,EAA3C,SACE,eAAC,KAAD,MAEDd,QAQHmB,GAAmB3L,IAAOsK,IAAV,2rBAgBlB,SAACpK,GAAD,OACAA,EAAMoL,QAAN,yLAQI,MAuBFM,GAAiB5L,IAAOsK,IAAV,25BAiBhB,SAACpK,GAAD,OACAA,EAAMoL,QAAN,2LAQI,MA4BFO,GAAc7L,IAAOC,OAAV,2UAUb,SAACC,GAAD,OAAYA,EAAMoL,QAAU,kBAAoB,MCxJ9CQ,GAAe9L,IAAOsK,IAAV,0UAEd,SAACpK,GAAD,OACAA,EAAM6L,IAAN,iGAqBWC,GAjCqB,SAAC9L,GAAW,IACtC6L,EAAkB7L,EAAlB6L,IAAKvB,EAAatK,EAAbsK,SACb,OACE,eAACsB,GAAD,CAAcC,IAAKA,EAAKE,UAAU,QAAlC,SACGzB,KCMQ0B,GAVDlM,IAAOmM,MAAV,qCACP,SAACjM,GAAD,OACAA,EAAMkM,OAAN,kJAKI,MCMOC,GAbK,SAACnM,GAA6B,IACxCoM,EAASpM,EAAToM,KAER,OACE,gBAACC,GAAD,WACE,eAAC,KAAD,CAAQnM,MAAM,qBAAqBuJ,KAAM,KACzC,eAAC6C,GAAD,UACE,eAACC,GAAD,UAAOH,UAQTC,GAAOvM,IAAOsK,IAAV,2VAiBJmC,GAAOzM,IAAOsK,IAAV,4sBA8BJkC,GAAcxM,IAAOsK,IAAV,6ICFXoC,GAAoB1M,IAAOsK,IAAV,0YAEH,SAACpK,GAAD,OAAYA,EAAMyM,IAAM,MAAQ,YAEpC,SAACzM,GAAD,OAAYA,EAAMyM,IAAM,QAAU,gBAI9C,SAACzM,GAAD,OACAA,EAAME,MAAN,kCAGEuC,GAAgBzC,EAAME,OAHxB,oFAQI,MACJ,SAACF,GAAD,OACAA,EAAM6L,IAAN,qFAMI,MAGF,SAAC7L,GAAD,OAAYA,EAAM6L,IAAM,qBAAuB,MAM/C,SAAC7L,GAAD,OACAA,EAAM6L,IAAN,0EAMI,sBAUJa,GAAe5M,IAAOsK,IAAV,0HAOHuC,GArGgC,SAAC3M,GAAW,IAEvD6L,EAWE7L,EAXF6L,IACA3L,EAUEF,EAVFE,MACApE,EASEkE,EATFlE,MACA8Q,EAQE5M,EARF4M,UACAC,EAOE7M,EAPF6M,MACAJ,EAMEzM,EANFyM,IACAtL,EAKEnB,EALFmB,KACA2L,EAIE9M,EAJF8M,QACAhO,EAGEkB,EAHFlB,MACAiO,EAEE/M,EAFF+M,OACAC,EACEhN,EADFgN,SAKF,OACE,gBAACR,GAAD,CAAmBtM,MAAOA,EAAO2L,IAAKA,EAAKY,IAAKA,EAAhD,UACE,gBAACC,GAAD,WACE,wBAAOO,QAASL,EAAhB,SAA4BC,IAC3BC,GAAW,eAAC,GAAD,CAAaV,KAAMU,OAEjC,eAAC,GAAD,CACEZ,SAAUpQ,EACVM,KAAMwQ,EACNzL,KAAMA,GAAQ,OACd+L,aAAa,MACbH,OAAQA,GAbO,aAcfC,SAAUA,EACVlO,MAAOA,IAERhD,GAAS,eAAC,GAAD,CAAO+P,IAAKA,EAAZ,SAAkB/P,QC3CnBqR,GATMrN,YAAOD,EAAPC,CAAH,wLCALsN,GAAgB,SAACrE,EAAYD,GACxC,OAAIC,IAAMD,GAUCuE,GAAmB,SAACvO,GAC/B,MAAc,KAAVA,IACiB,kBAAVA,KACNA,IAQMwO,GAAsB,SACjCxO,EACAyO,EACAC,GAEA,MAAqB,kBAAV1O,IACPA,EAAQyO,KACRzO,IAAUyO,IAAaC,KC4HdC,GApI8C,SAACzN,GAAW,IAC/DlD,EAAyBkD,EAAzBlD,SAAUyO,EAAevL,EAAfuL,WADoD,EAEhC3H,KAA9BzE,EAF8D,EAE9DA,UAAWsF,EAFmD,EAEnDA,eACXlF,EAAakB,KAAblB,SAH8D,EAIxC4J,oBAAkB,GAJsB,mBAI/DiC,EAJ+D,KAItDC,EAJsD,KAKhEqC,EAAgBvO,EAAUxC,WAAU,SAACgR,GAAD,OAAUA,EAAK9Q,KAAOC,EAASD,MAoCnE+Q,EAAkB,SAAC/O,EAAeC,GACtC,IAAK,IAAImG,EAAI,EAAGA,EAAI9F,EAAUlC,OAAQgI,IAEpC,GAAIA,IAAMyI,GAAiBvO,EAAU8F,GAAGpG,KAAWC,EACjD,OAAO,EAGX,OAAO,GAMH+O,EAASC,aAAU,CAEvB9H,cAAe,CACb1B,OAAQxH,EAASwH,OACjBF,cAAetH,EAASsH,cACxBhI,KAAMU,EAASV,KACfiI,gBAAiBvH,EAASuH,iBAE5B0J,SA7Ce,SAACC,GAChB,IAAM9B,EAAkB,GAoBxB,OAjBKmB,GAAiBW,EAAO1J,QAEnBsJ,EAAgB,SAAUI,EAAO1J,UACzC4H,EAAO5H,OAAS,0BAFhB4H,EAAO5H,OAAS,yBAKb+I,GAAiBW,EAAO5J,eAEnBkJ,GAAoBU,EAAO5J,cAAe,GAAG,KACrD8H,EAAO9H,cAAgB,wCAFvB8H,EAAO9H,cAAgB,gCAKpBiJ,GAAiBW,EAAO3J,iBAEnBiJ,GAAoBU,EAAO3J,gBAAiB,GAAG,KACvD6H,EAAO7H,gBAAkB,2CAFzB6H,EAAO7H,gBAAkB,mCAIpB6H,GAyBP+B,SAAU,SAACD,GACT,IAAMtJ,EAAe,2BAAQ5H,GAAakR,GAC1CvJ,EAAe3H,EAASD,GAAI6H,GAC5BwJ,OAAOC,SAAS,CAAEC,IAAK,EAAGC,SAAU,WACpChD,GAAW,MAIf,OACE,eAAC,GAAD,CACED,QAASA,EACTC,WAAYA,EACZC,YAAaC,EAHf,SAKE,gBAAC+C,GAAD,CAAML,SAAUJ,EAAOU,aAAvB,UACE,eAAC,GAAD,CACE3B,UAAU,SACVC,MAAM,UACN/Q,MAAO+R,EAAO3B,OAAO5H,OACrB0I,SAAU,SAACnD,GACTgE,EAAOW,aAAa3E,IAEtB/K,MAAO+O,EAAOG,OAAO1J,OACrBpE,MAAOpD,EAASoD,MAChBuM,KAAG,EACHZ,KAAG,IAGL,eAAC,GAAD,CACEe,UAAU,gBACVC,MAAK,iCAA4BtN,EAASlB,WAArC,YAAmDkB,EAASnB,YAA5D,MACLtC,MAAO+R,EAAO3B,OAAO9H,cACrB0I,QAAQ,sCACR3L,KAAK,SACL6L,SAAU,SAACnD,GACTgE,EAAOW,aAAa3E,IAEtB/K,MAAO+O,EAAOG,OAAO5J,gBAGvB,eAAC,GAAD,CACEwI,UAAU,kBACVC,MAAK,4BAAuBtN,EAASjB,UAAhC,YAA6CiB,EAASlB,WAAtD,MACLvC,MAAO+R,EAAO3B,OAAO7H,gBACrBlD,KAAK,SACL6L,SAAU,SAACnD,GACTgE,EAAOW,aAAa3E,IAEtB/K,MAAO+O,EAAOG,OAAO3J,kBAGvB,eAAC,GAAD,CACEuI,UAAU,OACVC,MAAM,4BACN/Q,MAAO+R,EAAO3B,OAAO9P,KACrB4Q,SAAU,SAACnD,GACTgE,EAAOW,aAAa3E,IAEtB/K,MAAO+O,EAAOG,OAAO5R,OAGvB,eAAC,GAAD,CAAc8D,MAAM,QAAQiB,KAAK,SAAjC,wBAUFmN,GAAOxO,IAAO2O,KAAV,2ECtJKC,GANI5O,IAAO6O,EAAV,yGCqEDC,GAzDgB,SAAC5O,GAAW,IAAD,EACc4D,KAA9CzE,EADgC,EAChCA,UAAWsF,EADqB,EACrBA,eAAgBlH,EADK,EACLA,eADK,EAEQ4L,wBAC9CpL,GAHsC,mBAEjC8Q,EAFiC,KAEfC,EAFe,KAMlChE,EAAe,SAACjO,GAAD,OAAiBiS,EAAoBjS,IACpDkS,EAAiBC,mBACrB,kBACEH,EACI1P,EAAUqF,MAAK,SAAC5H,GAAD,OAAOA,EAAEC,KAAOgS,UAC/B9Q,IACN,CAACoB,EAAW0P,IAGd,OACE,gBAACI,GAAD,WACwB,IAArB9P,EAAUlC,QACT,eAAC,GAAD,qCAGDkC,EAAUkJ,KAAI,SAACvL,EAAUJ,GAAX,OACb,eAAC,GAAD,CAEEI,SAAUA,EACVgO,aAAc,WACZA,EAAahO,EAASD,KAExB4H,eAAgB,SAAC3H,GACf2H,EAAe3H,EAASD,GAAIC,IAE9BS,eAAgB,WACdA,EAAeT,EAASD,KAE1B+Q,gBAAiB,SAAC/O,EAAeC,GAC/B,IAAK,IAAImG,EAAI,EAAGA,EAAI9F,EAAUlC,OAAQgI,IAEpC,GAAIA,IAAMvI,GAASyC,EAAU8F,GAAGpG,KAAWC,EACzC,OAAO,EAGX,OAAO,IAlBJpC,MAwBRmS,GACC,eAAC,GAAD,CACE/R,SAAUiS,EACVxD,WAAY,kBAAMT,WAatBmE,GAAsBnP,IAAOoP,GAAV,0ICjCVC,GA5BiB,WAAO,IAAD,EACQvL,KAApCM,EAD4B,EAC5BA,YAAaS,EADe,EACfA,mBASrB,OACE,uCACE,eAAC,GAAD,wBACA,gBAAC,EAAD,CAAQzE,MAAM,QAAQ0J,QAAS1F,EAA/B,iBACM,eAAC,KAAD,OAEN,eAAC,EAAD,CACEhE,MAAM,MACNE,YAzBe,mFA0BfwJ,QAhBuB,WACNsE,OAAOkB,QAC1B,uFAEgBzK,KAShB,SAKE,eAAC,KAAD,CAAU8E,KAAM,OAElB,eAAC,GAAD,QCzBS4F,GAZM,SAAC,GAIf,IAHL/E,EAGI,EAHJA,SAIA,OACE,eAACgF,GAAD,UACE,eAACC,GAAD,UAAoBjF,OAOpBgF,GAAsBxP,IAAOsK,IAAV,iJASnBmF,GAAoBzP,IAAOsK,IAAV,8UCwBRoF,GApC+C,SAACxP,GAAW,IAChE6N,EAA6B7N,EAA7B6N,OAAQd,EAAqB/M,EAArB+M,OAAQC,EAAahN,EAAbgN,SAExB,OACE,gBAAC,GAAD,WACE,kDACA,eAAC,GAAD,CACEJ,UAAU,eACVC,MAAM,iBACN1L,KAAK,SACLrC,MAAO+O,EAAOG,OAAOhQ,aACrBlC,MAAO+R,EAAO3B,OAAOlO,aACf+O,SAAQC,aAEhB,eAAC,GAAD,CACEJ,UAAU,WACVC,MAAM,aACN1L,KAAK,SACL2L,QAAQ,4CACRhO,MAAO+O,EAAOG,OAAO/P,SACrBnC,MAAO+R,EAAO3B,OAAOjO,SACf8O,SAAQC,aAEhB,eAAC,GAAD,CACEJ,UAAU,WACVC,MAAM,aACN1L,KAAK,SACL2L,QAAQ,yDACRhO,MAAO+O,EAAOG,OAAO9P,SACrBpC,MAAO+R,EAAO3B,OAAOhO,SACf6O,SAAQC,iBCqBPyC,GAlDuB,SAACzP,GAAW,IACxC6N,EAA6B7N,EAA7B6N,OAAQd,EAAqB/M,EAArB+M,OAAQC,EAAahN,EAAbgN,SAExB,OACE,gBAAC,GAAD,WACE,wCACA,eAAC,GAAD,CACEJ,UAAU,YACVC,MAAM,cACN1L,KAAK,OACLrC,MAAO+O,EAAOG,OAAO7P,UACrBrC,MAAO+R,EAAO3B,OAAO/N,UACf4O,SAAQC,aAEhB,eAAC,GAAD,CACEJ,UAAU,cACVC,MAAM,gBACN1L,KAAK,OACLrC,MAAO+O,EAAOG,OAAO5P,YACrBtC,MAAO+R,EAAO3B,OAAO9N,YACf2O,SAAQC,aAEhB,eAAC,GAAD,CACEJ,UAAU,aACVC,MAAM,eACN1L,KAAK,OACLrC,MAAO+O,EAAOG,OAAO3P,WACrBvC,MAAO+R,EAAO3B,OAAO7N,WACf0O,SAAQC,aAEhB,eAAC,GAAD,CACEJ,UAAU,YACVC,MAAM,cACN1L,KAAK,OACLrC,MAAO+O,EAAOG,OAAO1P,UACrBxC,MAAO+R,EAAO3B,OAAO5N,UACfyO,SAAQC,aAEhB,eAAC,GAAD,CACEJ,UAAU,mBACVC,MAAM,qBACN1L,KAAK,OACLrC,MAAO+O,EAAOG,OAAOzP,iBACrBzC,MAAO+R,EAAO3B,OAAO3N,iBACfwO,SAAQC,iB,SCVP0C,GA1BO,SAAoB1P,GAAkC,IAClE4M,EAAsC5M,EAAtC4M,UAAWiB,EAA2B7N,EAA3B6N,OAAQhB,EAAmB7M,EAAnB6M,MAAOC,EAAY9M,EAAZ8M,QAE5B3R,EAAMyR,EACN9N,EAAQ+O,EAAOG,OAAO7S,GACtBW,EAAQ+R,EAAO3B,OAAO/Q,GAO5B,OACE,gBAACwU,GAAD,WACE,eAACC,GAAD,CAAUhG,QAPG,WACfiE,EAAOgC,cAAcjD,GAAYiB,EAAOG,OAAO7S,IAAM,GACrD0S,EAAOU,gBAKwBuB,UAAWhR,EAAxC,SACGA,GAAS,eAAC,KAAD,CAAS2K,KAAM,OAE3B,gBAAC,GAAD,WACE,wBAAOwD,QAASL,EAAhB,SAA4BC,IAC3BC,GAAW,eAAC,GAAD,CAAaV,KAAMU,OAEhChR,GAAS,eAAC,GAAD,UAAQA,QAOlB6T,GAAuB7P,IAAOsK,IAAV,4SAkBpBsC,GAAe5M,IAAOsK,IAAV,gGAUZwF,GAAW9P,IAAOsK,IAAV,sWAIQ,SAACpK,GAAD,OAClBA,EAAM8P,QAAU,2BAA6B,gCC1ClCC,GAxB2C,SAAC/P,GAAW,IAC5D6N,EAA6B7N,EAA7B6N,OAAQd,EAAqB/M,EAArB+M,OAAQC,EAAahN,EAAbgN,SAChBzN,EAAakB,KAAblB,SAER,OACE,gBAAC,GAAD,WACE,gDACA,eAAC,GAAD,CACEqN,UAAU,aACVC,MAAM,oBACAgB,WAER,eAAC,GAAD,CACEjB,UAAU,qBACVC,MAAK,+BAA0BtN,EAAShB,iBAAnC,MACL4C,KAAK,SACLrC,MAAO+O,EAAOG,OAAOvP,mBACrB3C,MAAO+R,EAAO3B,OAAOzN,mBACfsO,SAAQC,iBC8EPgD,GA1FiB,WAAO,IAAD,EACDvP,KAA3BlB,EAD4B,EAC5BA,SAAUqB,EADkB,EAClBA,aAsDZiN,EAAgCC,aAAU,CAC9C9H,cAAc,eAAMzG,GACpBwO,SAnDe,SAACC,GAAsC,IAC9C/P,EAAyD+P,EAAzD/P,SAAUQ,EAA+CuP,EAA/CvP,mBAAoBP,EAA2B8P,EAA3B9P,SAAUF,EAAiBgQ,EAAjBhQ,aAC1CkO,EAAyB,GA4C/B,OAzCKmB,GAAiBrP,GAEZsP,GAAoBtP,EAAc,GAAG,KAC7CkO,EAAOlO,aAAe,wCAFtBkO,EAAOlO,aAAe,gCAKnBqP,GAAiBpP,GAEZqP,GAAoBrP,EAAU,GAAG,KACzCiO,EAAOjO,SAAW,oCAFlBiO,EAAOjO,SAAW,4BAKfoP,GAAiBnP,GAEZoP,GAAoBpP,EAAU,GAAG,KACzCgO,EAAOhO,SAAW,sCAFlBgO,EAAOhO,SAAW,4BAMfmP,GAAiBnP,IAGnBkP,GAAc3O,EAAoB,OACjC2O,GAAc3O,EAAoB,MACnC6O,GAAoB7O,EAAoB,GAAG,GAK5C2O,GAAc3O,EAAoB,WACjC6O,GAAoB7O,GAAqB,QAAQ,GAElDyN,EAAOzN,mBACL,4DAEF2O,GAAc3O,EAAoB,WACjC6O,GAAoB7O,GAAqB,QAAQ,KAElDyN,EAAOzN,mBACL,6DAbFyN,EAAOzN,mBACL,sDAPFyN,EAAOzN,mBAAqB,sCAqBvByN,GAMP+B,SAAU,SAACD,GACTpN,EAAaoN,MAQXjB,EAJS,WACbc,EAAOU,gBAOH0B,EAAe,CACnBpC,SACAd,SACAC,SANe,SAACnD,GAAD,OACfgE,EAAOW,aAAa3E,KAQtB,OACE,uCACE,eAAC,GAAD,wBAEA,gBAAC,GAAD,WACE,eAAC,GAAD,eAA2BoG,IAC3B,eAAC,GAAD,eAAkBA,IAClB,eAAC,GAAD,eAAyBA,WAQ3B3B,GAAOxO,IAAO2O,KAAV,yFC3GKyB,GANApQ,IAAO6O,EAAV,4GCwEGwB,GArD0C,SAACnQ,GAAW,IAC3D1C,EAAa0C,EAAb1C,SACAiH,EAAiBX,KAAjBW,aAER,OACE,gBAAC6L,GAAD,WACiC,IAA9B9S,EAASI,UAAUT,QAA6C,IAA7BK,EAASO,SAASZ,QACpD,eAAC,GAAD,+BAGDK,EAASI,UAAU2K,KAAI,SAACzK,EAAkBlB,GACzC,IAAMI,EAAWyH,EAAa3G,EAAiBJ,YAE/C,OACE,gBAAC,WAAD,WACa,IAAVd,GAAe,eAAC,KAAD,CAAQ+M,KAAM,KAC9B,gBAAC4G,GAAD,WACE,6BAAIzS,EAAiB2H,4BACrB,eAAC,GAAD,CACErF,MAAOpD,EAASoD,MADlB,SAGGpD,EAASwH,cAPD1G,EAAiBJ,eAcnCF,EAASI,UAAUT,OAAS,GAAKK,EAASO,SAASZ,OAAS,GAC3D,eAAC,KAAD,CAAcwM,KAAM,KAGrBnM,EAASO,SAASwK,KAAI,SAACzK,EAAkBlB,GACxC,IAAMI,EAAWyH,EAAa3G,EAAiBJ,YAE/C,OACE,gBAAC,WAAD,WACa,IAAVd,GAAe,eAAC,KAAD,CAAQ+M,KAAM,KAC9B,gBAAC4G,GAAD,WACE,6BAAIzS,EAAiB2H,4BACrB,eAAC,GAAD,CACErF,MAAOpD,EAASoD,MADlB,SAGGpD,EAASwH,cAPD1G,EAAiBJ,mBAmBpC4S,GAAyBtQ,IAAOsK,IAAV,8GAOtBiG,GAAkBvQ,IAAOsK,IAAV,oMAgBfa,GAAenL,IAAOsK,IAAV,uOACI,SAACpK,GAAD,OAAWyC,GAAgBzC,EAAME,UC9DxCoQ,GArBoC,SAACtQ,GAAW,IACrD1C,EAA0D0C,EAA1D1C,SAAUiT,EAAgDvQ,EAAhDuQ,cAAeC,EAAiCxQ,EAAjCwQ,aAAcjO,EAAmBvC,EAAnBuC,eAE/C,OACE,gBAACkO,GAAD,WACE,gBAACC,GAAD,WACE,gBAACC,GAAD,sBACOJ,EAAgB,GADvB,IAC6BjT,EAASlB,KAAT,aAAsBkB,EAASlB,MAAS,MAErE,eAAC,GAAD,CAAiBkB,SAAUA,OAE7B,eAAC,GAAD,CAAYsM,QAAS4G,EAArB,SACE,eAAC,KAAD,MAEF,eAAC,GAAD,CAAY5G,QAASrH,EAArB,SACE,eAAC,KAAD,UAQFkO,GAAsB3Q,IAAOsK,IAAV,yrBA+BnBuG,GAAe7Q,IAAO6O,EAAV,gMAUZ+B,GAAe5Q,IAAOsK,IAAV,4F,mBhCtDNtJ,O,uBAAAA,I,sBAAAA,Q,cAkBAC,O,mBAAAA,I,2BAAAA,I,kCAAAA,Q,KiCxBL,I,iFAAM6P,GAAiB,CAAC,SAAU,aAAc,iBAE1CC,GAA2B,SACtCC,EACAxT,EACA6B,GAEA,OAAQ2R,GACN,KAAK/P,GAAagQ,WAChB,OAAOC,GAAiC1T,EAAU6B,GACpD,KAAK4B,GAAakQ,cAChB,OAAOC,GAAoC5T,EAAU6B,GACvD,QAEE,OAAOgS,GAA6B7T,EAAU6B,KAI9CgS,GAA+B,SACnC7T,EACA6B,GAEA,IAAMiS,EAAqC,CACzC,UAAW9T,EAASsE,iBAAiB,WACrCC,IAAKvE,EAASsE,iBAAiBC,KAiBjC,OAdAvE,EAASI,UAAUD,SAAQ,SAACG,GAC1B,IAAMd,EAAWqC,EAAUqF,MACzB,SAAC5H,GAAD,OAAOA,EAAEC,KAAOe,EAAiBJ,cAE7B6T,EAAWC,GAAiBxU,GAC5ByU,EAAcjU,EAASsE,iBAAiByP,GAG5CD,EAAiBC,QADCtT,IAAhBwT,EAC2B,EAEAA,KAI1B,eAAKH,IAGRJ,GAAmC,SACvC1T,EACA6B,GAEA,IAAMiS,EAAqC,CACzC,UAAW9T,EAASsE,iBAAiB,WACrCC,IAAKvE,EAASsE,iBAAiBC,KAiBjC,OAdAvE,EAASI,UAAUD,SAAQ,SAACG,GAC1B,IAAMd,EAAWqC,EAAUqF,MACzB,SAAC5H,GAAD,OAAOA,EAAEC,KAAOe,EAAiBJ,cAE7B6T,EAAWG,GAAuB1U,GAClCyU,EAAcjU,EAASsE,iBAAiByP,GAG5CD,EAAiBC,QADCtT,IAAhBwT,EAC2B,EAEAA,KAI1B,eAAKH,IAGRF,GAAsC,SAC1C5T,EACA6B,GAEA,IAAMiS,EAAqC,CACzC,UAAW9T,EAASsE,iBAAiB,WACrCC,IAAKvE,EAASsE,iBAAiBC,KA8BjC,OA3BAvE,EAASI,UAAUD,SAAQ,SAACG,GAC1B,IAAMd,EAAWqC,EAAUqF,MACzB,SAAC5H,GAAD,OAAOA,EAAEC,KAAOe,EAAiBJ,cAE7B6T,EAAWC,GAAiBxU,GAC5ByU,EAAcjU,EAASsE,iBAAiByP,GAG5CD,EAAiBC,QADCtT,IAAhBwT,EAC2B,EAEAA,KAGjCjU,EAASO,SAASJ,SAAQ,SAACG,GACzB,IAAMd,EAAWqC,EAAUqF,MACzB,SAAC5H,GAAD,OAAOA,EAAEC,KAAOe,EAAiBJ,cAE7B6T,EAAWI,GAAgB3U,GAC3ByU,EAAcjU,EAASsE,iBAAiByP,GAG5CD,EAAiBC,QADCtT,IAAhBwT,EAC2B,EAEAA,KAI1B,eAAKH,IAKDE,GAAmB,SAACxU,GAC/B,MAAM,WAAN,OAAkBA,EAASwH,SAGhBmN,GAAkB,SAAC3U,GAC9B,MAAM,UAAN,OAAiBA,EAASwH,SAGfkN,GAAyB,SAAC1U,GACrC,MAAM,KAAN,OAAYA,EAASwH,SCYRoN,GA/HA,SAA4B1R,GAA4B,IAEnE2R,EAME3R,EANF2R,UACAC,EAKE5R,EALF4R,oBACAC,EAIE7R,EAJF6R,UACAC,EAGE9R,EAHF8R,aACAC,EAEE/R,EAFF+R,kBACAC,EACEhS,EADFgS,cAPkE,EAWlC7I,oBAAkB,GAXgB,mBAW7D8I,EAX6D,KAWlDC,EAXkD,OAY5B/I,oBAC1B,OAAZ2I,QAAY,IAAZA,OAAA,EAAAA,EAAchT,aAASf,GAb2C,mBAY7DoU,EAZ6D,KAY/CC,EAZ+C,KAiB9DvV,EAAKwV,iBAAe5Q,KAAaC,SAAS,IAM1C4Q,EAAYD,iBAA2B,MAG7C1R,qBAAU,WAEJmR,GAAcM,EAAgBN,EAAahT,OAG/CwT,EAAUC,QAAUC,SAASC,eAAe5V,EAAG0V,WAG9C,IAKH5R,qBAAU,WACO2R,EAAUC,QAArBN,EAA+BO,SAASC,eAAe5V,EAAG0V,SACrC,OACxB,CAACN,IAQJ,IAAMS,EAAsBC,uBAAY,SAAC9I,GAAsB,IAAD,GAKxD,UAACyI,EAAUC,eAAX,aAAC,EAAmBK,SAAS/I,EAAMgJ,WACrCC,IAEAZ,GAAa,MAGd,IAMGY,EAAkB,WAEjBb,EAGH/D,OAAO6E,oBAAoB,QAASL,GAAqB,GAFzDxE,OAAO8E,iBAAiB,QAASN,GAAqB,GAMxDR,GAAcD,IAOVgB,EAAc,SAACnU,GACnBgU,IACAV,EAAgBtT,GAChBiT,EAAkBjT,IAMdoU,EAAmDlB,EAAcxN,MACrE,SAAC2O,GAAD,OAAYA,EAAOrU,QAAUqT,KAG/B,OACE,gBAACiB,GAAD,CAAevW,GAAIA,EAAG0V,QAAtB,UACE,gBAACc,GAAD,CAAapB,UAAWA,EAAWrI,QAASkJ,EAA5C,UACE,8BAAsB,OAAlBI,QAAkB,IAAlBA,OAAA,EAAAA,EAAoBI,uBAAwB1B,IAChD,eAAC,KAAD,CAAenI,KAAM,QAEtBwI,GACC,gBAACsB,GAAD,CAAe5B,UAAWA,GAAa,OAAvC,UACGC,GACC,eAAC4B,GAAD,CAAc5J,QAAS,kBAAMqJ,OAAYlV,IAAzC,SACE,6BAAI6T,MAGPI,EAAc3J,KAAI,gBAAGvJ,EAAH,EAAGA,MAAO2U,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,qBAAvB,OACjB,gBAACF,GAAD,CAEE5J,QAAS,WACPqJ,EAAYnU,IAEd4U,qBAAsBA,EALxB,UAOE,6BAAID,IACJ,gCAAO5B,MAPF/S,aAsBbsU,GAAgBtT,IAAOsK,IAAV,sEAKbiJ,GAAcvT,IAAOsK,IAAV,8XAWb,SAACpK,GAAD,OACAA,EAAMiS,UAAN,0FAGI,MAgBFsB,GAAgBzT,IAAOsK,IAAV,4fAKf,SAACpK,GAAD,MAAgC,SAApBA,EAAM2R,UAAuB,WAAa,MACtD,SAAC3R,GAAD,MAAgC,UAApBA,EAAM2R,UAAwB,YAAc,MAsBtD6B,GAAe1T,IAAOC,OAAV,4iBAWM,SAACC,GAAD,OAClBA,EAAM0T,sBAAwB,+BCzOvBC,GAAoB7T,IAAOsK,IAAV,oQAcjBwJ,GAA0B9T,YAAO6T,GAAP7T,CAAH,+EC0DrB+T,GA/CoD,SAAC7T,GAAW,IACrElD,EAA+DkD,EAA/DlD,SAAUc,EAAqDoC,EAArDpC,iBAAkB6G,EAAmCzE,EAAnCyE,eAAgBlH,EAAmByC,EAAnBzC,eADwB,EAI5B4L,mBAC9CvL,EAAiB2H,2BALyD,mBAIrEuO,EAJqE,KAInDC,EAJmD,KA6B5E,OACE,gBAACC,GAAD,CACE9T,MAAOpD,EAASoD,MADlB,UAGE,8BAAKpD,EAASwH,SACd,wBACExF,MAAOgV,EACP3S,KAAK,SACL6L,SA7B0B,SAC9BnD,GAE2B,KAAvBA,EAAMgJ,OAAO/T,MAIjBiV,EAAoBE,WAAWpK,EAAMgJ,OAAO/T,QAH1CiV,EAAoB,KA0BlBhH,OApB+B,WAC/BM,GAAiByG,GACnBrP,EAAe,2BACV7G,GADS,IAEZ2H,0BAA2BuO,KAI/BC,EAAoBnW,EAAiB2H,8BAcnC,eAAC,GAAD,CAAYqE,QAASrM,EAArB,SACE,eAAC,KAAD,UAYFyW,GAA8BlU,IAAOsK,IAAV,wtBAUX,SAACpK,GAAD,OAAWyC,GAAgBzC,EAAME,UC9BxCgU,GAtCoD,SAAClU,GAAW,IACrEmU,EACNnU,EADMmU,kBAAmB5W,EACzByC,EADyBzC,eAAgBkH,EACzCzE,EADyCyE,eAAgB2P,EACzDpU,EADyDoU,aAEnD7P,EAAiBX,KAAjBW,aAER,OACE,qCACG4P,EAAkB9L,KAAI,SAACzK,GACtB,IAAMd,EAAWyH,EAAa3G,EAAiBJ,YAIzCkQ,EAAgByG,EAAkBxX,WACtC,SAACC,GAAD,OAAOA,EAAEY,aAAeI,EAAiBJ,cAG3C,OACE,eAAC,GAAD,CAEEV,SAAUA,EACVc,iBAAkBA,EAClB6G,eAAgB,SAAC4P,GACf5P,EACEiJ,EACA0G,EACAC,IAGJ9W,eAAgB,WACdA,EAAemQ,EAAe0G,KAX3BxW,EAAiBJ,kBCzBrB8W,GAAgC,SAACtU,GAAW,IAC/CgF,EAAsBhF,EAAtBgF,kBACFuP,EAA4B,GAE5BC,EAA+C,GAC/ChO,EAA8B,GA4JpC,OA1JAxB,EAAkBvH,SAAQ,SAACkJ,GASzB,GAAIA,EAAMxF,OAASlG,EAAWgH,gBAC5BuS,EAAiB5N,KAAK,SACjB,GAAID,EAAMxF,OAASlG,EAAWiH,iBAAkB,CAErD,IAAMuS,EAAcD,EAAiBzN,MAI/B2N,EACwB,IAA5BF,EAAiBvX,OACbsX,EACAC,EAAiBA,EAAiBvX,OAAS,GAIjD,GACEuJ,EAAevJ,OAAS,GACxBuJ,EAAeA,EAAevJ,OAAS,GAAG0X,QACxCH,EAAiBvX,OACnB,CACA,IAAM2X,EAAYpO,EAAeO,MAGjC,GAAuB,MAAnB6N,EAAUC,KAAc,CAC1B,IAAMC,EAAYJ,EAAa3N,MAC/B2N,EAAa9N,KACX,eAAC,GAAD,CACEkO,UAAWA,EACXC,YAAa,eAAC,GAAD,CAAaC,SAAUP,YAGnC,GAAuB,MAAnBG,EAAUC,KAAc,CACjC,IAAMI,EAAOP,EAAa3N,MAC1B2N,EAAa9N,KACX,eAAC,GAAD,CAAOqO,KAAMA,EAAMC,MAAO,eAAC,GAAD,CAAaF,SAAUP,WAEvB,MAAnBG,EAAUC,MAAmC,MAAnBD,EAAUC,OAC7CH,EAAa9N,KAAKgO,EAAUC,MAC5BH,EAAa9N,KAAK,eAAC,GAAD,CAAaoO,SAAUP,WAI3CC,EAAa9N,KAAK,eAAC,GAAD,CAAaoO,SAAUP,UAWxC,GACH9N,EAAMxF,OAASlG,EAAW8G,WAC1B4E,EAAMxF,OAASlG,EAAWkH,SAK1B,GAAIqS,EAAiBvX,OAAS,EAC5BuX,EAAiBA,EAAiBvX,OAAS,GAAG2J,KAC5C,eAAC,GAAD,CACEtC,OAASqC,EAAM7H,MAAiBuI,QAAQ,WAAY,YAQrD,GAAIb,EAAevJ,OAAS,EAAG,CAIlC,IAAM2X,EAAYpO,EAAeO,MAEjC,GAAuB,MAAnB6N,EAAUC,KAAc,CAC1B,IAAMC,EAAYP,EAAWxN,MAC7BwN,EAAW3N,KACT,eAAC,GAAD,CACEkO,UAAWA,EACXC,YACE,eAAC,GAAD,CACEzQ,OAASqC,EAAM7H,MAAiBuI,QAAQ,WAAY,cAKvD,GAAuB,MAAnBuN,EAAUC,KAAc,CACjC,IAAMI,EAAOV,EAAWxN,MACxBwN,EAAW3N,KACT,eAAC,GAAD,CACEqO,KAAMA,EACNC,MACE,eAAC,GAAD,CACE5Q,OAASqC,EAAM7H,MAAiBuI,QAAQ,WAAY,eAY9DkN,EAAW3N,KACT,eAAC,GAAD,CACEtC,OAASqC,EAAM7H,MAAiBuI,QAAQ,WAAY,YAUnDV,EAAMxF,OAASlG,EAAW+G,WACb,MAAhB2E,EAAM7H,OAAiC,MAAhB6H,EAAM7H,MAE/B0H,EAAeI,KAAK,CAClBiO,KAAMlO,EAAM7H,MACZ6V,MAAOH,EAAiBvX,SAInBuX,EAAiBvX,OAAS,EACb,MAAhB0J,EAAM7H,OAAiC,MAAhB6H,EAAM7H,MAC/B0V,EAAiBA,EAAiBvX,OAAS,GAAG2J,KAAK,qCAAGD,EAAM7H,SACnC,MAAhB6H,EAAM7H,OACf0V,EAAiBA,EAAiBvX,OAAS,GAAG2J,KAAK,4CAGjC,MAAhBD,EAAM7H,OAAiC,MAAhB6H,EAAM7H,MAC/ByV,EAAW3N,KAAK,qCAAGD,EAAM7H,SACA,MAAhB6H,EAAM7H,OACfyV,EAAW3N,KAAK,gDAOtB,qCACG2N,EAAWlM,KAAI,SAAC8M,EAAWzY,GAAZ,OACd,eAAC,WAAD,UAAuByY,GAARzY,SAeV0Y,GAA8C,SAACpV,GAAW,IAQ/DqV,EAParV,EAAXsE,OAOgDgR,MAAM,KAG9DD,EAAe5X,SAAQ,SAAC8X,EAAM7Y,GAC5B,OAAQ6Y,GACN,IAAK,UACHF,EAAe3Y,GAAS,eAAC,GAAD,IACxB,MACF,IAAK,SACH2Y,EAAe3Y,GAAS,eAAC,GAAD,IACxB,MACF,IAAK,OACH2Y,EAAe3Y,GAAS,eAAC,GAAD,IACxB,MACF,IAAK,QACH2Y,EAAe3Y,GAAS,eAAC,GAAD,QAM9B,IAAK,IAAIuI,EAAIoQ,EAAepY,OAAS,EAAGgI,EAAI,EAAGA,IAAK,CAElD,IAAMuQ,EAAWH,EAAetO,MAChCsO,EAAepQ,EAAI,GACjB,eAAC,GAAD,CAAUgQ,KAAMI,EAAepQ,EAAI,GAAIuQ,SAAUA,IAKrD,OAAOH,EAAe,IAYXI,GAA2C,SAACzV,GAAW,IAC1DgV,EAAahV,EAAbgV,SAER,OACE,qCACGA,EAAS3M,KAAI,SAACqN,EAAMhZ,GAAP,OACZ,eAAC,WAAD,UAAuBgZ,GAARhZ,SAgBViZ,GAAqC,SAAC3V,GAAW,IACpD8U,EAA2B9U,EAA3B8U,UAAWC,EAAgB/U,EAAhB+U,YAEnB,OACE,gBAACa,GAAD,WACE,+BAAMd,IACN,yBACA,+BAAMC,QAKNa,GAAkB9V,IAAOsK,IAAV,iUA4BRyL,GAA+B,SAAC7V,GAAW,IAC9CiV,EAAgBjV,EAAhBiV,KAAMC,EAAUlV,EAAVkV,MACd,OACE,gBAACY,GAAD,WACE,+BAAMb,IACN,sBAAKlJ,UAAU,WAAf,SAA2BmJ,QAK3BY,GAAehW,IAAOsK,IAAV,sKAoBL2L,GAAqC,SAAC/V,GAAW,IACpDiV,EAAmBjV,EAAnBiV,KAAMO,EAAaxV,EAAbwV,SACd,OACE,gBAACQ,GAAD,WACE,+BAAMf,IACN,sBAAKlJ,UAAU,WAAf,SAA2ByJ,QAK3BQ,GAAkBlW,IAAOsK,IAAV,8IAcR6L,GAAa,kBAAM,4CACnBC,GAAY,kBAAM,4CAClBC,GAAU,kBAAM,4CAMhBC,GAAiB,kBAAM,4CC5UrBC,GApB4C,SAACrW,GAAW,IAC7D1C,EAAa0C,EAAb1C,SAGFQ,GAAcyG,EAFKX,KAAjBW,cAEyBjH,EAASQ,aACpCwY,GAAmD,OAAXxY,QAAW,IAAXA,OAAA,EAAAA,EAAawG,cAAUvG,EAErE,OACE,gBAACwY,GAAD,WACGD,GACC,uCACE,eAAC,GAAD,CAAUrB,KAAK,IAAIO,SAAUc,IAD/B,eAKF,eAAC,GAAD,CAAUtR,kBAAmB1H,EAASwE,sBAStCyU,GAAkBzW,IAAOsK,IAAV,gcCgBNoM,GAtCwD,SACrExW,GACI,IACIyW,EAA2CzW,EAA3CyW,YAAa3X,EAA8BkB,EAA9BlB,MAAO4X,EAAuB1W,EAAvB0W,MAAOC,EAAgB3W,EAAhB2W,YADhC,EAEiCxN,mBAAsBrK,GAFvD,mBAEI8X,EAFJ,KAEgBC,EAFhB,KAoBH,OACE,eAACC,GAAD,UACE,gBAACC,GAAD,WACE,8BAAKN,IACL,wBACE3X,MAAO8X,EACPzV,KAAK,SACL6L,SAvBa,SAACnD,GACO,KAAvBA,EAAMgJ,OAAO/T,MAIjB+X,EAAc5C,WAAWpK,EAAMgJ,OAAO/T,QAHpC+X,EAAc,KAsBV9J,OAhB0B,WAC5BM,GAAiBuJ,GACnBD,EAAYC,GAGdC,EAAc/X,MAaT4X,GAAS,eAAC,GAAD,CAAatK,KAAMsK,UAQ/BI,GAAoBhX,IAAOsK,IAAV,6HAUjB2M,GAAkBjX,IAAOsK,IAAV,omBC2BN4M,GA3E8D,SAC3EhX,GACI,IACI1C,EAAoC0C,EAApC1C,SAAU2Z,EAA0BjX,EAA1BiX,sBACV1X,EAAakB,KAAblB,SACFoC,EAA6BrE,EAASqE,aAEtCuV,EAAmB,CACvB,IAAIhW,GAAMjG,EAAW8G,UAArB,UAAmCxC,EAASpB,YAC5C,IAAI+C,GAAMjG,EAAW+G,SAAU,KAC/B,IAAId,GAAMjG,EAAW8G,UAArB,OAGIoV,EAAkB,CACtB,IAAIjW,GAAMjG,EAAW8G,UAArB,UAAmCxC,EAASpB,YAC5C,IAAI+C,GAAMjG,EAAW+G,SAAU,KAC/B,IAAId,GAAMjG,EAAW8G,UAArB,OAGIqV,EAAc7P,OAAOgB,QAAP,OAAejL,QAAf,IAAeA,OAAf,EAAeA,EAAUsE,kBAAkByV,QAC7D,SAACC,EAAD,GAAgC,IAAD,mBAAhBnc,EAAgB,KAAX2D,EAAW,KAC7B,MAAY,mBAAR3D,GAAoC,qBAARA,EACvBmc,EACFA,EAAcxY,MAEvB,OAACxB,QAAD,IAACA,OAAD,EAACA,EAAUsE,iBAAiBqC,IAAK,GAoBnC,OAjBoB,IAAhBmT,IACFD,EAAgBvQ,KAAK,IAAI1F,GAAMjG,EAAW+G,SAAU,MACpDmV,EAAgBvQ,KACd,IAAI1F,GAAMjG,EAAW8G,UAArB,UAAmCxC,EAASnB,eAE9C+Y,EAAgBvQ,KAAK,IAAI1F,GAAMjG,EAAW+G,SAAU,MACpDmV,EAAgBvQ,KAAK,IAAI1F,GAAMjG,EAAW8G,UAArB,UAAmCqV,EAAc,KACtED,EAAgBvQ,KAAK,IAAI1F,GAAMjG,EAAW+G,SAAU,MACpDmV,EAAgBvQ,KACd,IAAI1F,GAAMjG,EAAW8G,UAArB,UAAmCxC,EAASlB,cAE9C8Y,EAAgBvQ,KAAK,IAAI1F,GAAMjG,EAAW+G,SAAU,MACpDmV,EAAgBvQ,KACd,IAAI1F,GAAMjG,EAAW8G,UAArB,YAAqCqV,EAAc,OAKrD,eAACG,GAAD,UACGhQ,OAAOgB,QAAQjL,EAASsE,kBAAkByG,KAAI,YAAqB,IAC9DqO,EAAOpS,EADsD,mBAAlBkT,EAAkB,KAAX1Y,EAAW,KAYjE,OAPI4X,EADE/U,IAAiBZ,GAAagQ,WACxB,eAAC,GAAD,CAAU/L,kBAAmBkS,IAE7B,eAAC,GAAD,CAAUlS,kBAAmBmS,IAGzC7S,EAASkT,EAGP,eAAC,GAAD,CAEEf,YAAa,eAAC,GAAD,CAAiBnS,OAAQA,IACtCxF,MAAOA,EACP4X,MAAOA,EACPC,YAAa,SAAC7X,GACZmY,EAAsBO,EAAO1Y,KAL1B0Y,SAgBXD,GAAuBzX,IAAOsK,IAAV,sRCnCXqN,GAxDkB,SAC/Bna,EACA6B,GAEA,IAAMoF,EAAe,SAAC1H,GACpB,OAAOsC,EAAUqF,MAAK,SAAC5H,GAAD,OAAOA,EAAEC,KAAOA,MAGlC6a,EAA0B,GAOhC,OAAQpa,EAASqE,cACf,KAAKZ,GAAagQ,WAQhB,OAPA2G,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW8G,UAArB,cACpB4V,GAAwBD,GAExBpa,EAASI,UAAUD,SAAQ,SAACG,GAAsB,IACxC0G,EAAWC,EAAa3G,EAAiBJ,YAAzC8G,OACRsT,GAAkBF,EAAgBpT,MAE7BoT,EAIT,KAAK3W,GAAakQ,cAYhB,OAXAyG,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW8G,UAArB,cACpB4V,GAAwBD,GAExBpa,EAASI,UAAUD,SAAQ,SAACG,GAAsB,IACxC0G,EAAWC,EAAa3G,EAAiBJ,YAAzC8G,OACRuT,GAAwBH,EAAgBpT,MAE1ChH,EAASO,SAASJ,SAAQ,SAACG,GAAsB,IACvC0G,EAAWC,EAAa3G,EAAiBJ,YAAzC8G,OACRwT,GAAuBJ,EAAgBpT,MAElCoT,EAIT,QAQE,OAPAA,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW8G,UAArB,cACpB4V,GAAwBD,GAExBpa,EAASI,UAAUD,SAAQ,SAACG,GAAwC,IAC1D0G,EAAWC,EAAa3G,EAAiBJ,YAAzC8G,OACRuT,GAAwBH,EAAgBpT,MAEnCoT,IAQPC,GAA0B,SAACD,GAC/BA,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW+G,SAAU,MACnD0V,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW8G,UAAW,MACpD2V,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW+G,SAAU,MACnD0V,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAWgH,gBAAiB,MAC1DyV,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAWgH,gBAAiB,MAC1DyV,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW+G,SAAU,MACnD0V,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW8G,UAAW,UACpD2V,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAWiH,iBAAkB,MAC3DwV,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW+G,SAAU,MACnD0V,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAWgH,gBAAiB,MAC1DyV,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW8G,UAAW,QACpD2V,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW+G,SAAU,MACnD0V,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAWkH,SAAU,QACnDuV,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAWiH,iBAAkB,MAC3DwV,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAWiH,iBAAkB,OAGvD2V,GAA0B,SAC9BH,EACApT,GAEAoT,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW+G,SAAU,MACnD0V,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAWkH,SAArB,YAAoCmC,EAApC,QACpBoT,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW+G,SAAU,MACnD0V,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW8G,UAArB,mBAA4CuC,EAA5C,QAGhBwT,GAAyB,SAC7BJ,EACApT,GAEAoT,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW+G,SAAU,MACnD0V,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAWkH,SAArB,YAAoCmC,EAApC,QACpBoT,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW+G,SAAU,MACnD0V,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW8G,UAArB,kBAA2CuC,EAA3C,QAGhBsT,GAAoB,SAACF,EAAyBpT,GAClDoT,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW+G,SAAU,MACnD0V,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAWkH,SAArB,YAAoCmC,EAApC,QACpBoT,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW+G,SAAU,MACnD0V,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAWgH,gBAAiB,MAC1DyV,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW8G,UAArB,aAAsCuC,EAAtC,OACpBoT,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAW+G,SAAU,MACnD0V,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAWkH,SAArB,YAAoCmC,EAApC,QACpBoT,EAAe9Q,KAAK,IAAI1F,GAAMjG,EAAWiH,iBAAkB,OCuS9C6V,GA5W8C,SAAC/X,GAAW,IAC/Db,EAAoCa,EAApCb,UAAW7B,EAAyB0C,EAAzB1C,SAAUiO,EAAevL,EAAfuL,WACrBhH,EAAiBX,KAAjBW,aAF8D,EAGhClD,KAA9BhC,EAH8D,EAG9DA,UAAW+C,EAHmD,EAGnDA,eAHmD,EAIxC+G,oBAAkB,GAJsB,mBAI/DiC,EAJ+D,KAItDC,EAJsD,KAKhEkF,EAAgBlR,EAAU1C,WAAU,SAACqb,GAAD,OAASA,EAAInb,KAAOS,EAAST,MALD,EAS5BsM,mBACxC5N,KAAKC,MAAMD,KAAKK,UAAU0B,KAV0C,mBAS/D2a,EAT+D,KAShDC,EATgD,KAchEC,EAAY9F,iBAAOG,SAASC,eAAe,kBAdqB,EAiBhBtJ,wBAEpDpL,GAnBoE,mBAiB/Dqa,EAjB+D,KAiB1CC,EAjB0C,OAoBlBlP,wBAElDpL,GAtBoE,mBAoB/Dua,EApB+D,KAoB3CC,EApB2C,KA2BhEC,EAAkBxJ,mBAAQ,WAC9B,OAAO7P,EACJxB,QAAO,SAACb,GAAc,IAAD,iBACGmb,EAAcva,WADjB,IACpB,2BAAgD,CAC9C,GAD8C,QACjCF,aAAeV,EAASD,GACnC,OAAO,GAHS,8BAMpB,OAAO,KAERwL,KAAI,SAACvL,GAEJ,MAAO,CACLgC,MAFYK,EAAUxC,WAAU,SAACC,GAAD,OAAOA,EAAEC,KAAOC,EAASD,MAGzD4W,YAAa3W,EAASwH,OACtBgP,qBAAsBxW,EAASwH,OAC/BoP,qBACEjR,GAAgB3F,EAASoD,aAIhC,CAAC+X,EAAcva,YAEZ+a,EAAiBzJ,mBAAQ,WAC7B,OAAO7P,EACJxB,QAAO,SAACb,GAAc,IAAD,iBACEmb,EAAcpa,UADhB,IACpB,2BAA8C,CAC5C,GAD4C,QAChCL,aAAeV,EAASD,GAClC,OAAO,GAHS,8BAMpB,OAAO,KAERwL,KAAI,SAACvL,GAEJ,MAAO,CACLgC,MAFYK,EAAUxC,WAAU,SAACC,GAAD,OAAOA,EAAEC,KAAOC,EAASD,MAGzD4W,YAAa3W,EAASwH,OACtBgP,qBAAsBxW,EAASwH,OAC/BoP,qBACEjR,GAAgB3F,EAASoD,aAIhC,CAAC+X,EAAcpa,WAKZ6a,EAAiB,SACrBtE,GAEA,OAAIA,IAAiBtT,GAAa6X,SAAiB,YAC5C,YAGHzU,EAAc,SAClB1G,EACA4W,GAGA,IAAMjZ,EAAMud,EAAetE,GACrB/R,EAAkB9G,KAAKC,MAAMD,KAAKK,UAAUqc,IAElD5V,EAAgBlH,GAAKyL,KAAK,CACxBpJ,aACA+H,0BAA2B,IAI7B,IAAM3D,EAAmBiP,GACvBxO,EAAgBV,aAChBU,EACAlD,GAEFkD,EAAgBT,iBAAmBA,EACnCS,EAAgBP,gBAAkB2V,GAChCpV,EACAlD,GAGF+Y,EAAiB7V,IAGboC,EAAiB,SACrBiJ,EACA0G,EACA1P,GAGA,IAAMvJ,EAAMud,EAAetE,GACrB/R,EAAe,eAAQ4V,GAE7B5V,EAAgBlH,GAAKuS,GAAiBhJ,EAEtCwT,EAAiB7V,IAGb9E,EAAiB,SACrBmQ,EACA0G,GAGA,IAAMjZ,EAAMud,EAAetE,GACrB/R,EAAe,eAAQ4V,GACvBW,EAAkBvW,EAAgBlH,GAAKuS,GAG7CrL,EAAgBlH,GAAhB,sBACKkH,EAAgBlH,GAAK6B,MAAM,EAAG0Q,IADnC,YAEKrL,EAAgBlH,GAAK6B,MACtB0Q,EAAgB,EAChBrL,EAAgBlH,GAAK8B,UAKrB2b,EAAgBpb,aAAeya,EAAcna,cAC/CuE,EAAgBvE,iBAAcC,GAIhC,IAAM6D,EAAmBiP,GACvBxO,EAAgBV,aAChBU,EACAlD,GAEFkD,EAAgBT,iBAAmBA,EACnCS,EAAgBP,gBAAkB2V,GAChCpV,EACAlD,GAGF+Y,EAAiB7V,IAcbwW,EAA6BT,EAC/B,CACEtZ,MAAOsZ,EACP3E,YAAatU,EAAUiZ,GAAqB9T,OAC5CgP,qBAAsBnU,EAAUiZ,GAAqB9T,aAEvDvG,EAEE+a,EAA4BR,EAC9B,CACExZ,MAAOwZ,EACP7E,YAAatU,EAAUmZ,GAAoBhU,OAC3CgP,qBAAsBnU,EAAUmZ,GAAoBhU,aAEtDvG,EAEJ,OACE,gBAAC,GAAD,CACEqN,QAASA,EACTC,WAAYA,EACZC,YAAaC,EAHf,UAKE,eAAC,GAAD,CAAiBjO,SAAU2a,IAC3B,wBACA,eAAC,GAAD,CACErL,UAAU,OACVC,MAAM,iBACNG,SAAU,SAACnD,GACTqO,EAAiB,2BACZD,GADW,IAEd7b,KAAMyN,EAAMgJ,OAAO/T,UAGvBA,MAAOmZ,EAAc7b,OAIvB,gBAACuX,GAAD,WACE,gBAACoF,GAAD,WACE,4CACA,eAACC,GAAD,UACE,eAAC,GAAD,CACEpH,oBAAoB,cACpBC,UAAW,eAAC,KAAD,IACXC,aAAc+G,EACd7G,cAAewG,EACfzG,kBAAmB,SAACrV,QACJqB,IAAVrB,GACFwH,EAAY/E,EAAUzC,GAAOG,GAAIiE,GAAa6X,UAEhDN,OAAuBta,QAI7B,eAACkb,GAAD,UACsC,IAAnChB,EAAcva,UAAUT,OACvB,eAAC,GAAD,CACEsT,cAAeA,EACf4D,kBAAmB8D,EAAcva,UACjCH,eAAgBA,EAChBkH,eAAgBA,EAChB2P,aAActT,GAAa6X,WAG7B,eAAC,GAAD,mCAKN,gBAACI,GAAD,WACE,2CACA,eAACC,GAAD,UACE,eAAC,GAAD,CACEpH,oBAAoB,cACpBC,UAAW,eAAC,KAAD,IACXC,aAAcgH,EACd9G,cAAeyG,EACf1G,kBAAmB,SAACrV,QACJqB,IAAVrB,GACFwH,EAAY/E,EAAUzC,GAAOG,GAAIiE,GAAaoY,SAEhDX,OAAsBxa,QAI5B,eAACkb,GAAD,UACqC,IAAlChB,EAAcpa,SAASZ,OACtB,eAAC,GAAD,CACEsT,cAAeA,EACf4D,kBAAmB8D,EAAcpa,SACjCN,eAAgBA,EAChBkH,eAAgBA,EAChB2P,aAActT,GAAaoY,UAG7B,eAAC,GAAD,sCAOR,gBAACtF,GAAD,WACE,2CACA,gBAACuF,GAAD,WACE,+CACA,eAAC,GAAD,CACErH,aAAc,CACZhT,MAAOmZ,EAActW,aACrB8R,YAAa7C,GAAeqH,EAActW,cAC1C2R,qBAAsB1C,GAAeqH,EAActW,eAErDqQ,cAAepB,GAAevI,KAAI,SAACyI,EAAOpU,GAAR,MAAmB,CACnDoC,MAAOpC,EACP+W,YAAa3C,EACbwC,qBAAsBxC,MAExBiB,kBAAmB,SAACjT,GAClB,IAAMuD,EAAkB9G,KAAKC,MAAMD,KAAKK,UAAUqc,IAElD5V,EAAgBT,iBAAmBiP,GACjC/R,EACAmZ,EACA9Y,GAEFkD,EAAgBV,aAAe7C,EAC/BuD,EAAgBP,gBAAkB2V,GAChCpV,EACAlD,GAGF+Y,EAAiB7V,SAIvB,gBAAC8W,GAAD,WACE,8CACA,eAAC,GAAD,CACEvH,oBAAoB,cACpBE,kBACgC/T,IAA9Bka,EAAcna,YACV,CACEgB,MAAOmZ,EAAcna,YACrB2V,YACElP,EAAa0T,EAAcna,aAC3BwG,OACFgP,qBACE/O,EAAa0T,EAAcna,aAC3BwG,aAEJvG,EAENiU,cAAeiG,EAAcva,UAAU2K,KAAI,SAACzK,GAAD,MAAuB,CAChEkB,MAAOlB,EAAiBJ,WACxBiW,YACElP,EAAa3G,EAAiBJ,YAC9B8G,OACFgP,qBACE/O,EAAa3G,EAAiBJ,YAC9B8G,WAEJyN,kBAAmB,SAACjT,GAClB,IAAMuD,EAAkB9G,KAAKC,MAAMD,KAAKK,UAAUqc,IAClD5V,EAAgBvE,YAAcgB,EAC9BoZ,EAAiB7V,SAIvB,eAAC,GAAD,CAAkB/E,SAAU2a,IAC5B,eAAC,GAAD,CACE3a,SAAU2a,EACV9Y,UAAWA,EACX8X,sBAnL4B,SAAC9b,EAAa2D,GAChD,IAAMuD,EAAkB9G,KAAKC,MAAMD,KAAKK,UAAUqc,IAClD5V,EAAgBT,iBAAiBzG,GAAO2D,EACxCoZ,EAAiB7V,SAoLf,eAAC,GAAD,CACEnC,MAAM,QACN0J,QAAS,WAAO,IAAD,EACbxH,EAAe9E,EAAST,GAAIob,GACnB,OAATE,QAAS,IAATA,GAAA,UAAAA,EAAW5F,eAAX,SAAoBpE,SAAS,CAAEC,IAAK,EAAGC,SAAU,WACjDhD,GAAW,IALf,sBAgBA8N,GAAcrZ,IAAOsK,IAAV,mPAiBX2O,GAAuBjZ,IAAOsK,IAAV,+GAQpB6O,GAAqBnZ,IAAOsK,IAAV,oJAOlB4O,GAAclZ,IAAOsK,IAAV,oHC1XFgP,GAlDgB,WAAO,IAC5Bja,EAAcyE,KAAdzE,UAD2B,EAEGkC,KAA9BhC,EAF2B,EAE3BA,UAAWkD,EAFgB,EAEhBA,eAFgB,EAGa4G,wBAC9CpL,GAJiC,mBAG5Bsb,EAH4B,KAGVC,EAHU,KAO7B9I,EAAe,SAAC3T,GAAD,OAAiByc,EAAoBzc,IACpD0c,EAAiBvK,mBACrB,kBACEqK,EACIha,EAAUmF,MAAK,SAACnH,GAAD,OAAOA,EAAER,KAAOwc,UAC/Btb,IACN,CAACsB,EAAWga,IAGd,OACE,uCACwB,IAArBha,EAAUpC,QACT,eAAC,GAAD,qCAGDoC,EAAUgJ,KAAI,SAAC/K,EAAUZ,GAAX,OACb,eAAC,GAAD,CACEY,SAAUA,EACViT,cAAe7T,EACf8T,aAAc,WACZA,EAAalT,EAAST,KAExB0F,eAAgB,WACdA,EAAejF,EAAST,KAP5B,qBASOH,MAOR2c,GACC,eAAC,GAAD,CACEla,UAAWA,EACX7B,SAAUic,EACVhO,WAAY,kBAAMiF,WCZbgJ,GA5BiB,WAAO,IAAD,EACInY,KAAhCE,EAD4B,EAC5BA,YAAaD,EADe,EACfA,eASrB,OACE,uCACE,eAAC,GAAD,wBACA,gBAAC,EAAD,CAAQpB,MAAM,QAAQ0J,QAASrI,EAA/B,iBACM,eAAC,KAAD,OAEN,eAAC,EAAD,CACErB,MAAM,MACNE,YAzBe,mFA0BfwJ,QAhBuB,WACNsE,OAAOkB,QAC1B,mDAEgB9N,KAShB,SAKE,eAAC,KAAD,CAAUmI,KAAM,OAElB,eAAC,GAAD,QChCAgQ,GAAuB,GAchBC,GAAW,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,OAAQC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,OACjCC,EAAUH,EAAOI,WAAW,MAClC,GAAKD,EAAL,CAEAA,EAAQE,UAAU,EAAG,EAAGF,EAAQH,OAAOM,MAAOH,EAAQH,OAAOO,QAC7DJ,EAAQK,UAAY,EAEpB,IAAMC,EAAaC,GAAc,CAAEH,OAAQJ,EAAQH,OAAOO,OAAQN,SAElEU,GAAiB,CAAER,UAASS,MAAOH,IACnCI,GAAmB,CAAEV,UAASS,MAAOH,IACrCK,GAAc,CACZX,UACAF,OACAC,SACAO,iBAYEE,GAAmB,SAAC,GAUxB,IAVgE,IAAtCR,EAAqC,EAArCA,QAASS,EAA4B,EAA5BA,MAC7BN,EAAQH,EAAQH,OAAOM,MACvBC,EAASJ,EAAQH,OAAOO,OACxBQ,EAAkBR,EAAST,GAEzBkB,EAA6BJ,EAA7BI,WAAYC,EAAiBL,EAAjBK,aAKX3V,EAAI,EAAGA,GAAK0V,EAAY1V,IAAK,CACpC,IAAM4V,EACJX,EAAST,GAAwBiB,EAAkBzV,EAAK0V,EAE1Db,EAAQgB,YACRhB,EAAQiB,YAAc,qBACtBjB,EAAQkB,OAAO,GAAIH,GACnBf,EAAQmB,OAAOxB,GAAsBoB,GACrCf,EAAQoB,SAERpB,EAAQgB,YACRhB,EAAQiB,YAAc,qBACtBjB,EAAQkB,OAAOvB,GAAsBoB,GACrCf,EAAQmB,OAAOhB,EAAQR,GAAsBoB,GAC7Cf,EAAQoB,SAERpB,EAAQqB,KAAO,cACfrB,EAAQsB,UAAY,qBACpBtB,EAAQuB,UAAY,QACpBvB,EAAQwB,SACNC,GAAgBtW,EAAI2V,GACpBX,EAAQR,GACRoB,EAAY,IAKhBf,EAAQiB,YAAc,qBACtBjB,EAAQgB,YACRhB,EAAQkB,OAAOvB,GAAsBA,IACrCK,EAAQmB,OAAOxB,GAAsBS,EAAST,IAC9CK,EAAQoB,UAGJV,GAAqB,SAAC,GAAwC,IAAtCV,EAAqC,EAArCA,QACtBI,GAD2D,EAA5BK,MACtBT,EAAQH,OAAOO,QACxBD,EAAQH,EAAQH,OAAOM,MAE7BH,EAAQiB,YAAc,qBACtBjB,EAAQgB,YACRhB,EAAQkB,OAAOvB,GAAsBS,EAAST,IAC9CK,EAAQmB,OAAOhB,EAAQR,GAAsBS,EAAST,IACtDK,EAAQoB,UAUJT,GAAgB,SAACe,GAQrB,IARsD,IAAD,EAC7C3B,EAAsC2B,EAAtC3B,OAAQC,EAA8B0B,EAA9B1B,QAASF,EAAqB4B,EAArB5B,KAAMQ,EAAeoB,EAAfpB,WACzBqB,EAA+B,IAAhB7B,EAAK3c,OAAL,UAAoB2c,EAAK,GAAGA,EAAK,GAAG3c,OAAS,UAA7C,aAAoB,EAA6Bye,EAAI,GACpEC,EAAgBvB,EAAWQ,aAAeR,EAAWO,WAErDiB,EAAgB9B,EAAQH,OAAOM,MAAQR,GACvCoC,EAAiB/B,EAAQH,OAAOO,OAAST,GAEtCqC,EAAI,EAAGA,EAAIlC,EAAK3c,OAAQ6e,IAAK,CACpChC,EAAQgB,YAIR,IAHA,IAAMiB,EAAW,IAAIC,OACfC,EAASrC,EAAKkC,GACd5b,EAAQ2Z,EAAOiC,GACZ7W,EAAI,EAAGA,EAAIgX,EAAOhf,OAAQgI,IACjC8W,EAASf,OACPvB,GAAwBmC,EAAgBK,EAAOhX,EAAI,GAAGyW,EAAKD,EAC3DhC,GACEoC,GAAkB,EAAII,EAAOhX,EAAI,GAAGiX,EAAIP,IAE5CI,EAASd,OACPxB,GAAwBmC,EAAgBK,EAAOhX,GAAGyW,EAAKD,EACvDhC,GACEoC,GAAkB,EAAII,EAAOhX,GAAGiX,EAAIP,IAG1C7B,EAAQK,UAAY,EACpBL,EAAQiB,YAAc7a,EACtB4Z,EAAQoB,OAAOa,KAcb1B,GAAgB,SAACmB,GAAwC,IACrD5B,EAAiB4B,EAAjB5B,KAAMM,EAAWsB,EAAXtB,OAERiC,EACJC,KAAKC,OAAOnC,EAAST,IAnJK,KAmJ6C,GACnE6C,EAAWC,GAAmB3C,IAAS,GACvCgB,EAAe4B,GAAgBF,EAAUH,GAG/C,MAAO,CAAEvB,eAAcD,WAFJyB,KAAKK,KAAKH,EAAW1B,KAMpC2B,GAAqB,SAAC3C,GAC1B,IAAM8C,EAAqC,GAE3C,OAAoB,IAAhB9C,EAAK3c,OAAqB,IAE9B2c,EAAKnc,SAAQ,SAACwe,GACZS,EAAyB9V,KACvBwV,KAAKO,IAAL,MAAAP,KAAI,YAAQH,EAAO5T,KAAI,SAACuU,GAAD,OAAkBA,EAAMV,WAI5CE,KAAKO,IAAL,MAAAP,KAAYM,KAIfF,GAAkB,SAACF,EAAkBO,GACzC,IAAMC,EAAaC,GAAcT,GAEjC,OAAIA,EAAQ,SAAG,GAAMQ,GAAa,EACzB,KAAP,IAAO,GAAOA,EAAa,GAEtB,KAAP,IAAO,GAAMA,IAyBTvB,GAAkB,SAACzc,GACvB,GAAIA,GAAS,KAAOA,EAAQ,GAAK,CAC/B,IAAMke,EAAcle,EAAMme,WAC1B,MAAM,GAAN,OAAUD,EAAY,GAAtB,YAA4BA,EAAY,GAAxC,YAA8CD,GAAcje,IAG9D,OAAIA,EAAQ,KAAOA,GAAS,GAAWA,EAAMoe,QAAQ,GACjDpe,EAAQ,IAAMA,GAAS,EAAUA,EAAMoe,QAAQ,GAC5Cpe,EAAMoe,QAAQ,IAIjBH,GAAgB,SAACje,GACrB,IAAIoW,EAAQ,EAEZ,GAAIpW,EAAQ,EAAG,CACb,KAAOA,EAAK,SAAG,GAAMoW,IAAS,IAC5BA,IAEF,OAAOA,EAGT,KAAOpW,EAAK,SAAG,GAAMoW,IAAS,IAC5BA,IAEF,OAAc,IAAVA,EAAoBA,GACR,EAATA,GCzLMiI,GAzCF,SAACnd,GAAsB,IAC1B6Z,EAAiB7Z,EAAjB6Z,OAAQD,EAAS5Z,EAAT4Z,KAKVwD,EAAY/K,iBAAiC,MANlB,EAOKlJ,mBAAS+E,OAAOmP,WAAa,KAPlC,mBAO1BC,EAP0B,KAObC,EAPa,OAQOpU,mBAAS+E,OAAOsP,YAAc,IARrC,mBAQ1BC,EAR0B,KAQZC,EARY,KAU3BC,EAAgBhL,uBAAY,WAChC4K,EAAerP,OAAOmP,WAAa,KACnCK,EAAgBxP,OAAOsP,YAAc,KAGrC9D,GAAS,CACPC,OAAQyD,EAAU7K,QAClBqH,OACAC,aAGD,CAACD,IAiBJ,OAfAjZ,qBAAU,WAUR,OARAuN,OAAO8E,iBAAiB,SAAU2K,GAClCjE,GAAS,CACPC,OAAQyD,EAAU7K,QAClBqH,OACAC,WAIK,kBAAM3L,OAAO6E,oBAAoB,SAAU4K,MAGjD,CAACA,EAAe/D,IAEZ,eAACgE,GAAD,CAAQC,IAAKT,EAAWlD,OAAQuD,EAAcxD,MAAOqD,KAKxDM,GAAS9d,IAAO6Z,OAAV,sGCWGmE,GArDY,SAAC9d,GAAoC,IACtD+d,EAA4C/d,EAA5C+d,kBAAmBC,EAAyBhe,EAAzBge,qBACnB7e,EAAcyE,KAAdzE,UAEF8e,EAAY,SAACvQ,GAIjB,OAAoB,IAHDqQ,EAAkBphB,WACnC,SAACmC,GAAD,OAAWA,IAAU4O,MAuBzB,OACE,eAACwQ,GAAD,UACG/e,EAAUkJ,KAAI,SAACvL,EAAUJ,GACxB,IAAMwD,EACJuC,GAAgB3F,EAASoD,OAC3B,OACE,gBAACie,GAAD,CACEvU,QAAS,kBAxBC,SAAC8D,GACnB,IAAM0Q,EAAaL,EAAkBphB,WACnC,SAACmC,GAAD,OAAWA,IAAU4O,KASvBsQ,GAPoB,IAAhBI,EAOiB,GAAD,mBACfL,EAAkB/gB,MAAM,EAAGohB,IADZ,YAEfL,EAAkB/gB,MAAMohB,EAAa,EAAGL,EAAkB9gB,UAPxC,GAAD,mBAAK8gB,GAAL,CAAwBrQ,KAkBvB2Q,CAAY3hB,IAC3BoT,QAASmO,EAAUvhB,GAEnBwD,MAAOA,EAJT,UAME,eAACoe,GAAD,CAAYpe,MAAOA,EAAO4P,QAASmO,EAAUvhB,KAC7C,eAAC6hB,GAAD,UAAiBzhB,EAASwH,SAC1B,eAAC,GAAD,UACGyZ,EAAkBS,SAAS9hB,GAAS,eAAC,KAAD,IAAc,SANhDI,EAASD,UAqBpBqhB,GAAUpe,IAAOsK,IAAV,2FAMP+T,GAAkBre,IAAOC,OAAV,sNACC,SAACC,GAAD,OAClBA,EAAM8P,QAAU9P,EAAME,MAAQ,+BAS5B,SAACF,GAAD,OACAA,EAAM8P,QACF,eACA,kDAIJwO,GAAaxe,IAAOsK,IAAV,2JAIM,SAACpK,GAAD,OAAWA,EAAME,SAEvB,SAACF,GAAD,OACZA,EAAM8P,QAAU,GAAK,6CAGnByO,GAAiBze,IAAO2e,KAAV,wFAMd7O,GAAW9P,IAAOsK,IAAV,oQC/ECsU,GAnBQ,SAAC1e,GAAgC,IAEpD2e,EAIE3e,EAJF2e,eACAC,EAGE5e,EAHF4e,qBACAb,EAEE/d,EAFF+d,kBACAC,EACEhe,EADFge,qBAGF,OACE,gBAACa,GAAD,CAAuBC,QAASH,EAAhC,UACE,eAAC,GAAD,CAAa/U,QAASgV,EAAtB,SACE,eAAC,KAAD,CAAKnV,KAAM,OAEb,4CACA,eAAC,GAAD,CAA0BsU,oBAAmBC,6BAW7Ca,GAAwB/e,IAAOsK,IAAV,4RAQZ,SAACpK,GAAD,OACXA,EAAM8e,QAAU,kBAAoB,uBAGxB,SAAC9e,GAAD,OACZA,EAAM8e,QAAU,yCAA2C,WAGzDnT,GAAc7L,IAAOsK,IAAV,6UCzBF2U,GAlBI,WAAO,IAChBtf,EAAsBmF,KAAtBnF,kBAcR,MAAO,CAAEuf,aATY,SAACxW,GACpB,cAAO/I,QAAP,IAAOA,OAAP,EAAOA,EAAmB4I,KAAI,SAACuR,GAC7B,MAAO,CACL8B,EAAG9B,EAAK3T,EACRiW,EAAGtC,EAAKpR,UCyCDyW,GA5Ce,WAAO,IAC3BD,EAAiBD,KAAjBC,aACA7f,EAAcyE,KAAdzE,UAF0B,EAGgBgK,mBAAmB,CAAC,IAHpC,mBAG3B4U,EAH2B,KAGRC,EAHQ,OAIU7U,oBAAkB,GAJ5B,mBAI3BwV,EAJ2B,KAIXO,EAJW,KAM5BN,EAAuB,kBAAMM,GAAmBP,IANpB,EAUX3P,mBAAQ,WAC7B,IAAM4K,EAAkB,GAClBC,EAAmB,GAWzB,OATAkE,EAAkBtgB,SAAQ,SAACiQ,GACzB,IAAMyR,EAAmBhgB,EAAUuO,GAC7B0R,EAAwBJ,EAAa,IAAD,OAAKG,EAAiB7a,OAAtB,MAC1CsV,EAAKhT,KAAKwY,GACVvF,EAAOjT,KACLnE,GAAgB0c,EAAiBjf,WAI9B,CAAC0Z,EAAMC,KAEb,CAACkE,IAzB8B,mBAU3BnE,EAV2B,KAUrBC,EAVqB,KA2BlC,OACE,uCACE,eAAC,GAAD,sBACA,eAACwF,GAAD,CAAezV,QAASgV,EAAxB,qBACA,eAAC,GAAD,CAEID,iBACAC,uBACAb,oBACAC,yBAGJ,eAAC,GAAD,CAAMpE,KAAMA,EAAMC,OAAQA,QAO1BwF,GAAgBvf,IAAOC,OAAV,gRCjBJuf,GAnCA,WAAO,IACZ7f,EAAsBmF,KAAtBnF,kBAER,OACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAO8f,KAAK,IAAIC,OAAK,EAACrK,UAAWhG,KACjC,eAAC,IAAD,CAAOoQ,KAAK,aAAapK,UAAWhG,KACpC,eAAC,IAAD,CAAOoQ,KAAK,aAAapK,UAAWqE,KACpC,eAAC,IAAD,CAAO+F,KAAK,YAAYpK,UAAWnF,KAGnC,eAAC,IAAD,CAAOuP,KAAK,mBAAZ,SACE,eAAC,IAAD,CACEE,GAAI,CACFC,SAAU,SAMhB,eAAC,IAAD,CAAOH,KAAK,WAAWpK,UAAW8J,GAAlC,UACoB,OAAjBxf,QAAiB,IAAjBA,OAAA,EAAAA,EAAmBxC,QAClB,eAAC,GAAD,IAEA,eAAC,IAAD,CACEwiB,GAAI,CACFC,SAAU,aCbTC,GAbH,WACV,OACE,eAAC,IAAD,CAAU3gB,MAAOA,EAAjB,SACE,gBAAC,IAAD,WACE,eAAC,EAAD,IACA,eAAC,GAAD,UACE,eAAC,GAAD,YCHK4gB,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,GAAD,MAEF/N,SAASC,eAAe,SAM1BmN,O","file":"static/js/main.45e5504b.chunk.js","sourcesContent":["/**\n * Equation tokenization\n * https://blog.shalvah.me/posts/how-to-build-a-math-expression-tokenizer-using-javascript-or-any-other-language\n * https://blog.shalvah.me/posts/parsing-math-expressions-with-javascript\n */\n\nexport enum TokenTypes {\n  Parameter = 0,\n  Variable,\n  Operator,\n  LeftParenthesis,\n  RightParenthesis,\n}\n\nexport const tokenizeEquation = (equation: string): Token[] => {\n  const tokensArray: Token[] = []\n\n  // Remove spaces, they don't matter\n  equation.replace(/\\s+/g, \"\")\n\n  // Convert to array of characters\n  const charsArray = equation.split(\"\")\n\n  // Define buffers\n  let parameterBuffer: string[] = []\n  let variableBuffer: string[] = []\n\n  /**\n   * Buffer handling\n   */\n  const emptyParameterBuffer = () => {\n    // Push new parameter to the tokens array\n    const newParam = parameterBuffer.join(\"\")\n    tokensArray.push(new Token(TokenTypes.Parameter, newParam))\n\n    // Empty parameter buffer\n    parameterBuffer = []\n  }\n\n  const emptyVariableBuffer = () => {\n    // Push new variable to the tokens array\n    const newVar = variableBuffer.join(\"\")\n    tokensArray.push(new Token(TokenTypes.Variable, newVar))\n\n    // Empty variable buffer\n    variableBuffer = []\n  }\n\n  /**\n   * Array traversal\n   * This is the core of the tokenization function\n   *  */\n  charsArray.forEach((char, index) => {\n    /**\n     * Parameters are always contained in <>, so if the parameterBuffer\n     * isn't empty, you simply keep pushing to it.\n     *  */\n    if (parameterBuffer.length !== 0) {\n      if (isParameterEnd(char)) {\n        parameterBuffer.push(char)\n        emptyParameterBuffer()\n      } else {\n        parameterBuffer.push(char)\n      }\n    }\n    //\n    /**\n     * Variables are always contained in {}. Treatment is exactly the same\n     * as with parameters.\n     */\n    else if (variableBuffer.length !== 0) {\n      if (isVariableEnd(char)) {\n        variableBuffer.push(char)\n        emptyVariableBuffer()\n      } else {\n        variableBuffer.push(char)\n      }\n    }\n    //\n    /**\n     * Check if variable start or parameter start\n     */\n    else if (isVariableStart(char)) {\n      variableBuffer.push(char)\n    } else if (isParameterStart(char)) {\n      parameterBuffer.push(char)\n    }\n    //\n    /**\n     * Only operators and parenthesis remain, so:\n     */\n    else if (isOperator(char)) {\n      tokensArray.push(new Token(TokenTypes.Operator, char))\n    } else if (isLeftParenthesis(char)) {\n      tokensArray.push(new Token(TokenTypes.LeftParenthesis, char))\n    } else if (isRightParenthesis(char)) {\n      tokensArray.push(new Token(TokenTypes.RightParenthesis, char))\n    }\n  })\n\n  return tokensArray\n}\n\nexport const joinTokens = (tokens: Token[]) => {\n  return tokens.map(({ value }) => value).join(\"\")\n}\n\n/**\n * Token class\n */\nconst assoc = {\n  \"^\": \"right\",\n  \"*\": \"left\",\n  \"/\": \"left\",\n  \"+\": \"left\",\n  \"-\": \"left\",\n}\n\nconst prec = {\n  \"^\": 4,\n  \"*\": 3,\n  \"/\": 3,\n  \"+\": 2,\n  \"-\": 2,\n}\n\nexport class Token {\n  type: number\n  value: string | number\n\n  constructor(type: number, value: string | number) {\n    this.type = type\n    this.value = value\n  }\n\n  get precedence() {\n    return prec[this.value as keyof typeof prec] || 1\n  }\n\n  get associativity() {\n    return assoc[this.value as keyof typeof assoc] || \"left\"\n  }\n}\n\n/**\n * Recognition functions\n *  */\n\n// const isDigit = (char: string): boolean => {\n//   return /\\d/.test(char)\n// }\n// const isLetter = (char: string): boolean => {\n//   return /[a-z]/i.test(char)\n// }\nconst isOperator = (char: string): boolean => {\n  return /\\+|-|\\*|\\/|\\^/.test(char)\n}\nconst isLeftParenthesis = (char: string): boolean => {\n  return char === \"(\"\n}\nconst isRightParenthesis = (char: string): boolean => {\n  return char === \")\"\n}\nconst isParameterStart = (char: string): boolean => {\n  return char === \"<\"\n}\nconst isParameterEnd = (char: string): boolean => {\n  return char === \">\"\n}\nconst isVariableStart = (char: string): boolean => {\n  return char === \"{\"\n}\nconst isVariableEnd = (char: string): boolean => {\n  return char === \"}\"\n}\n","export const loadFromKey = (key: string) => {\n  try {\n    const serializedSlice = localStorage.getItem(key)\n    if (serializedSlice === null) {\n      return undefined\n    }\n    return JSON.parse(serializedSlice)\n  } catch (err) {\n    return undefined\n  }\n}\n\nexport const saveToKey = <T extends unknown>(state: T, key: string) => {\n  try {\n    const serializedSlice = JSON.stringify(state)\n    localStorage.setItem(key, serializedSlice)\n  } catch (error) {\n    console.error(error)\n  }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { loadFromKey } from \"../helpers/localStorage\"\nimport type { Compound } from \"../types/Compound\"\n\ntype CompoundsState = Compound[]\nexport const STORAGE_KEY = \"batch-simulator:compounds\"\nconst initialState: CompoundsState = loadFromKey(STORAGE_KEY) || []\n\ntype AddPayload = Compound\ntype UpdatePayload = { id: string; compound: Compound }\ntype RemovePayload = { id: string }\n\nexport const compoundsSlice = createSlice({\n  name: \"compounds\",\n  initialState,\n  reducers: {\n    add: (state, action: PayloadAction<AddPayload>) => {\n      return [...state, action.payload]\n    },\n\n    update: (state, action: PayloadAction<UpdatePayload>) => {\n      const index = state.findIndex((c) => c.id === action.payload.id)\n      if (index === -1) return state\n      state[index] = action.payload.compound\n    },\n\n    remove: (state, action: PayloadAction<RemovePayload>) => {\n      const index = state.findIndex((c) => c.id === action.payload.id)\n      if (index === -1) return state\n      return [...state.slice(0, index), ...state.slice(index + 1, state.length)]\n    },\n\n    reset: () => {\n      return []\n    },\n  },\n})\n\nexport const { add, update, remove, reset } = compoundsSlice.actions\n\nexport default compoundsSlice.reducer\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { loadFromKey } from \"../helpers/localStorage\"\nimport type { Reaction } from \"../types/Reaction\"\nimport type { ReactionCompound } from \"../types/Reaction\"\n\ntype ReactionsState = Reaction[]\nexport const STORAGE_KEY = \"batch-simulator:reactions\"\nconst initialState: ReactionsState = loadFromKey(STORAGE_KEY) || []\n\ntype AddPayload = Reaction\ntype UpdatePayload = { id: string; reaction: Reaction }\ntype RemovePayload = { id: string }\ntype RemoveCompoundPayload = { id: string }\n\nexport const reactionsSlice = createSlice({\n  name: \"reactions\",\n  initialState,\n  reducers: {\n    reset: (state) => {\n      return []\n    },\n\n    add: (state, action: PayloadAction<AddPayload>) => {\n      return [...state, action.payload]\n    },\n\n    update: (state, action: PayloadAction<UpdatePayload>) => {\n      const index = state.findIndex((r) => r.id === action.payload.id)\n      if (index === -1) return state\n      state[index] = action.payload.reaction\n    },\n\n    remove: (state, action: PayloadAction<RemovePayload>) => {\n      const index = state.findIndex((r) => r.id === action.payload.id)\n      if (index === -1) return state\n      return [...state.slice(0, index), ...state.slice(index + 1, state.length)]\n    },\n\n    removeCompound: (state, action: PayloadAction<RemoveCompoundPayload>) => {\n      /**\n       * Remove from reactions that have this compound\n       */\n      const compoundId = action.payload.id\n      state.forEach((reaction: Reaction) => {\n        reaction.reactants = reaction.reactants.filter(\n          (reactionCompound: ReactionCompound) =>\n            reactionCompound.compoundId !== compoundId\n        )\n\n        reaction.products = reaction.products.filter(\n          (reactionCompound: ReactionCompound) =>\n            reactionCompound.compoundId !== compoundId\n        )\n\n        if (reaction.keyCompound === compoundId) {\n          reaction.keyCompound = undefined\n        }\n      })\n\n      return state\n    },\n  },\n})\n\nexport const { reset, add, update, remove, removeCompound } =\n  reactionsSlice.actions\n\nexport default reactionsSlice.reducer\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { loadFromKey } from \"../helpers/localStorage\"\nimport type { Settings } from \"../types/Settings\"\n\ntype SettingsState = Settings\nexport const STORAGE_KEY = \"batch-simulator:settings\"\nconst initialState: SettingsState = loadFromKey(STORAGE_KEY) || {\n  // Reaction times\n  reactionTime: 30,\n  deadTime: 30,\n  timeStep: 0.1,\n\n  // Units\n  timeUnits: \"s\",\n  volumeUnits: \"L\",\n  molarUnits: \"mol\",\n  massUnits: \"kg\",\n  temperatureUnits: \"K\",\n\n  // Heat Exchange\n  isothermal: true,\n  initialTemperature: 25,\n}\n\ntype SaveFieldAction = PayloadAction<{ field: string; value: string | number }>\ntype SaveAction = PayloadAction<Settings>\n\nexport const settingsSlice = createSlice({\n  name: \"settings\",\n  initialState,\n  reducers: {\n    save: (state, action: SaveAction) => {\n      return action.payload\n    },\n\n    saveField: (state, action: SaveFieldAction) => {\n      return {\n        ...state,\n        [action.payload.field]: action.payload.value,\n      }\n    },\n  },\n})\n\nexport const { save, saveField } = settingsSlice.actions\n\nexport default settingsSlice.reducer\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport type { SimulationResults } from \"../types/SimulationResults\"\n\ntype SimulationResultsState = SimulationResults\nconst initialState: SimulationResultsState = []\n\ntype SaveAction = PayloadAction<SimulationResultsState>\n\nexport const simulationResultsSlice = createSlice({\n  name: \"simulationResults\",\n  initialState,\n  reducers: {\n    save: (state, action: SaveAction) => {\n      return action.payload\n    },\n  },\n})\n\nexport const { save } = simulationResultsSlice.actions\n\nexport default simulationResultsSlice.reducer\n","import { configureStore } from \"@reduxjs/toolkit\"\nimport compoundsReducer from \"./features/compoundsSlice\"\nimport reactionsReducer from \"./features/reactionsSlice\"\nimport settingsReducer from \"./features/settingsSlice\"\nimport simulationResultsReducer from \"./features/simulationResultsSlice\"\n\nconst store = configureStore({\n  reducer: {\n    compounds: compoundsReducer,\n    reactions: reactionsReducer,\n    settings: settingsReducer,\n    simulationResults: simulationResultsReducer,\n  },\n})\n\nexport default store\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n","import { createGlobalStyle } from \"styled-components\"\n\nconst GlobalStyles = createGlobalStyle`\n  :root {\n    --color-primary-darkest: hsl(213,48%,15%);\n    --color-primary-darker: hsl(213,48%,30%);\n    --color-primary-dark: hsl(213,48%,50%);\n    --color-primary-normal: hsl(213,48%,70%);\n    --color-primary-light: hsl(213,48%,85%);\n    --color-primary-lighter: hsl(213,48%,95%);\n\n    --color-triadic-green-darker: hsl(93,40%,30%);\n    --color-triadic-green-dark: hsl(93,40%,45%);\n    --color-triadic-green-normal: hsl(93,40%,70%);\n    --color-triadic-green-light: hsl(93,40%,85%);\n    --color-triadic-green-lighter: hsl(93,40%,95%);\n\n    --color-triadic-red-darker: hsl(333,48%,30%);\n    --color-triadic-red-dark: hsl(333,48%,45%);\n    --color-triadic-red-normal: hsl(333,48%,70%);\n    --color-triadic-red-light: hsl(333,48%,85%);\n    --color-triadic-red-lighter: hsl(333,48%,95%);\n\n    --color-grey-darker: hsl(213, 20%, 15%);\n    --color-grey-dark: hsl(213, 20%, 30%);\n    --color-grey-normal: hsl(213, 20%, 45%);\n    --color-grey-light: hsl(213, 20%, 70%);\n    --color-grey-lighter: hsl(213, 20%, 85%);\n    --color-grey-lightest: hsl(213, 20%, 95%);\n  }\n  \n  body {\n    margin: 0;\n    background-color: var(--color-grey-lighter);\n    font-family: 'Mulish', sans-serif;\n\n    @media (max-width: 800px) {\n      margin-top: 0;\n    }\n  }\n\n  a, button {\n    cursor: pointer;\n  }\n\n  a, button, input {\n    transition: all 0.15s ease-in-out;\n  }\n\n  input {\n    background-color: rgba(0, 0, 0, 0.1);\n    border: none;\n    border-radius: 5px;\n    flex-grow: 1;\n    font-family: 'Mulish', sans-serif;\n    min-width: 0;\n    width: 0;\n    outline: none;\n    padding: 0.5rem 1rem;\n\n    &:hover,\n    &:focus {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n\n    &:autofill {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n\n    &:focus {\n      box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.4);\n    }\n  }\n\n  /**\n   * Remove arrows from number inputs\n   */\n  \n  /* Chrome, Safari, Edge, Opera */\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  /* Firefox */\n  input[type=number] {\n    -moz-appearance: textfield;\n  }\n\n  @keyframes slide-in {\n    from {\n      opacity: 0;\n      transform: translateY(-20px);\n    }\n\n    to {\n      opacity: 1;\n      transform: translateY(0px);\n    }\n  }\n\n  @keyframes slide-out {\n    from {\n      opacity: 1;\n      transform: translateY(0px);\n    }\n    \n    to {\n      opacity: 0;\n      transform: translateY(-20px);\n    }\n  }\n`\n\nexport default GlobalStyles\n","import styled from \"styled-components\"\n\ninterface IButton {\n  color?: string\n  buttonStyle?: string\n}\n\nconst Button = styled.button<IButton>`\n  align-items: center;\n  border-radius: 5px;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  font-size: 1.1rem;\n  justify-content: space-between;\n  padding: 5px 10px;\n  text-decoration: none;\n\n  ${(props) => colorsBase(props.color)}\n\n  &:hover {\n    ${(props) => colorsHover(props.color)}\n  }\n\n  /* Any additional custom styles */\n  ${(props) => props.buttonStyle ?? \"\"}\n`\n\nexport default Button\n\nconst colorsBase = (color?: string) => {\n  switch (color) {\n    case \"red\":\n      return `\n        background-color: var(--color-triadic-red-dark);\n        color: var(--color-grey-lightest);\n      `\n    case \"green\":\n      return `\n        background-color: var(--color-triadic-green-dark);\n        color: var(--color-grey-lightest);\n      `\n    case \"grey\":\n      return `\n        background-color: var(--color-grey-dark);\n        color: var(--color-grey-lightest);\n      `\n    default:\n      return `\n        background-color: var(--color-primary-dark);\n        color: var(--color-grey-lightest);\n      `\n  }\n}\n\nconst colorsHover = (color?: string) => {\n  switch (color) {\n    case \"red\":\n      return `\n        background-color: var(--color-triadic-red-darker);\n      `\n    case \"green\":\n      return `\n        background-color: var(--color-triadic-green-darker);\n      `\n    case \"grey\":\n      return `\n        background-color: var(--color-grey-darker);\n      `\n    default:\n      return `\n        background-color: var(--color-primary-darker);\n      `\n  }\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\"\nimport type { RootState, AppDispatch } from \"../store\"\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { useEffect } from \"react\"\nimport { useAppDispatch, useAppSelector } from \"./useStore\"\nimport { save, saveField } from \"../features/settingsSlice\"\nimport { saveToKey } from \"../helpers/localStorage\"\n\n/* Types */\nimport type { Settings } from \"../types/Settings\"\n\n/* Constants */\nimport { STORAGE_KEY } from \"../features/settingsSlice\"\n\nconst useSettings = () => {\n  const dispatch = useAppDispatch()\n  const settings = useAppSelector((state) => state.settings)\n\n  useEffect(() => {\n    /* Save to localStorage upon changes to state */\n    saveToKey(settings, STORAGE_KEY)\n  }, [settings])\n\n  return {\n    settings,\n\n    saveSettings: (newSettings: Settings): void => {\n      dispatch(save(newSettings))\n    },\n\n    saveField: (field: string, value: string | number): void => {\n      dispatch(saveField({ field, value }))\n    },\n  }\n}\n\nexport default useSettings\n","import { Token } from \"../helpers/tokenization\"\n\nexport interface Reaction {\n  id: string\n\n  name?: string\n\n  reactants: ReactionCompound[]\n  products: ReactionCompound[]\n\n  /**\n   * Kinetic model may have a function later, but for now,\n   * it can only be selected from one of a handful\n   *\n   * Kinetic constants are saved as a mapping, where the keys\n   * are not known in advance\n   */\n  kineticModel: number\n  kineticConstants: KineticConstants\n  kineticEquation: KineticEquation // A tokenized version of the kinetic model\n  keyCompound?: string // It's a compound (reactant) id\n}\n\n/**\n * To mark whether if a compound is a reactant or a product,\n * the following enum is used\n *  */\nexport enum CompoundType {\n  Reactant = 0,\n  Product,\n}\n\nexport interface ReactionCompound {\n  compoundId: string\n  stoichiometricCoefficient: number\n}\n\nexport interface KineticConstants {\n  [key: string]: number\n  \"k_\\\\inf\": number\n  E_A: number\n}\n\nexport type KineticEquation = Token[]\n\nexport enum KineticModel {\n  simple = 0,\n  hyperbolic,\n  autocatalytic,\n}\n","import randomstring from \"randomstring\"\nimport { useEffect } from \"react\"\nimport { useAppDispatch, useAppSelector } from \"./useStore\"\nimport {\n  add,\n  reset,\n  update,\n  remove,\n  removeCompound,\n} from \"../features/reactionsSlice\"\nimport { saveToKey } from \"../helpers/localStorage\"\n\n/* Constants */\nimport { STORAGE_KEY } from \"../features/reactionsSlice\"\n\n/* Helpers */\nimport { Token, TokenTypes } from \"../helpers/tokenization\"\n\n/* Types */\nimport type { Reaction } from \"../types/Reaction\"\n\nconst useReactions = () => {\n  const dispatch = useAppDispatch()\n  const reactions = useAppSelector((state) => state.reactions)\n\n  useEffect(() => {\n    /* Save to localStorage upon changes to state */\n    saveToKey(reactions, STORAGE_KEY)\n  }, [reactions])\n\n  return {\n    reactions,\n\n    resetReactions: (): void => {\n      dispatch(reset())\n    },\n\n    addReaction: (): void => {\n      const newReaction = {\n        id: randomstring.generate(8),\n        name: \"\",\n        reactants: [],\n        products: [],\n        kineticModel: 0,\n        kineticConstants: {\n          \"k_\\\\inf\": 1000000, // Pre exponential term for Arrhenius\n          E_A: 30000, // Arrhenius activation energy\n        },\n        kineticEquation: [\n          new Token(TokenTypes.Parameter, \"<k_\\\\inf>\"),\n          new Token(TokenTypes.Operator, \"*\"),\n          new Token(TokenTypes.Parameter, \"e\"),\n          new Token(TokenTypes.Operator, \"^\"),\n          new Token(TokenTypes.LeftParenthesis, \"(\"),\n          new Token(TokenTypes.LeftParenthesis, \"(\"),\n          new Token(TokenTypes.Operator, \"-\"),\n          new Token(TokenTypes.Parameter, \"<E_A>\"),\n          new Token(TokenTypes.RightParenthesis, \")\"),\n          new Token(TokenTypes.Operator, \"/\"),\n          new Token(TokenTypes.LeftParenthesis, \"(\"),\n          new Token(TokenTypes.Parameter, \"<R>\"),\n          new Token(TokenTypes.Operator, \"*\"),\n          new Token(TokenTypes.Variable, \"{T}\"),\n          new Token(TokenTypes.RightParenthesis, \")\"),\n          new Token(TokenTypes.RightParenthesis, \")\"),\n        ],\n      }\n      dispatch(add(newReaction))\n    },\n\n    updateReaction: (id: string, updatedReaction: Reaction): void => {\n      dispatch(update({ id, reaction: updatedReaction }))\n    },\n\n    removeCompoundFromReactions: (compoundId: string): void => {\n      dispatch(removeCompound({ id: compoundId }))\n    },\n\n    removeReaction: (id: string): void => {\n      dispatch(remove({ id }))\n    },\n  }\n}\n\nexport default useReactions\n","export const COMPOUND_COLORS_CODES = [\n  \"blue1\",\n  \"pink3\",\n  \"yellow\",\n  \"skyBlue2\",\n  \"red2\",\n  \"green1\",\n  \"skyBlue1\",\n  \"orange\",\n  \"violet1\",\n  \"pink1\",\n  \"lime\",\n  \"waterGreen2\",\n  \"red1\",\n  \"blue2\",\n  \"green2\",\n  \"pink2\",\n  \"waterGreen1\",\n  \"violet2\",\n]\n\nexport const COMPOUND_COLORS = {\n  orange: \"hsl(30, 80%, 65%)\",\n  yellow: \"hsl(50, 80%, 65%)\",\n  lime: \"hsl(70, 80%, 65%)\",\n  green1: \"hsl(90, 80%, 65%)\",\n  green2: \"hsl(110, 80%, 65%)\",\n  waterGreen1: \"hsl(130, 80%, 65%)\",\n  waterGreen2: \"hsl(150, 80%, 65%)\",\n  skyBlue1: \"hsl(170, 80%, 65%)\",\n  skyBlue2: \"hsl(190, 80%, 65%)\",\n  blue1: \"hsl(210, 80%, 65%)\",\n  blue2: \"hsl(230, 80%, 65%)\",\n  violet1: \"hsl(250, 80%, 65%)\",\n  violet2: \"hsl(270, 80%, 65%)\",\n  pink1: \"hsl(290, 80%, 65%)\",\n  pink2: \"hsl(310, 80%, 65%)\",\n  pink3: \"hsl(330, 80%, 65%)\",\n  red1: \"hsl(350, 80%, 65%)\",\n  red2: \"hsl(10, 80%, 65%)\",\n}\n","import randomstring from \"randomstring\"\nimport { useEffect } from \"react\"\nimport { useAppDispatch, useAppSelector } from \"./useStore\"\nimport { add, update, remove, reset } from \"../features/compoundsSlice\"\nimport useReactions from \"./useReactions\"\nimport { saveToKey } from \"../helpers/localStorage\"\n\n/* Constants */\nimport { COMPOUND_COLORS_CODES } from \"../constants/compoundColors\"\nimport { STORAGE_KEY } from \"../features/compoundsSlice\"\n\n/* Types */\nimport { Compound } from \"../types/Compound\"\n\ninterface UsedColors {\n  [key: string]: boolean\n}\n\nconst useCompounds = () => {\n  const dispatch = useAppDispatch()\n  const compounds = useAppSelector((state) => state.compounds)\n  const { resetReactions, removeCompoundFromReactions } = useReactions()\n\n  useEffect(() => {\n    /* Save to localStorage upon changes to state */\n    saveToKey(compounds, STORAGE_KEY)\n  }, [compounds])\n\n  const unusedColor = () => {\n    const colorKeys = COMPOUND_COLORS_CODES\n\n    // Initialize object to keep track of used colors\n    let usedColors: UsedColors = {}\n    colorKeys.forEach((key: string) => (usedColors[key] = false))\n\n    // Find currently used colors\n    compounds.forEach((compound) => (usedColors[compound.color] = true))\n\n    // Find the first unused color\n    let k = 0,\n      foundColor\n    while (k < colorKeys.length && !foundColor) {\n      if (!usedColors[colorKeys[k]]) foundColor = colorKeys[k]\n      k++\n    }\n\n    return foundColor || \"blue1\"\n  }\n\n  return {\n    compounds,\n\n    addCompound: (): void => {\n      const newCompound = {\n        id: randomstring.generate(8),\n        color: unusedColor(),\n        concentration: 0,\n        molecularWeight: 0,\n        symbol: \"A\",\n        name: \"\",\n      }\n      dispatch(add(newCompound))\n    },\n\n    findCompound: (id?: string): Compound | undefined => {\n      return compounds.find((c) => c.id === id)\n    },\n\n    updateCompound: (id: string, updatedCompound: Compound): void => {\n      dispatch(update({ id, compound: updatedCompound }))\n    },\n\n    removeCompound: (id: string): void => {\n      removeCompoundFromReactions(id)\n      dispatch(remove({ id }))\n    },\n\n    removeAllCompounds: (): void => {\n      resetReactions()\n      dispatch(reset())\n    },\n  }\n}\n\nexport default useCompounds\n","import { useAppDispatch, useAppSelector } from \"./useStore\"\nimport { save } from \"../features/simulationResultsSlice\"\n\n/* Types */\nimport type { SimulationResults } from \"../types/SimulationResults\"\n\nconst useSimulationResults = () => {\n  const dispatch = useAppDispatch()\n  const simulationResults = useAppSelector((state) => state.simulationResults)\n\n  return {\n    simulationResults,\n\n    saveSimulationResults: (newSimulationResults: SimulationResults): void => {\n      dispatch(save(newSimulationResults))\n    },\n  }\n}\n\nexport default useSimulationResults\n","import { Token, TokenTypes } from \"./tokenization\"\n\nexport const parseEquation = (tokenizedEquation: Token[]): Token[] => {\n  /**\n   * Note: this assumes that the tokenized expression is valid!!\n   * Returns an RPN-ordered version of the tokenized expression\n   * (Reverse Polish Notation, or Infix Notation)\n   *\n   * Based on: https://blog.shalvah.me/posts/parsing-math-expressions-with-javascript\n   */\n\n  const tokens = replaceSigns(tokenizedEquation)\n\n  const outputQueue: Token[] = []\n  const operationStack: Token[] = []\n\n  const peek = <T extends unknown>(array: Array<T>): T => {\n    return array.slice(-1)[0]\n  }\n\n  tokens.forEach((token: Token) => {\n    // Push parameters and variables to output queue\n    if (\n      token.type === TokenTypes.Parameter ||\n      token.type === TokenTypes.Variable\n    ) {\n      outputQueue.push(token)\n    }\n\n    // Functions are not contemplated in this app (for now) ---------------\n\n    // If token is an operator, things get a little more complicated:\n    else if (token.type === TokenTypes.Operator) {\n      while (\n        peek(operationStack) &&\n        peek(operationStack).type === TokenTypes.Operator &&\n        ((token.associativity === \"left\" &&\n          token.precedence <= peek(operationStack).precedence) ||\n          (token.associativity === \"right\" &&\n            token.precedence < peek(operationStack).precedence))\n      ) {\n        outputQueue.push(operationStack.pop() as Token)\n      }\n      // At the end of iteration push o1 onto the operator stack\n      operationStack.push(token)\n    }\n\n    // If the token is a left parenthesis (i.e. \"(\"), then push it onto the stack.\n    else if (token.type === TokenTypes.LeftParenthesis) {\n      operationStack.push(token)\n    }\n\n    // If the token is a right parenthesis (i.e. \")\"):\n    else if (token.type === TokenTypes.RightParenthesis) {\n      // Until the token at the top of the stack is a left parenthesis,\n      // pop operators off the stack onto the output queue.\n      while (\n        peek(operationStack) &&\n        peek(operationStack).type !== TokenTypes.LeftParenthesis\n      ) {\n        outputQueue.push(operationStack.pop() as Token)\n      }\n\n      // Pop the left parenthesis from the stack, but not onto the output queue.\n      // (We 'consume' the parenthesis)\n      operationStack.pop()\n    }\n  })\n\n  return outputQueue.concat(operationStack.reverse())\n}\n\nexport const rpnToString = (rpn: Token[]) => {\n  return rpn.map((token) => token.value).join(\" \")\n}\n\n//\n\nconst replaceSigns = (tokenizedEquation: Token[]): Token[] => {\n  // A special case needs to be accounted for:\n  // If the previous element on the serialized equation is a LeftParenthesis, and the current\n  // element is a (+) or a (-), it's a *SIGN* rather than an operation.\n  //\n  // For this reason, we want to update that token, switching it by a number (parameter)\n  // of value 1 or -1, and add a '*' operation.  let i = 0, parenthesisFound: boolean\n\n  let i = 0,\n    parenthesisFound = false\n\n  while (i < tokenizedEquation.length) {\n    if (tokenizedEquation[i].type === TokenTypes.LeftParenthesis) {\n      parenthesisFound = true\n    }\n    //\n    else if (\n      parenthesisFound &&\n      (tokenizedEquation[i].value === \"+\" || tokenizedEquation[i].value === \"-\")\n    ) {\n      // Set sign to a parameter of value 1 or -1\n      tokenizedEquation[i].type = TokenTypes.Parameter\n      if (tokenizedEquation[i].value === \"+\") tokenizedEquation[i].value = 1\n      else tokenizedEquation[i].value = -1\n\n      // Add an operation (multiplication) right after\n      tokenizedEquation = [\n        ...tokenizedEquation.slice(0, i + 1),\n        new Token(TokenTypes.Operator, \"*\"),\n        ...tokenizedEquation.slice(i + 1, tokenizedEquation.length),\n      ]\n\n      parenthesisFound = false\n    }\n    //\n    else {\n      parenthesisFound = false\n    }\n\n    i++\n  }\n\n  return tokenizedEquation\n}\n","import { Reaction, ReactionCompound } from '../types/Reaction'\n\nexport const reactionHasCompound = (reaction: Reaction, compoundId: string) => {\n  if (reaction.reactants.findIndex((c) => c.compoundId === compoundId)) return true\n  if (reaction.products.findIndex((c) => c.compoundId === compoundId)) return true\n  return false\n}\n\nexport const getCoefficientForComponent = (reaction: Reaction, compoundId: string) => {\n  const baseStoichiometricCoefficient = getStoichiomericCoefficientForKeyCompound(reaction)\n  let coefficient: number = 0\n\n  reaction.reactants.forEach((c) => {\n    if (c.compoundId === compoundId) {\n      coefficient = - baseStoichiometricCoefficient / c.stoichiometricCoefficient\n    }\n  })\n  if (coefficient !== 0) return coefficient\n\n  reaction.products.forEach((c) => {\n    if (c.compoundId === compoundId) {\n      coefficient = baseStoichiometricCoefficient / c.stoichiometricCoefficient\n    }\n  })\n  return coefficient\n}\n\nconst getStoichiomericCoefficientForKeyCompound = (reaction: Reaction) => {\n  const keyCompound = reaction.reactants.find((c) => c.compoundId === reaction.keyCompound as string) as ReactionCompound\n  return keyCompound.stoichiometricCoefficient\n}\n","import useSettings from \"../hooks/useSettings\"\nimport useCompounds from \"../hooks/useCompounds\"\nimport useReactions from \"../hooks/useReactions\"\nimport useSimulationResults from \"../hooks/useSimulationResults\"\n\n/* Helpers */\nimport { parseEquation } from \"../helpers/tokenParser\"\nimport { getCoefficientForComponent } from \"../helpers/reactions\"\n\n/* Types */\nimport { Settings } from \"../types/Settings\"\nimport { Compound } from \"../types/Compound\"\nimport { Reaction, ReactionCompound, KineticEquation } from \"../types/Reaction\"\nimport {\n  ParsedReaction,\n  CompoundWithCoefficient,\n} from \"../types/ParsedReaction\"\nimport { TimePoint, SimulationResults } from \"../types/SimulationResults\"\nimport { Token, TokenTypes } from \"../helpers/tokenization\"\n\nconst CONSTANTS = {\n  e: 2.7182818,\n  // TODO: Make it so it's converted in accordance with selected units\n  R: 0.082, // L.atm/J.K\n  T: 290, // K\n}\n\nconst useSimulate = () => {\n  const { compounds } = useCompounds()\n  const { reactions } = useReactions()\n  const { settings } = useSettings()\n  const { saveSimulationResults } = useSimulationResults()\n\n  //: SimulationResults => {\n  const simulate = () => {\n    /**\n     * Reaction equations (as tokens) are reordered to RPN notation\n     * and some more magic happens. Check the method\n     *  */\n    const parsedReactions: ParsedReaction[] = parseReactionEquations(\n      reactions,\n      compounds\n    )\n\n    // Initialize simulation results\n    const initialValues: TimePoint = { t: 0, T: settings.initialTemperature }\n    compounds.forEach((c) => (initialValues[`[${c.symbol}]`] = c.concentration))\n\n    // Start simulation execution\n    const results = executeSimulation(initialValues, parsedReactions, settings)\n\n    saveSimulationResults(results)\n  }\n\n  return { simulate }\n}\n\nexport default useSimulate\n\n/**\n * Helper functions\n */\n\nconst parseReactionEquations = (\n  reactions: Reaction[],\n  compounds: Compound[]\n): ParsedReaction[] => {\n  /**\n   * Parsing a reaction entails:\n   *  1) Replacing parameters for their entered values\n   *  2) Modifying the token order to RPN\n   *  3) Merging reactants and products to compounds, which have a symbol\n   *    and a coefficient\n   *\n   *  The reactions are stored in a new object of type ParsedReaction\n   */\n  const parsedReactions: ParsedReaction[] = []\n\n  reactions.forEach((reaction, index) => {\n    const parsedReaction: ParsedReaction = {}\n\n    // 1) Replace parameters for values & strip variables of {} symbols\n    parsedReaction.kineticEquation = parseParametersAndVariables(reaction)\n\n    // 2) Modify token order to RPN\n    parsedReaction.kineticEquation = parseEquation(\n      parsedReaction.kineticEquation\n    )\n\n    // 3) Merge reactants and products\n    parsedReaction.compounds = mergeCompounds(reaction, compounds)\n\n    parsedReactions.push(parsedReaction)\n  })\n\n  return parsedReactions\n}\n\nconst parseParametersAndVariables = (reaction: Reaction): KineticEquation => {\n  const kineticEquationCopy = JSON.parse(\n    JSON.stringify(reaction.kineticEquation)\n  )\n\n  kineticEquationCopy.forEach((token: Token, index: number) => {\n    if (token.type === TokenTypes.Parameter) {\n      // Replace parameter by numeric value\n      const key = (token.value as string).replace(/<|>/g, \"\")\n      // Param. may be reaction-related, or be a thermodynamic constant\n      if (reaction.kineticConstants[key])\n        token.value = reaction.kineticConstants[key]\n      else token.value = CONSTANTS[key as keyof typeof CONSTANTS]\n    } else if (token.type === TokenTypes.Variable) {\n      // Strip variable of {} symbols\n      token.value = (token.value as string).replace(/{|}/g, \"\")\n    }\n\n    kineticEquationCopy[index] = new Token(token.type, token.value)\n  })\n\n  return kineticEquationCopy\n}\n\nconst mergeCompounds = (\n  reaction: Reaction,\n  compounds: Compound[]\n): CompoundWithCoefficient[] => {\n  const parsedCompounds: CompoundWithCoefficient[] = []\n\n  reaction.reactants.forEach((reactionCompound: ReactionCompound) => {\n    const compound: CompoundWithCoefficient = Object.assign(\n      {},\n      {\n        compoundId: reactionCompound.compoundId,\n        symbol: `[${\n          compounds.find((c) => c.id === reactionCompound.compoundId)?.symbol\n        }]`,\n        coefficient: getCoefficientForComponent(\n          reaction,\n          reactionCompound.compoundId\n        ),\n      }\n    )\n    parsedCompounds.push(compound)\n  })\n\n  reaction.products.forEach((reactionCompound: ReactionCompound) => {\n    const compound: CompoundWithCoefficient = Object.assign(\n      {},\n      {\n        compoundId: reactionCompound.compoundId,\n        symbol: `[${\n          compounds.find((c) => c.id === reactionCompound.compoundId)?.symbol\n        }]`,\n        coefficient: getCoefficientForComponent(\n          reaction,\n          reactionCompound.compoundId\n        ),\n      }\n    )\n    parsedCompounds.push(compound)\n  })\n\n  return parsedCompounds\n}\n\n/****************************************************************\n *    SIMULATE METHOD                                           *\n *    ---                                                       *\n ****************************************************************/\n\nconst executeSimulation = (\n  resultsInitialValues: TimePoint,\n  parsedReactions: ParsedReaction[],\n  settings: Settings\n) => {\n  const results: SimulationResults = [resultsInitialValues]\n\n  // Define an iterator for time evolution\n  const createSimulationIterator = (endTime = 10, timeStep = 0.1) => {\n    const rangeIterator = {\n      next: function () {\n        let result\n        const currentTime = results[results.length - 1].t\n\n        if (currentTime < endTime) {\n          result = { done: false }\n          explicitEulerStep(parsedReactions, timeStep, results)\n          return result\n        }\n        return { done: true }\n      },\n    }\n\n    return rangeIterator\n  }\n\n  const iterator = createSimulationIterator(\n    settings.reactionTime,\n    settings.timeStep\n  )\n\n  let result = iterator.next()\n  while (!result.done) {\n    result = iterator.next()\n  }\n\n  return results\n}\n\n/**\n * Mutates the results object, pushing the new calculations as TimePoints\n */\nconst explicitEulerStep = (\n  parsedReactions: ParsedReaction[],\n  timeStep: number,\n  results: SimulationResults\n): void => {\n  const oldTimePoint: TimePoint = JSON.parse(\n    JSON.stringify(results[results.length - 1])\n  )\n  // TODO: Conditionally run T equation if not an isothermic system\n  const newTimePoint: TimePoint = { t: 0, T: oldTimePoint.T }\n\n  // Reaction rates can be calculated for each reaction once,\n  // and reused when calculating compound net reaction rates\n  const reactionRates: number[] = parsedReactions.map((parsedReaction) => {\n    return calculateReactionRate(parsedReaction, oldTimePoint)\n  })\n\n  Object.entries(oldTimePoint).forEach(([variable, value]) => {\n    // variable corresponds to \"t\" or a compound symbol in brackets i.e. \"[A]\"\n    //\n    // variable \"t\" has to be treated differently than the others\n    if (variable === \"t\") {\n      newTimePoint.t = value + timeStep\n      return\n    }\n\n    // For other variables, calculate functional value (net rate of change) associated\n    // with the ODE.\n    // It's a summatory of kinetic velocities\n    //\n    // In other words: d[VAR]/dt = rateOfChange\n    const rateOfChange = calculateNetRateOfChange(\n      parsedReactions,\n      reactionRates,\n      variable\n    )\n\n    // In explicit euler, this reaction rate is used with the time step to calculate the next\n    // functional value. This should be generalized (TODO:)\n    //\n    // Also, values should be zero or higher!\n    newTimePoint[variable] = nonNegative(\n      oldTimePoint[variable] + rateOfChange * timeStep\n    )\n  })\n\n  // Finally, push new TimePoint\n  results.push(newTimePoint)\n}\n\nconst calculateNetRateOfChange = (\n  parsedReactions: ParsedReaction[],\n  reactionRates: number[],\n  variable: string\n) => {\n  let reactionRate = 0\n\n  parsedReactions.forEach((reaction: ParsedReaction, index: number) => {\n    const compound = reaction.compounds?.find(\n      (c) => c.symbol === variable\n    ) as CompoundWithCoefficient\n    // If a compound is found, it means the reaction is involved in the\n    // material balance of the species\n    if (compound) {\n      reactionRate += reactionRates[index] * compound.coefficient\n    }\n  })\n\n  return reactionRate\n}\n\nconst calculateReactionRate = (\n  reaction: ParsedReaction,\n  oldTimePoint: TimePoint\n) => {\n  /**\n   * WARNING: By this point, it is assumed that the provided RPN equation is valid.\n   * This has to be ensured with validation prior to execution, or it can lead to failures.\n   */\n\n  let resultStack: number[] = []\n\n  reaction.kineticEquation?.forEach((token: Token) => {\n    // Tokens are already ordered in RPN at this point, so\n    // what we need to do is push values into the stack,\n    // and then perform binary operations\n    if (token.type === TokenTypes.Parameter)\n      resultStack.push(token.value as number)\n    else if (token.type === TokenTypes.Variable) {\n      resultStack.push(oldTimePoint[token.value])\n    } else {\n      // Can only be a binary operator. Parenthesis have been removed in RPN.\n      // Because it is a binary operator, it will always involve the last two\n      // elements added to the stack, so we first have to pop them\n      const b = resultStack.pop() as number\n      const a = resultStack.pop() as number\n\n      switch (token.value) {\n        case \"+\":\n          resultStack.push(a + b)\n          break\n        case \"-\":\n          resultStack.push(a - b)\n          break\n        case \"*\":\n          resultStack.push(a * b)\n          break\n        case \"/\":\n          resultStack.push(a / b)\n          break\n        case \"^\":\n          resultStack.push(a ** b)\n          break\n      }\n    }\n  })\n\n  // After execution, we should be left with only one element in the stack, which\n  // is the computation result\n  return resultStack[0]\n}\n\nconst nonNegative = (value: number) => {\n  if (value < 0) return 0\n  return value\n}\n","import styled from \"styled-components\"\nimport { useHistory } from \"react-router-dom\"\n\n/* Components */\nimport Button from \"./Button\"\nimport { FiMenu, FiSliders, FiPlay } from \"react-icons/fi\"\nimport { BiAtom, BiLineChart } from \"react-icons/bi\"\nimport { AiOutlineExperiment } from \"react-icons/ai\"\n\n/* Hooks */\nimport useSimulate from \"../hooks/useSimulate\"\nimport useSimulationResults from \"../hooks/useSimulationResults\"\nimport { useState } from \"react\"\n\ninterface ISidebarLinkProps {\n  onClick: () => void\n  title: string\n  icon: JSX.Element\n}\n\nconst Sidebar: React.FC = () => {\n  const { simulate } = useSimulate()\n  const { simulationResults } = useSimulationResults()\n  const history = useHistory()\n  const [expanded, setExpanded] = useState<boolean>(false)\n\n  const onSimulate = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.preventDefault()\n    simulate()\n    history.push(\"/results\")\n  }\n\n  const expandMenu = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.preventDefault()\n    setExpanded(!expanded)\n  }\n\n  const navigateTo = (route: string) => {\n    history.push(route)\n    setExpanded(false)\n  }\n\n  const iconProps = {\n    size: 25,\n  }\n\n  return (\n    <SidebarWrapper expanded={expanded}>\n      <nav>\n        <a href=\"/\" onClick={expandMenu}>\n          <SidebarLinkWrapper>\n            <IconWrapper>\n              <FiMenu {...iconProps} />\n            </IconWrapper>\n          </SidebarLinkWrapper>\n        </a>\n        <SidebarLink\n          onClick={() => navigateTo(\"/compounds\")}\n          title=\"Compounds\"\n          icon={<BiAtom {...iconProps} />}\n        />\n        <SidebarLink\n          onClick={() => navigateTo(\"/reactions\")}\n          title=\"Reactions\"\n          icon={<AiOutlineExperiment {...iconProps} />}\n        />\n        <SidebarLink\n          onClick={() => navigateTo(\"/settings\")}\n          title=\"Settings\"\n          icon={<FiSliders {...iconProps} />}\n        />\n        {simulationResults && (\n          <SidebarLink\n            onClick={() => navigateTo(\"/results\")}\n            title=\"Results\"\n            icon={<BiLineChart {...iconProps} />}\n          />\n        )}\n        <a href=\"/\" onClick={onSimulate}>\n          <SidebarLinkWrapper>\n            <IconWrapper>\n              <FiPlay {...iconProps} />\n            </IconWrapper>\n            <p>Simulate</p>\n          </SidebarLinkWrapper>\n        </a>\n      </nav>\n    </SidebarWrapper>\n  )\n}\n\nexport default Sidebar\n\nconst SidebarLink: React.FC<ISidebarLinkProps> = (props) => {\n  const { icon, onClick, title } = props\n  return (\n    <Button onClick={onClick}>\n      <SidebarLinkWrapper>\n        <IconWrapper>{icon}</IconWrapper>\n        <p>{title}</p>\n        {/* <FiChevronRight /> */}\n      </SidebarLinkWrapper>\n    </Button>\n  )\n}\n\nconst SidebarLinkWrapper = styled.div`\n  padding: 0.7rem 0.5rem;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n`\n\nconst IconWrapper = styled.div`\n  width: 25px;\n  height: 25px;\n  margin-right: 0.5rem;\n`\n\ninterface SidebarWrapperProps {\n  expanded: boolean\n}\n\nconst SidebarWrapper = styled.div<SidebarWrapperProps>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 20;\n  height: 100vh;\n  max-width: ${(props) => (props.expanded ? \"270px\" : \"90px\")};\n  flex-grow: 0;\n  flex-shrink: 0;\n  transition: all 0.15s linear;\n  background-color: var(--color-grey-normal);\n\n  nav {\n    margin: 1rem;\n    display: flex;\n    flex-direction: column;\n\n    a,\n    button {\n      align-items: center;\n      background-color: var(--color-grey-normal);\n      border: none;\n      border-radius: 5px;\n      color: var(--color-grey-lightest);\n      display: flex;\n      font-size: 1.2rem;\n      justify-content: space-between;\n      margin-bottom: 10px;\n      padding: 5px 10px;\n      text-decoration: none;\n\n      &:hover {\n        background-color: rgba(255, 255, 255, 0.3);\n      }\n\n      p {\n        margin: 0;\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport styled from \"styled-components\"\n\n/* Components */\nimport Sidebar from \"../components/Sidebar\"\ninterface IProps {\n  children: JSX.Element | JSX.Element[]\n}\n\nconst MainLayout: React.FC<IProps> = (props) => {\n  const { children } = props\n\n  return (\n    <MainLayoutWrapper>\n      <Sidebar />\n      <MainContentWrapper id=\"scroll-target\">\n        <MainContent>{children}</MainContent>\n      </MainContentWrapper>\n    </MainLayoutWrapper>\n  )\n}\n\nexport default MainLayout\n\nconst MainLayoutWrapper = styled.div`\n  height: 100vh;\n`\n\nconst MainContentWrapper = styled.div`\n  background: var(--color-grey-light);\n  flex-grow: 1;\n  height: 100vh;\n  margin-left: 90px;\n  position: relative;\n  overflow-y: scroll;\n`\nconst MainContent = styled.div`\n  margin: 20px;\n`\n","import styled from \"styled-components\"\n\nconst PageTitle = styled.h2`\n  color: var(--color-grey-lightest);\n  font-size: 20px;\n  margin-top: 0;\n  display: inline-block;\n`\n\nexport default PageTitle\n","import styled from \"styled-components\"\n\nconst CardButton = styled.button`\n  align-items: center;\n  align-self: stretch;\n  background-color: unset;\n  border: none;\n  border-radius: 5px;\n  color: var(--color-grey-normal);\n  cursor: pointer;\n  display: flex;\n  font-size: 1.5em;\n  margin-left: 0.2rem;\n  padding: 0.5rem;\n  transition: all 0.15s ease-in-out;\n  z-index: 2;\n\n  &:hover {\n    background-color: rgba(255, 255, 255, 0.3);\n    color: var(--color-grey-dark);\n  }\n`\n\nexport default CardButton\n","import styled from \"styled-components\"\n\n/* Components */\nimport CardButton from \"../CardButton\"\nimport { FiEdit, FiTrash2 } from \"react-icons/fi\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Types */\nimport { Compound } from \"../../types/Compound\"\n\ninterface ICompoundCardProps {\n  compound: Compound\n  editCompound: () => void\n  updateCompound: (compound: Compound) => void\n  validateUnicity: (field: string, value: any) => boolean\n  removeCompound: () => void\n}\n\nconst CompoundCard: React.FC<ICompoundCardProps> = (props) => {\n  const { compound, editCompound, removeCompound } = props\n\n  return (\n    <CompoundCardWrapper>\n      <CompoundCardInner>\n        {/* Tile to display symbol */}\n        <CompoundTile color={compound.color as keyof typeof COMPOUND_COLORS}>\n          {compound.symbol}\n        </CompoundTile>\n\n        {/* Button to toggle modal edition */}\n        <CardButton onClick={editCompound}>\n          <FiEdit />\n        </CardButton>\n\n        {/* Button to delete the compound */}\n        <CardButton onClick={removeCompound}>\n          <FiTrash2 />\n        </CardButton>\n      </CompoundCardInner>\n    </CompoundCardWrapper>\n  )\n}\n\nexport default CompoundCard\n\n/**\n * Styled components\n */\n\nconst CompoundCardWrapper = styled.li``\n\nconst CompoundCardInner = styled.div`\n  margin: 5px;\n  padding: 20px;\n  position: relative;\n\n  align-items: center;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: var(--color-grey-lighter);\n  border-radius: 5px;\n  border: 1.5px solid var(--color-grey-lightest);\n  display: flex;\n  color: var(--color-grey-lightest);\n  cursor: pointer;\n  overflow: hidden;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.15);\n    transform: translateY(-2px);\n  }\n\n  button {\n    padding: 0.8rem;\n  }\n`\n\ninterface ICompoundColorBulletProps {\n  color: keyof typeof COMPOUND_COLORS\n}\n\nconst CompoundTile = styled.div<ICompoundColorBulletProps>`\n  background-color: ${(props) => COMPOUND_COLORS[props.color]};\n  border-radius: 5px;\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  color: var(--color-grey-dark);\n  font-size: 1.6rem;\n  padding: 0.5rem 0.9rem;\n  margin-right: 1rem;\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport { FiX } from \"react-icons/fi\"\n\n/* Hooks */\nimport { useEffect } from \"react\"\n\n/* Types */\nimport { FCWithChildren } from \"../types/FCWithChildren\"\n\nexport interface IClosing {\n  closing?: boolean\n}\n\ntype IEditModalProps = IClosing &\n  FCWithChildren & {\n    setClosing: (closing: boolean) => void\n    handleClose: () => void\n  }\n\nconst EditModal: React.FC<IEditModalProps> = (props) => {\n  const { children, closing, setClosing, handleClose } = props\n\n  const closeModal = () => {\n    /**\n     * Animate and close modal after slide animation\n     */\n    setClosing(true)\n    setTimeout(() => {\n      handleClose()\n    }, 250)\n  }\n\n  useEffect(() => {\n    if (closing) {\n      closeModal()\n    }\n    // eslint-disable-next-line\n  }, [closing])\n\n  return (\n    <EditModalWrapper closing={closing}>\n      <EditModalInner closing={closing}>\n        <CloseButton onClick={closeModal} closing={closing}>\n          <FiX />\n        </CloseButton>\n        {children}\n      </EditModalInner>\n    </EditModalWrapper>\n  )\n}\n\nexport default EditModal\n\nconst EditModalWrapper = styled.div<IClosing>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  min-height: 100%;\n  background-color: var(--color-grey-light);\n\n  animation-name: dim-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  border-radius: 5px;\n  display: flex;\n\n  /* Override animation upon modal close */\n  ${(props) =>\n    props.closing\n      ? `\n    animation-name: dim-out;\n    animation-timing-function: ease-in-out;\n    animation-duration: 0.25s;\n    animation-iteration-count: 1;\n    animation-fill-mode: forwards;\n  `\n      : \"\"}\n\n  @keyframes dim-in {\n    from {\n      background-color: rgba(0, 0, 0, 0);\n    }\n\n    to {\n      background-color: rgba(0, 0, 0, 0.2);\n    }\n  }\n\n  @keyframes dim-out {\n    from {\n      background-color: rgba(0, 0, 0, 0.2);\n    }\n\n    to {\n      background-color: rgba(0, 0, 0, 0);\n    }\n  }\n`\n\nconst EditModalInner = styled.div<IClosing>`\n  align-self: stretch;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: var(--color-grey-lighter);\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  border-radius: 5px;\n  flex-grow: 1;\n  margin: 10px;\n  padding: 2rem;\n  padding-top: 3.5rem;\n  position: relative;\n  z-index: 3;\n\n  /* Override animation upon modal close */\n  ${(props) =>\n    props.closing\n      ? `\n    animation-name: slide-out;\n    animation-timing-function: ease-in-out;\n    animation-duration: 0.25s;\n    animation-iteration-count: 1;\n    animation-fill-mode: forwards;\n  `\n      : \"\"}\n\n  label {\n    color: var(--color-grey-dark);\n  }\n\n  input {\n    background-color: rgba(0, 0, 0, 0.1);\n    border-radius: 5px;\n    flex-grow: 1;\n    min-width: 0;\n    padding: 0.5rem 1rem;\n\n    &:hover,\n    &:focus {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n\n    &:autofill {\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n\n    &:focus {\n      box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.4);\n    }\n  }\n`\n\nconst CloseButton = styled.button<IClosing>`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n\n  align-items: center;\n  background-color: unset;\n  border: none;\n  border-radius: 5px;\n  display: flex;\n  ${(props) => (props.closing ? \"disabled: true;\" : \"\")}\n  font-size: 1.3rem;\n  padding: 0.5rem;\n  margin-bottom: 1rem;\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`\n","import styled from \"styled-components\"\n\ninterface ErrorProps {\n  big?: boolean\n}\n\nconst Error: React.FC<ErrorProps> = (props) => {\n  const { big, children } = props\n  return (\n    <ErrorWrapper big={big} className=\"error\">\n      {children}\n    </ErrorWrapper>\n  )\n}\n\nconst ErrorWrapper = styled.div<ErrorProps>`\n  position: absolute;\n  ${(props) =>\n    props.big\n      ? `\n    bottom: 0.9rem;\n    right: 1rem;\n  `\n      : `\n    bottom: 0.4rem;\n    right: 0.5rem;\n  `}\n\n  background-color: var(--color-triadic-red-darker);\n  border-radius: 5px;\n  box-shadow: 0px 0px 4px var(--color-triadic-red-darker);\n  color: white;\n  padding: 0.2rem 0.5rem;\n  pointer-events: none;\n  opacity: 0;\n  transform: translateY(105%);\n  z-index: 4;\n`\n\nexport default Error\n","import styled from \"styled-components\"\n\ninterface IInputProps extends React.HTMLProps<HTMLInputElement> {\n  errors?: boolean\n}\n\nconst Input = styled.input<IInputProps>`\n  ${(props) =>\n    props.errors\n      ? `\n    box-shadow: 0px 0px 4px 1px var(--color-triadic-red-darker),\n      inset 0px 0px 0px 1px var(--color-triadic-red-darker) !important;\n  `\n      : \"\"}\n`\n\nexport default Input\n","import styled from \"styled-components\"\nimport { FiInfo } from \"react-icons/fi\"\ninterface InfoTooltipProps {\n  text: string | JSX.Element\n}\n\nconst InfoTooltip = (props: InfoTooltipProps) => {\n  const { text } = props\n\n  return (\n    <Icon>\n      <FiInfo color=\"hsl(213, 20%, 95%)\" size={14} />\n      <InfoWrapper>\n        <Info>{text}</Info>\n      </InfoWrapper>\n    </Icon>\n  )\n}\n\nexport default InfoTooltip\n\nconst Icon = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background-color: var(--color-grey-normal);\n  margin-left: 0.5rem;\n  color: var(--color-white);\n  cursor: pointer;\n  position: relative;\n  &:hover > div > div {\n    opacity: 1;\n  }\n`\n\nconst Info = styled.div`\n  position: relative;\n  opacity: 0;\n  transition: opacity 0.15s linear;\n  padding: 1rem;\n  background-color: var(--color-grey-normal);\n  border-radius: 5px;\n  margin-left: 1rem;\n  width: max-content;\n  max-width: 180px;\n  font-size: 1rem;\n  color: var(--color-grey-lightest);\n  overflow: visible;\n  filter: drop-shadow(0 1px 2px var(--color-grey-normal));\n  display: flex;\n\n  &:before {\n    position: absolute;\n    left: -8px;\n    top: 50%;\n    transform: translateY(-50%);\n    content: \"\";\n    width: 0;\n    height: 0;\n    border-top: 8px solid transparent;\n    border-bottom: 8px solid transparent;\n    border-right: 8px solid var(--color-grey-normal);\n  }\n`\n\nconst InfoWrapper = styled.div`\n  position: absolute;\n  display: flex;\n  right: 0;\n  transform: translateX(102%);\n  pointer-events: none;\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport Error from \"./Error\"\nimport Input from \"./Input\"\nimport InfoTooltip from \"./InfoTooltip\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\ninterface IFieldInputProps {\n  big?: boolean\n  color?: string\n  error?: string\n  fieldName: string\n  label: string\n  type?: string\n  tooltip?: string\n  row?: boolean\n  value: any\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst FieldInput: React.FC<IFieldInputProps> = (props) => {\n  const {\n    big,\n    color,\n    error,\n    fieldName,\n    label,\n    row,\n    type,\n    tooltip,\n    value,\n    onBlur,\n    onChange,\n  } = props\n\n  const voidFunction = () => {}\n\n  return (\n    <FieldInputWrapper color={color} big={big} row={row}>\n      <LabelWrapper>\n        <label htmlFor={fieldName}>{label}</label>\n        {tooltip && <InfoTooltip text={tooltip} />}\n      </LabelWrapper>\n      <Input\n        errors={!!error}\n        name={fieldName}\n        type={type || \"text\"}\n        autoComplete=\"off\"\n        onBlur={onBlur || voidFunction}\n        onChange={onChange}\n        value={value}\n      />\n      {error && <Error big={big}>{error}</Error>}\n    </FieldInputWrapper>\n  )\n}\n\ninterface IFieldInputWrapperProps {\n  color?: string\n  big?: boolean\n  row?: boolean\n}\n\nconst FieldInputWrapper = styled.div<IFieldInputWrapperProps>`\n  display: flex;\n  flex-direction: ${(props) => (props.row ? \"row\" : \"column\")};\n  align-items: flex-start;\n  align-self: ${(props) => (props.row ? \"unset\" : \"flex-start\")};\n  padding: 0.5rem;\n  position: relative;\n\n  ${(props) =>\n    props.color\n      ? `\n    background-color: ${\n      COMPOUND_COLORS[props.color as keyof typeof COMPOUND_COLORS]\n    };\n    border-radius: 5px;\n    box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  `\n      : \"\"}\n  ${(props) =>\n    props.big\n      ? `\n    align-items: flex-start;\n    margin-bottom: 1.5rem;\n    padding: 1rem;\n  `\n      : \"\"}\n\n  label {\n    ${(props) => (props.big ? \"font-size: 1.5rem;\" : \"\")}\n    font-weight: 600;\n    color: var(--color-grey-dark);\n  }\n\n  input {\n    ${(props) =>\n      props.big\n        ? `    \n    font-size: 3rem;\n    margin-left: 1rem;\n    width: 0;\n    `\n        : \"font-size: 1rem;\"}\n    width: 300px;\n    align-self: stretch;\n  }\n\n  &:hover > .error {\n    opacity: 1 !important;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 0.5rem;\n`\n\nexport default FieldInput\n","import styled from \"styled-components\"\nimport Button from \"./Button\"\n\nconst SubmitButton = styled(Button)`\n  align-self: stretch;\n  font-size: 1.2rem;\n  justify-content: center;\n  margin-top: 1.5rem;\n  margin-left: 2.5%;\n  padding: 0.5rem;\n  width: 95%;\n`\nexport default SubmitButton\n","/**\n * Validates if field is equal to a provided value.\n * */\nexport const validateEqual = (a: unknown, b: unknown) => {\n  if (a === b) return true\n  return false\n}\n\n/**\n * Validates if field is not empty, which equates to\n * not being undefined, null,\n * In the case it is a string, check that it is not empty.\n * In the case of a number, 0 is valid.\n * */\nexport const validateNotEmpty = (value: unknown) => {\n  if (value === \"\") return false\n  if (typeof value === \"number\") return true\n  if (!value) return false\n  return true\n}\n\n/**\n * Validates if field is greater than, only if the value is numeric.\n * Otherwise, returns false.\n * */\nexport const validateGreaterThan = (\n  value: unknown,\n  threshold: number,\n  equal: boolean\n) => {\n  if (typeof value !== \"number\") return false\n  if (value > threshold) return true\n  if (value === threshold && equal) return true\n  return false\n}\n","import styled from \"styled-components\"\nimport { useFormik } from \"formik\"\n\n/* Components */\nimport EditModal from \"../EditModal\"\nimport FieldInput from \"../forms/FieldInput\"\nimport SubmitButton from \"../SubmitButton\"\n\n/* Helpers */\nimport { validateNotEmpty, validateGreaterThan } from \"../../helpers/validators\"\n\n/* Hooks */\nimport { useState } from \"react\"\nimport useCompounds from \"../../hooks/useCompounds\"\nimport useSettings from \"../../hooks/useSettings\"\n\n/* Types */\nimport { Compound } from \"../../types/Compound\"\n\ninterface ICompoundEditModalProps {\n  compound: Compound\n  closeModal: () => void\n}\n\nconst CompoundEditModal: React.FC<ICompoundEditModalProps> = (props) => {\n  const { compound, closeModal } = props\n  const { compounds, updateCompound } = useCompounds()\n  const { settings } = useSettings()\n  const [closing, setClosing] = useState<boolean>(false)\n  const compoundIndex = compounds.findIndex((comp) => comp.id === compound.id)\n\n  /**\n   * Validate method for Formik\n   */\n  interface IErrors {\n    symbol?: string\n    concentration?: string\n    name?: string\n    molecularWeight?: string\n  }\n\n  const validate = (values: Compound): IErrors => {\n    const errors: IErrors = {}\n\n    /* Symbol validation */\n    if (!validateNotEmpty(values.symbol))\n      errors.symbol = \"Symbol cannot be empty\"\n    else if (!validateUnicity(\"symbol\", values.symbol))\n      errors.symbol = \"Symbol is already used\"\n\n    /* Concentration validation */\n    if (!validateNotEmpty(values.concentration))\n      errors.concentration = \"Concentration cannot be empty\"\n    else if (!validateGreaterThan(values.concentration, 0, true))\n      errors.concentration = \"Concentration cannot be lower than 0\"\n\n    /* Molecular weight validation */\n    if (!validateNotEmpty(values.molecularWeight))\n      errors.molecularWeight = \"Molecular weight cannot be empty\"\n    else if (!validateGreaterThan(values.molecularWeight, 0, true))\n      errors.molecularWeight = \"Molecular weight cannot be lower than 0\"\n\n    return errors\n  }\n\n  const validateUnicity = (field: string, value: any): boolean => {\n    for (var i = 0; i < compounds.length; i++) {\n      // @ts-ignore\n      if (i !== compoundIndex && compounds[i][field] === value) {\n        return false\n      }\n    }\n    return true\n  }\n\n  /**\n   * Formik form initialization\n   */\n  const formik = useFormik({\n    // @ts-ignore\n    initialValues: {\n      symbol: compound.symbol,\n      concentration: compound.concentration,\n      name: compound.name,\n      molecularWeight: compound.molecularWeight,\n    },\n    validate,\n    onSubmit: (values) => {\n      const updatedCompound = { ...compound, ...values }\n      updateCompound(compound.id, updatedCompound)\n      window.scrollTo({ top: 0, behavior: \"smooth\" })\n      setClosing(true)\n    },\n  })\n\n  return (\n    <EditModal\n      closing={closing}\n      setClosing={setClosing}\n      handleClose={closeModal}\n    >\n      <Form onSubmit={formik.handleSubmit}>\n        <FieldInput\n          fieldName=\"symbol\"\n          label=\"Symbol:\"\n          error={formik.errors.symbol}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            formik.handleChange(event)\n          }}\n          value={formik.values.symbol}\n          color={compound.color}\n          row\n          big\n        />\n\n        <FieldInput\n          fieldName=\"concentration\"\n          label={`Initial concentration [${settings.molarUnits}/${settings.volumeUnits}]:`}\n          error={formik.errors.concentration}\n          tooltip=\"Concentration in the loaded mixture\"\n          type=\"number\"\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            formik.handleChange(event)\n          }}\n          value={formik.values.concentration}\n        />\n\n        <FieldInput\n          fieldName=\"molecularWeight\"\n          label={`Molecular weight [${settings.massUnits}/${settings.molarUnits}]:`}\n          error={formik.errors.molecularWeight}\n          type=\"number\"\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            formik.handleChange(event)\n          }}\n          value={formik.values.molecularWeight}\n        />\n\n        <FieldInput\n          fieldName=\"name\"\n          label=\"Compound name (optional):\"\n          error={formik.errors.name}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            formik.handleChange(event)\n          }}\n          value={formik.values.name}\n        />\n\n        <SubmitButton color=\"green\" type=\"submit\">\n          Done\n        </SubmitButton>\n      </Form>\n    </EditModal>\n  )\n}\n\nexport default CompoundEditModal\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n`\n","import styled from \"styled-components\"\n\nconst NoResource = styled.p`\n  padding: 1rem;\n  color: var(--color-grey-dark);\n  font-style: italic;\n`\n\nexport default NoResource\n","import styled from \"styled-components\"\n\n/* Components */\nimport CompoundCard from \"./CompoundCard\"\nimport CompoundEditModal from \"./CompoundEditModal\"\nimport NoResource from \"../NoResource\"\n\n/* Hooks */\nimport useCompounds from \"../../hooks/useCompounds\"\nimport { useState, useMemo } from \"react\"\n\n/* Types */\nimport { Compound } from \"../../types/Compound\"\n\nconst CompoundList: React.FC = (props) => {\n  const { compounds, updateCompound, removeCompound } = useCompounds()\n  const [editedCompoundId, setEditedCompoundId] = useState<string | undefined>(\n    undefined\n  )\n\n  const editCompound = (id?: string) => setEditedCompoundId(id)\n  const editedCompound = useMemo(\n    () =>\n      editedCompoundId\n        ? compounds.find((c) => c.id === editedCompoundId)\n        : undefined,\n    [compounds, editedCompoundId]\n  )\n\n  return (\n    <CompoundListWrapper>\n      {compounds.length === 0 && (\n        <NoResource>No compounds added yet</NoResource>\n      )}\n\n      {compounds.map((compound, index) => (\n        <CompoundCard\n          key={index}\n          compound={compound}\n          editCompound={(): void => {\n            editCompound(compound.id)\n          }}\n          updateCompound={(compound: Compound): void => {\n            updateCompound(compound.id, compound)\n          }}\n          removeCompound={(): void => {\n            removeCompound(compound.id)\n          }}\n          validateUnicity={(field: string, value: any): boolean => {\n            for (var i = 0; i < compounds.length; i++) {\n              // @ts-ignore\n              if (i !== index && compounds[i][field] === value) {\n                return false\n              }\n            }\n            return true\n          }}\n        />\n      ))}\n\n      {/* Edit modal */}\n      {editedCompoundId && (\n        <CompoundEditModal\n          compound={editedCompound as Compound}\n          closeModal={() => editCompound()}\n        />\n      )}\n    </CompoundListWrapper>\n  )\n}\n\nexport default CompoundList\n\n/**\n * Styled components\n */\n\nconst CompoundListWrapper = styled.ul`\n  align-self: stretch;\n  display: flex;\n  flex-wrap: wrap;\n  list-style-type: none;\n  padding-left: 0;\n`\n","/* Components */\nimport Button from \"../components/Button\"\nimport PageTitle from \"../components/PageTitle\"\nimport CompoundList from \"../components/compounds/CompoundList\"\nimport { FiPlus, FiTrash2 } from \"react-icons/fi\"\n\n/* Hooks */\nimport useCompounds from \"../hooks/useCompounds\"\n\nconst deleteButtonStyle = `\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  padding: 0.6rem 1rem;\n`\n\nconst CompoundsPage: React.FC = () => {\n  const { addCompound, removeAllCompounds } = useCompounds()\n\n  const handleResetCompounds = () => {\n    const confirmation = window.confirm(\n      \"Are you sure you want to delete all compounds? This will also delete all reactions\"\n    )\n    if (confirmation) removeAllCompounds()\n  }\n\n  return (\n    <>\n      <PageTitle>Compounds</PageTitle>\n      <Button color=\"green\" onClick={addCompound}>\n        Add <FiPlus />\n      </Button>\n      <Button\n        color=\"red\"\n        buttonStyle={deleteButtonStyle}\n        onClick={handleResetCompounds}\n      >\n        <FiTrash2 size={20} />\n      </Button>\n      <CompoundList />\n    </>\n  )\n}\n\nexport default CompoundsPage\n","import styled from \"styled-components\"\n\nconst InputSection = ({\n  children,\n}: {\n  children: JSX.Element | JSX.Element[]\n}) => {\n  return (\n    <InputSectionWrapper>\n      <InputSectionInner>{children}</InputSectionInner>\n    </InputSectionWrapper>\n  )\n}\n\nexport default InputSection\n\nconst InputSectionWrapper = styled.div`\n  display: flex;\n  flex-basis: 50%;\n\n  @media only screen and (max-width: 940px) {\n    flex-basis: 100%;\n  }\n`\n\nconst InputSectionInner = styled.div`\n  flex-grow: 1;\n  background-color: var(--color-grey-lighter);\n  border-radius: 5px;\n  flex-direction: column;\n  padding: 1rem;\n  margin: 1rem;\n  margin-bottom: 0;\n\n  h2 {\n    color: var(--color-grey-normal);\n    font-size: 1.2rem;\n    margin-top: 0;\n  }\n\n  input {\n    width: auto;\n  }\n`\n","import InputSection from \"./InputSection\"\nimport FieldInput from \"../forms/FieldInput\"\n\n/* Types */\nimport type { Settings } from \"../../types/Settings\"\nimport type { FormikProps } from \"formik\"\n\ninterface OperatingTimesProps {\n  formik: FormikProps<Settings>\n  onBlur: (event: React.ChangeEvent<HTMLInputElement>) => void\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst OperatingTimesSection: React.VFC<OperatingTimesProps> = (props) => {\n  const { formik, onBlur, onChange } = props\n\n  return (\n    <InputSection>\n      <h2>Operating times</h2>\n      <FieldInput\n        fieldName=\"reactionTime\"\n        label=\"Reaction time:\"\n        type=\"number\"\n        value={formik.values.reactionTime}\n        error={formik.errors.reactionTime}\n        {...{ onBlur, onChange }}\n      />\n      <FieldInput\n        fieldName=\"deadTime\"\n        label=\"Dead time:\"\n        type=\"number\"\n        tooltip=\"Time needed for discharge, cleaning, etc.\"\n        value={formik.values.deadTime}\n        error={formik.errors.deadTime}\n        {...{ onBlur, onChange }}\n      />\n      <FieldInput\n        fieldName=\"timeStep\"\n        label=\"Time step:\"\n        type=\"number\"\n        tooltip=\"Small time interval for numerical calculation purposes\"\n        value={formik.values.timeStep}\n        error={formik.errors.timeStep}\n        {...{ onBlur, onChange }}\n      />\n    </InputSection>\n  )\n}\n\nexport default OperatingTimesSection\n","import { VFC } from \"react\"\nimport InputSection from \"./InputSection\"\nimport FieldInput from \"../forms/FieldInput\"\n\n/* Types */\nimport type { Settings } from \"../../types/Settings\"\nimport type { FormikProps } from \"formik\"\n\ninterface UnitsProps {\n  formik: FormikProps<Settings>\n  onBlur: (event: React.ChangeEvent<HTMLInputElement>) => void\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst UnitsSection: VFC<UnitsProps> = (props) => {\n  const { formik, onBlur, onChange } = props\n\n  return (\n    <InputSection>\n      <h2>Units</h2>\n      <FieldInput\n        fieldName=\"timeUnits\"\n        label=\"Time units:\"\n        type=\"text\"\n        value={formik.values.timeUnits}\n        error={formik.errors.timeUnits}\n        {...{ onBlur, onChange }}\n      />\n      <FieldInput\n        fieldName=\"volumeUnits\"\n        label=\"Volume units:\"\n        type=\"text\"\n        value={formik.values.volumeUnits}\n        error={formik.errors.volumeUnits}\n        {...{ onBlur, onChange }}\n      />\n      <FieldInput\n        fieldName=\"molarUnits\"\n        label=\"Molar units:\"\n        type=\"text\"\n        value={formik.values.molarUnits}\n        error={formik.errors.molarUnits}\n        {...{ onBlur, onChange }}\n      />\n      <FieldInput\n        fieldName=\"massUnits\"\n        label=\"Mass units:\"\n        type=\"text\"\n        value={formik.values.massUnits}\n        error={formik.errors.massUnits}\n        {...{ onBlur, onChange }}\n      />\n      <FieldInput\n        fieldName=\"temperatureUnits\"\n        label=\"Temperature units:\"\n        type=\"text\"\n        value={formik.values.temperatureUnits}\n        error={formik.errors.temperatureUnits}\n        {...{ onBlur, onChange }}\n      />\n    </InputSection>\n  )\n}\n\nexport default UnitsSection\n","import styled from \"styled-components\"\n\n/* Components */\nimport Error from \"./Error\"\nimport InfoTooltip from \"./InfoTooltip\"\nimport { FaCheck } from \"react-icons/fa\"\n\n/* Types */\nimport type { FormikProps } from \"formik\"\n\n/*********************************\n * CAUTION: This checkbox only works inside a formik form\n *********************************/\n\ninterface CheckboxInputProps<T> {\n  error?: string\n  fieldName: string\n  formik: FormikProps<T>\n  label: string\n  tooltip?: string\n}\n\nconst CheckboxInput = <T extends unknown>(props: CheckboxInputProps<T>) => {\n  const { fieldName, formik, label, tooltip } = props\n\n  const key = fieldName as keyof typeof formik.values\n  const value = formik.values[key]\n  const error = formik.errors[key]\n\n  const onToggle = () => {\n    formik.setFieldValue(fieldName, !formik.values[key], false)\n    formik.handleSubmit()\n  }\n\n  return (\n    <CheckboxInputWrapper>\n      <Checkbox onClick={onToggle} toggled={!!value}>\n        {value && <FaCheck size={10} />}\n      </Checkbox>\n      <LabelWrapper>\n        <label htmlFor={fieldName}>{label}</label>\n        {tooltip && <InfoTooltip text={tooltip} />}\n      </LabelWrapper>\n      {error && <Error>{error}</Error>}\n    </CheckboxInputWrapper>\n  )\n}\n\nexport default CheckboxInput\n\nconst CheckboxInputWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  align-self: flex-start;\n  padding: 0.5rem;\n  position: relative;\n\n  label {\n    font-weight: 600;\n    color: var(--color-grey-dark);\n  }\n\n  &:hover > .error {\n    opacity: 1 !important;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`\n\ninterface CheckboxProps {\n  toggled?: boolean\n}\n\nconst Checkbox = styled.div<CheckboxProps>`\n  width: 0.8rem;\n  height: 0.8rem;\n  border: 2px solid var(--color-grey-normal);\n  background-color: ${(props) =>\n    props.toggled ? \"var(--color-grey-normal)\" : \"var(--color-grey-lightest)\"};\n  border-radius: 3px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 0.5rem;\n\n  svg {\n    fill: var(--color-grey-lightest);\n  }\n`\n","import InputSection from \"./InputSection\"\nimport FieldInput from \"../forms/FieldInput\"\nimport CheckboxInput from \"../forms/CheckboxInput\"\n\n/* Hooks */\nimport useSettings from \"../../hooks/useSettings\"\n\n/* Types */\nimport type { Settings } from \"../../types/Settings\"\nimport type { FormikProps } from \"formik\"\n\ninterface HeatExchangeProps {\n  formik: FormikProps<Settings>\n  onBlur: (event: React.ChangeEvent<HTMLInputElement>) => void\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst HeatExchangeSection: React.VFC<HeatExchangeProps> = (props) => {\n  const { formik, onBlur, onChange } = props\n  const { settings } = useSettings()\n\n  return (\n    <InputSection>\n      <h2>Heat Exchange</h2>\n      <CheckboxInput<Settings>\n        fieldName=\"isothermic\"\n        label=\"Isothermic system\"\n        {...{ formik }}\n      />\n      <FieldInput\n        fieldName=\"initialTemperature\"\n        label={`Initial Temperature [${settings.temperatureUnits}]:`}\n        type=\"number\"\n        value={formik.values.initialTemperature}\n        error={formik.errors.initialTemperature}\n        {...{ onBlur, onChange }}\n      />\n    </InputSection>\n  )\n}\n\nexport default HeatExchangeSection\n","import styled from \"styled-components\"\n\n/* Components */\nimport PageTitle from \"../components/PageTitle\"\nimport OperatingTimesSection from \"../components/settings/OperatingTimesSection\"\nimport UnitsSection from \"../components/settings/UnitsSection\"\nimport HeatExchangeSection from \"../components/settings/HeatExchangeSection\"\n\n/* Helpers */\nimport {\n  validateEqual,\n  validateNotEmpty,\n  validateGreaterThan,\n} from \"../helpers/validators\"\n\n/* Hooks */\nimport useSettings from \"../hooks/useSettings\"\nimport { useFormik } from \"formik\"\n\n/* Types */\nimport type { Settings, SettingsErrors } from \"../types/Settings\"\nimport type { FormikProps } from \"formik\"\n\nconst SettingsPage: React.VFC = () => {\n  const { settings, saveSettings } = useSettings()\n\n  /**\n   * Form validation function\n   */\n  const validate = (values: Settings): SettingsErrors => {\n    const { deadTime, initialTemperature, timeStep, reactionTime } = values\n    const errors: SettingsErrors = {}\n\n    /* Reaction time validation */\n    if (!validateNotEmpty(reactionTime))\n      errors.reactionTime = \"Reaction time cannot be empty\"\n    else if (!validateGreaterThan(reactionTime, 0, true))\n      errors.reactionTime = \"Reaction time cannot be lower than 0\"\n\n    /* Dead time validation */\n    if (!validateNotEmpty(deadTime))\n      errors.deadTime = \"Dead time cannot be empty\"\n    else if (!validateGreaterThan(deadTime, 0, true))\n      errors.deadTime = \"Dead time cannot be lower than 0\"\n\n    /* Time step validation */\n    if (!validateNotEmpty(timeStep))\n      errors.timeStep = \"Time step cannot be empty\"\n    else if (!validateGreaterThan(timeStep, 0, false))\n      errors.timeStep = \"Time step has to be greater than 0\"\n    // TODO: Time step has to be lower than reaction time\n\n    /* Initial temperature validation */\n    if (!validateNotEmpty(timeStep))\n      errors.initialTemperature = \"Initial temperature cannot be empty\"\n    else if (\n      (validateEqual(initialTemperature, \"K\") ||\n        validateEqual(initialTemperature, \"R\")) &&\n      !validateGreaterThan(initialTemperature, 0, false)\n    )\n      errors.initialTemperature =\n        \"Initial temperature cannot be equal or lower than 0\"\n    else if (\n      validateEqual(initialTemperature, \"°C\") &&\n      !validateGreaterThan(initialTemperature, -273.15, false)\n    )\n      errors.initialTemperature =\n        \"Initial temperature cannot be equal or lower than -273.15\"\n    else if (\n      validateEqual(initialTemperature, \"°F\") &&\n      !validateGreaterThan(initialTemperature, -459.67, false)\n    )\n      errors.initialTemperature =\n        \"Initial temperature cannot be equal or lower than -459.67\"\n\n    return errors\n  }\n\n  const formik: FormikProps<Settings> = useFormik({\n    initialValues: { ...settings },\n    validate,\n    onSubmit: (values) => {\n      saveSettings(values)\n    },\n  })\n\n  const submit = () => {\n    formik.handleSubmit()\n  }\n\n  const onBlur = submit\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n    formik.handleChange(event)\n\n  const sectionProps = {\n    formik,\n    onBlur,\n    onChange,\n  }\n\n  return (\n    <>\n      <PageTitle>Operation</PageTitle>\n\n      <Form>\n        <OperatingTimesSection {...sectionProps} />\n        <UnitsSection {...sectionProps} />\n        <HeatExchangeSection {...sectionProps} />\n      </Form>\n    </>\n  )\n}\n\nexport default SettingsPage\n\nconst Form = styled.form`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 1rem;\n`\n","import styled from \"styled-components\"\n\nconst Notice = styled.p`\n  color: var(--color-grey-normal);\n  font-style: italic;\n  margin: 0.5rem;\n`\n\nexport default Notice\n","import styled from \"styled-components\"\n\n/* Components */\nimport { Fragment } from \"react\"\nimport Notice from \"../Notice\"\nimport { FiArrowRight, FiPlus } from \"react-icons/fi\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Hooks */\nimport useCompounds from \"../../hooks/useCompounds\"\n\n/* Types */\nimport { Compound } from \"../../types/Compound\"\nimport { Reaction } from \"../../types/Reaction\"\n\ninterface IReactionPreviewProps {\n  reaction: Reaction\n}\n\nconst ReactionPreview: React.FC<IReactionPreviewProps> = (props) => {\n  const { reaction } = props\n  const { findCompound } = useCompounds()\n\n  return (\n    <ReactionPreviewWrapper>\n      {reaction.reactants.length === 0 && reaction.products.length === 0 && (\n        <Notice>No reaction data</Notice>\n      )}\n\n      {reaction.reactants.map((reactionCompound, index) => {\n        const compound = findCompound(reactionCompound.compoundId) as Compound\n\n        return (\n          <Fragment key={reactionCompound.compoundId}>\n            {index !== 0 && <FiPlus size={25} />}\n            <CompoundWrapper>\n              <p>{reactionCompound.stoichiometricCoefficient}</p>\n              <CompoundTile\n                color={compound.color as keyof typeof COMPOUND_COLORS}\n              >\n                {compound.symbol}\n              </CompoundTile>\n            </CompoundWrapper>\n          </Fragment>\n        )\n      })}\n\n      {reaction.reactants.length > 0 && reaction.products.length > 0 && (\n        <FiArrowRight size={25} />\n      )}\n\n      {reaction.products.map((reactionCompound, index) => {\n        const compound = findCompound(reactionCompound.compoundId) as Compound\n\n        return (\n          <Fragment key={reactionCompound.compoundId}>\n            {index !== 0 && <FiPlus size={25} />}\n            <CompoundWrapper>\n              <p>{reactionCompound.stoichiometricCoefficient}</p>\n              <CompoundTile\n                color={compound.color as keyof typeof COMPOUND_COLORS}\n              >\n                {compound.symbol}\n              </CompoundTile>\n            </CompoundWrapper>\n          </Fragment>\n        )\n      })}\n    </ReactionPreviewWrapper>\n  )\n}\n\nexport default ReactionPreview\n\nconst ReactionPreviewWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-grow: 1;\n  min-height: 3rem;\n`\n\nconst CompoundWrapper = styled.div`\n  align-items: flex-end;\n  display: flex;\n  margin: 0 0.5rem;\n\n  p {\n    color: var(--color-grey-dark);\n    font-size: 1.6rem;\n    margin: 0 0 0.2rem 0;\n  }\n`\n\ninterface ICompoundColorBulletProps {\n  color: keyof typeof COMPOUND_COLORS\n}\n\nconst CompoundTile = styled.div<ICompoundColorBulletProps>`\n  background-color: ${(props) => COMPOUND_COLORS[props.color]};\n  border-radius: 5px;\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  color: var(--color-grey-dark);\n  font-size: 1.6rem;\n  margin: 0 0.5rem;\n  padding: 0.5rem 0.9rem;\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport CardButton from \"../CardButton\"\nimport ReactionPreview from \"./ReactionPreview\"\nimport { FiEdit, FiTrash2 } from \"react-icons/fi\"\n\n/* Types */\nimport { Reaction } from \"../../types/Reaction\"\n\ninterface IReactionCardProps {\n  reaction: Reaction\n  reactionIndex: number\n  editReaction: () => void\n  removeReaction: () => void\n}\n\nconst ReactionCard: React.FC<IReactionCardProps> = (props) => {\n  const { reaction, reactionIndex, editReaction, removeReaction } = props\n\n  return (\n    <ReactionCardWrapper>\n      <ReactionInfo>\n        <ReactionName>\n          {`#${reactionIndex + 1}`} {reaction.name ? ` - ${reaction.name}` : \"\"}\n        </ReactionName>\n        <ReactionPreview reaction={reaction} />\n      </ReactionInfo>\n      <CardButton onClick={editReaction}>\n        <FiEdit />\n      </CardButton>\n      <CardButton onClick={removeReaction}>\n        <FiTrash2 />\n      </CardButton>\n    </ReactionCardWrapper>\n  )\n}\n\nexport default ReactionCard\n\nconst ReactionCardWrapper = styled.div`\n  margin: 10px;\n  padding: 20px;\n  position: relative;\n\n  align-items: center;\n  align-self: stretch;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: var(--color-grey-lighter);\n  border-radius: 5px;\n  border: 1.5px solid var(--color-grey-lightest);\n  display: flex;\n  color: var(--color-grey-dark);\n  cursor: pointer;\n  overflow: hidden;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.15);\n    transform: translateY(-2px);\n  }\n\n  p:not(:first-child) {\n    flex-grow: 1;\n    margin: 0;\n  }\n`\n\nconst ReactionName = styled.p`\n  color: var(--color-grey-normal);\n  flex-grow: 0;\n  font-size: 1.2rem;\n  font-weight: 600;\n  margin: 0;\n  padding-left: 0.6rem;\n  padding-bottom: 0.5rem;\n`\n\nconst ReactionInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n`\n","/* Types */\nimport {\n  KineticConstants,\n  KineticModel,\n  Reaction,\n  ReactionCompound,\n} from \"../types/Reaction\"\nimport { Compound } from \"../types/Compound\"\n\n/**\n * This is a placeholder for more complex kinetic models,\n * where constants can be added and used in expressions\n *\n * Kinetic constants are representes by:\n *  - A principal constant, with key @reactionConstant\n *  - A compound-specific constant, with key @compoundId\n *\n * More complex models are not considerer, for simplicity of\n * the MVP1\n */\n\nexport const KINETIC_MODELS = [\"Simple\", \"Hiperbolic\", \"Autocatalytic\"]\n\nexport const generateKineticConstants = (\n  model: KineticModel,\n  reaction: Reaction,\n  compounds: Compound[]\n): KineticConstants => {\n  switch (model) {\n    case KineticModel.hyperbolic:\n      return generateHiperbolicModelConstants(reaction, compounds)\n    case KineticModel.autocatalytic:\n      return generateAutocatalyticModelConstants(reaction, compounds)\n    default:\n      // simple\n      return generateSimpleModelConstants(reaction, compounds)\n  }\n}\n\nconst generateSimpleModelConstants = (\n  reaction: Reaction,\n  compounds: Compound[]\n) => {\n  const updatedExponents: KineticConstants = {\n    \"k_\\\\inf\": reaction.kineticConstants[\"k_\\\\inf\"],\n    E_A: reaction.kineticConstants.E_A,\n  }\n\n  reaction.reactants.forEach((reactionCompound: ReactionCompound) => {\n    const compound = compounds.find(\n      (c) => c.id === reactionCompound.compoundId\n    ) as Compound\n    const paramKey = reactantExponent(compound)\n    const oldConstant = reaction.kineticConstants[paramKey]\n\n    if (oldConstant === undefined) {\n      updatedExponents[paramKey] = 1\n    } else {\n      updatedExponents[paramKey] = oldConstant\n    }\n  })\n\n  return { ...updatedExponents }\n}\n\nconst generateHiperbolicModelConstants = (\n  reaction: Reaction,\n  compounds: Compound[]\n) => {\n  const updatedExponents: KineticConstants = {\n    \"k_\\\\inf\": reaction.kineticConstants[\"k_\\\\inf\"],\n    E_A: reaction.kineticConstants.E_A,\n  }\n\n  reaction.reactants.forEach((reactionCompound: ReactionCompound) => {\n    const compound = compounds.find(\n      (c) => c.id === reactionCompound.compoundId\n    ) as Compound\n    const paramKey = semiSaturationConstant(compound)\n    const oldConstant = reaction.kineticConstants[paramKey]\n\n    if (oldConstant === undefined) {\n      updatedExponents[paramKey] = 1\n    } else {\n      updatedExponents[paramKey] = oldConstant\n    }\n  })\n\n  return { ...updatedExponents }\n}\n\nconst generateAutocatalyticModelConstants = (\n  reaction: Reaction,\n  compounds: Compound[]\n) => {\n  const updatedExponents: KineticConstants = {\n    \"k_\\\\inf\": reaction.kineticConstants[\"k_\\\\inf\"],\n    E_A: reaction.kineticConstants.E_A,\n  }\n\n  reaction.reactants.forEach((reactionCompound: ReactionCompound) => {\n    const compound = compounds.find(\n      (c) => c.id === reactionCompound.compoundId\n    ) as Compound\n    const paramKey = reactantExponent(compound)\n    const oldConstant = reaction.kineticConstants[paramKey]\n\n    if (oldConstant === undefined) {\n      updatedExponents[paramKey] = 1\n    } else {\n      updatedExponents[paramKey] = oldConstant\n    }\n  })\n  reaction.products.forEach((reactionCompound: ReactionCompound) => {\n    const compound = compounds.find(\n      (c) => c.id === reactionCompound.compoundId\n    ) as Compound\n    const paramKey = productExponent(compound)\n    const oldConstant = reaction.kineticConstants[paramKey]\n\n    if (oldConstant === undefined) {\n      updatedExponents[paramKey] = 1\n    } else {\n      updatedExponents[paramKey] = oldConstant\n    }\n  })\n\n  return { ...updatedExponents }\n}\n\n// Some placeholder parameters\n\nexport const reactantExponent = (compound: Compound) => {\n  return `\\\\alpha_${compound.symbol}`\n}\n\nexport const productExponent = (compound: Compound) => {\n  return `\\\\beta_${compound.symbol}`\n}\n\nexport const semiSaturationConstant = (compound: Compound) => {\n  return `K_${compound.symbol}`\n}\n","import styled from \"styled-components\"\nimport randomstring from \"randomstring\"\n\n/* Components */\nimport { FiChevronDown } from \"react-icons/fi\"\n\n// Hooks\nimport { useEffect, useState, useRef, useCallback } from \"react\"\n\ninterface ISelectProps<T> {\n  alignment?: string\n  defaultDisplayValue?: string\n  hoverIcon?: JSX.Element\n  initialValue?: ISelectOption<T>\n  selectOptions: ISelectOption<T>[]\n  onSelectionChange: (value?: T) => void\n}\n\ninterface ISelectOption<T> {\n  value?: T\n  displayText?: string\n  collapsedDisplayText?: string\n  hoverBackgroundColor?: string\n}\n\n/* Reusable custom select component */\nconst Select = <T extends string | number>(props: ISelectProps<T>) => {\n  const {\n    alignment,\n    defaultDisplayValue,\n    hoverIcon,\n    initialValue,\n    onSelectionChange,\n    selectOptions,\n  } = props\n\n  // Set state variables\n  const [selecting, setSelecting] = useState<boolean>(false)\n  const [currentValue, setCurrentValue] = useState<T | undefined>(\n    initialValue?.value || undefined\n  )\n\n  // Use ref for id value\n  const id = useRef<string>(randomstring.generate(8))\n\n  /*\n   * Save a ref select component, for event add and remove listeners\n   * when clicking outside\n   */\n  const selectRef = useRef<HTMLElement | null>(null)\n  // const dropdownRef = useRef<HTMLElement | null>(null)\n\n  useEffect(() => {\n    // Save initialValue provided as prop to currentValue, if present\n    if (initialValue) setCurrentValue(initialValue.value)\n\n    // Save ref to rendered Select component\n    selectRef.current = document.getElementById(id.current)\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  /*\n   * Set ref to dropdown when visible\n   */\n  useEffect(() => {\n    if (selecting) selectRef.current = document.getElementById(id.current)\n    else selectRef.current = null\n  }, [selecting])\n\n  /*\n   * A useCallback hook here is needed so that the exact same function is passed\n   * to both addEventListener and removeEventListener\n   *\n   * https://dev.to/marcostreng/how-to-really-remove-eventlisteners-in-react-3och\n   */\n  const clickOutsideHandler = useCallback((event: any): void => {\n    // TODO: Better typing\n    // Uses tips from:\n    // https://stackoverflow.com/questions/152975/how-do-i-detect-a-click-outside-an-element/3028037#3028037\n\n    if (!selectRef.current?.contains(event.target)) {\n      toggleSelecting()\n      // Change state manually because clickOutsideHandler can't have toggleSelecting as a dependency\n      setSelecting(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  /*\n   * Toggles select options, while adding listeners for closing when clicking outside\n   * of the dropdown\n   */\n  const toggleSelecting = (): void => {\n    // Event listeners handling\n    if (!selecting) {\n      window.addEventListener(\"click\", clickOutsideHandler, true)\n    } else {\n      window.removeEventListener(\"click\", clickOutsideHandler, true)\n    }\n\n    // Toggle state variable\n    setSelecting(!selecting)\n  }\n\n  /*\n   * Handles value selection\n   * Definition is pretty self-explanatory\n   */\n  const selectValue = (value?: T): void => {\n    toggleSelecting()\n    setCurrentValue(value)\n    onSelectionChange(value)\n  }\n\n  /*\n   * Current selected value data\n   */\n  const currentValueOption: ISelectOption<T> | undefined = selectOptions.find(\n    (option) => option.value === currentValue\n  )\n\n  return (\n    <SelectWrapper id={id.current}>\n      <SelectValue selecting={selecting} onClick={toggleSelecting}>\n        <p>{currentValueOption?.collapsedDisplayText || defaultDisplayValue}</p>\n        <FiChevronDown size={10} />\n      </SelectValue>\n      {selecting && (\n        <SelectOptions alignment={alignment || \"left\"}>\n          {defaultDisplayValue && (\n            <SelectOption onClick={() => selectValue(undefined)}>\n              <p>{defaultDisplayValue}</p>\n            </SelectOption>\n          )}\n          {selectOptions.map(({ value, displayText, hoverBackgroundColor }) => (\n            <SelectOption\n              key={value}\n              onClick={() => {\n                selectValue(value)\n              }}\n              hoverBackgroundColor={hoverBackgroundColor}\n            >\n              <p>{displayText}</p>\n              <span>{hoverIcon}</span>\n            </SelectOption>\n          ))}\n        </SelectOptions>\n      )}\n    </SelectWrapper>\n  )\n}\n\nexport default Select\n\ninterface ISelecting {\n  selecting: boolean\n}\n\nconst SelectWrapper = styled.div`\n  position: relative;\n  flex-grow: 1;\n`\n\nconst SelectValue = styled.div<ISelecting>`\n  align-items: center;\n  background-color: var(--color-grey-lightest);\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  display: flex;\n  font-size: 1.1rem;\n  outline: none;\n  padding: 5px 10px;\n  transition: all 0.15s linear;\n  ${(props) =>\n    props.selecting\n      ? `box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15),\n    0px 0px 2px var(--color-grey-normal);`\n      : \"\"}\n\n  & > p {\n    margin: 0;\n    flex-grow: 1;\n  }\n\n  & > svg {\n    margin-left: 0.5rem;\n  }\n`\n\ninterface ISelectOptions {\n  alignment: string\n}\n\nconst SelectOptions = styled.div<ISelectOptions>`\n  position: absolute;\n  top: 100%;\n\n  align-items: stretch;\n  ${(props) => (props.alignment === \"left\" ? \"left: 0;\" : \"\")}\n  ${(props) => (props.alignment === \"right\" ? \"right: 0;\" : \"\")}\n  background-color: var(--color-grey-lightest);\n  border: none;\n  border-radius: 5px;\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15),\n    0px 0px 2px var(--color-grey-normal);\n  display: flex;\n  flex-direction: column;\n  font-size: 1.2rem;\n  margin-top: 0.5rem;\n  max-height: 400px;\n  overflow-y: scroll;\n  padding: 0.5rem;\n  transition: all 0.05s linear;\n  width: auto;\n  z-index: 20;\n`\n\ninterface ISelectOptionProps {\n  hoverBackgroundColor?: string\n}\n\nconst SelectOption = styled.button<ISelectOptionProps>`\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  display: flex;\n  font-size: 1rem;\n  text-align: left;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n\n  &:hover {\n    background-color: ${(props) =>\n      props.hoverBackgroundColor || \"var(--color-grey-lighter)\"};\n\n    & > span {\n      opacity: 1;\n    }\n  }\n\n  & > p {\n    white-space: nowrap;\n    overflow-x: hidden;\n    text-overflow: ellipsis;\n    margin: 0;\n    flex-grow: 1;\n  }\n\n  & > span {\n    display: inline-flex;\n    align-items: center;\n    opacity: 0;\n    transition: opacity 0.15s linear;\n  }\n`\n","import styled from \"styled-components\"\n\nexport const ModalInputSection = styled.div`\n  border-top: 1px solid var(--color-grey-light);\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 2rem;\n  padding: 2rem 1rem 0rem;\n\n  h2 {\n    color: var(--color-grey-dark);\n    font-size: 20px;\n    margin-top: 0;\n  }\n`\n\nexport const ModalColumnInputSection = styled(ModalInputSection)`\n  flex-direction: column;\n  flex-wrap: nowrap;\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport CardButton from \"../CardButton\"\nimport { FiTrash2 } from \"react-icons/fi\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Helpers */\nimport { validateNotEmpty } from \"../../helpers/validators\"\n\n/* Hooks */\nimport { useState } from \"react\"\n\n/* Types */\nimport { Compound } from \"../../types/Compound\"\nimport { ReactionCompound } from \"../../types/Reaction\"\n\ninterface IReactionCompoundCardProps {\n  key: string\n  compound: Compound\n  reactionCompound: ReactionCompound\n  updateCompound: (updatedReactionCompound: ReactionCompound) => void\n  removeCompound: () => void\n}\n\nconst ReactionCompoundCard: React.FC<IReactionCompoundCardProps> = (props) => {\n  const { compound, reactionCompound, updateCompound, removeCompound } = props\n\n  /* Coefficient is short for Stoichiometric Coefficient in this component */\n  const [coefficientInput, setCoefficientInput] = useState<number | \"\">(\n    reactionCompound.stoichiometricCoefficient\n  )\n\n  const handleCoefficientChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    if (event.target.value === \"\") {\n      setCoefficientInput(\"\")\n      return\n    }\n    setCoefficientInput(parseFloat(event.target.value))\n  }\n\n  const validateAndUpdateCoefficient = () => {\n    if (validateNotEmpty(coefficientInput)) {\n      updateCompound({\n        ...reactionCompound,\n        stoichiometricCoefficient: coefficientInput as number,\n      })\n      return\n    }\n    setCoefficientInput(reactionCompound.stoichiometricCoefficient)\n  }\n\n  return (\n    <ReactionCompoundCardWrapper\n      color={compound.color as keyof typeof COMPOUND_COLORS}\n    >\n      <h1>{compound.symbol}</h1>\n      <input\n        value={coefficientInput}\n        type=\"number\"\n        onChange={handleCoefficientChange}\n        onBlur={validateAndUpdateCoefficient}\n      />\n      <CardButton onClick={removeCompound}>\n        <FiTrash2 />\n      </CardButton>\n    </ReactionCompoundCardWrapper>\n  )\n}\n\nexport default ReactionCompoundCard\n\ninterface IReactionCompoundCardWrapperProps {\n  color: keyof typeof COMPOUND_COLORS\n}\n\nconst ReactionCompoundCardWrapper = styled.div<IReactionCompoundCardWrapperProps>`\n  margin: 5px;\n  padding: 1.3rem;\n  position: relative;\n\n  align-items: center;\n  animation-name: slide-in;\n  animation-timing-function: ease-in-out;\n  animation-duration: 0.25s;\n  animation-iteration-count: 1;\n  background-color: ${(props) => COMPOUND_COLORS[props.color]};\n  border-radius: 5px;\n  color: var(--color-grey-dark);\n  display: flex;\n  cursor: pointer;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    & {\n      box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n      transform: translateY(-2px);\n    }\n  }\n\n  h1 {\n    flex-grow: 1;\n    font-size: 1.8rem;\n    margin: 0;\n  }\n\n  input {\n    font-size: 1.3rem;\n    width: 0px;\n  }\n\n  button {\n    opacity: 1;\n    margin-left: 0.5rem;\n  }\n`\n","/* Components */\nimport ReactionCompoundCard from \"./ReactionCompoundCard\"\n\n/* Hooks */\nimport useCompounds from \"../../hooks/useCompounds\"\n\n/* Types */\nimport { Compound } from \"../../types/Compound\"\nimport { ReactionCompound, CompoundType } from \"../../types/Reaction\"\n\ninterface IReactionCompoundListProps {\n  compoundType: CompoundType\n  reactionCompounds: ReactionCompound[]\n  reactionIndex: number\n  removeCompound: (compoundIndex: number, compoundType: CompoundType) => void\n  updateCompound: (\n    compoundIndex: number,\n    compoundType: CompoundType,\n    updatedCompound: ReactionCompound\n  ) => void\n}\n\nconst ReactionCompoundList: React.FC<IReactionCompoundListProps> = (props) => {\n  const { reactionCompounds, removeCompound, updateCompound, compoundType } =\n    props\n  const { findCompound } = useCompounds()\n\n  return (\n    <>\n      {reactionCompounds.map((reactionCompound) => {\n        const compound = findCompound(reactionCompound.compoundId) as Compound\n        /**\n         * compoundIndex is the index in the reaction object (reactants or products)\n         *  */\n        const compoundIndex = reactionCompounds.findIndex(\n          (c) => c.compoundId === reactionCompound.compoundId\n        ) as number\n\n        return (\n          <ReactionCompoundCard\n            key={reactionCompound.compoundId}\n            compound={compound}\n            reactionCompound={reactionCompound}\n            updateCompound={(updatedReactionCompound: ReactionCompound) => {\n              updateCompound(\n                compoundIndex,\n                compoundType,\n                updatedReactionCompound\n              )\n            }}\n            removeCompound={() => {\n              removeCompound(compoundIndex, compoundType)\n            }}\n          />\n        )\n      })}\n    </>\n  )\n}\n\nexport default ReactionCompoundList\n","import styled from \"styled-components\"\nimport { Fragment } from \"react\"\n/* Types */\nimport { Token, TokenTypes } from \"../helpers/tokenization\"\n\ninterface IEquation {\n  tokenizedEquation: Token[]\n}\n\n// It is necessary to specify the 'parenthesis level' at which the operation is done\ninterface Operation {\n  code: JSX.Element | string\n  level: number\n}\n\nexport const Equation: React.FC<IEquation> = (props) => {\n  const { tokenizedEquation } = props\n  const components: JSX.Element[] = []\n\n  const parenthesisStack: (JSX.Element | string)[][] = []\n  const operationStack: Operation[] = []\n\n  tokenizedEquation.forEach((token) => {\n    /**\n     * Parenthesis treatment takes precedence over everything else.\n     *\n     * A buffer is pushed to the parenthesis stack upon finding a left bracket.\n     *\n     * When a right parenthesis is found, the last element from the buffer is popped,\n     * and added as a parenthesis component to the latest parenthesis stack, or the components array\n     */\n    if (token.type === TokenTypes.LeftParenthesis) {\n      parenthesisStack.push([])\n    } else if (token.type === TokenTypes.RightParenthesis) {\n      // If the syntax is correct, pop should never return undefined\n      const parenthesis = parenthesisStack.pop() as (string | JSX.Element)[]\n\n      // If there are elements in the parenthesisStack, then push any new components to it\n      // If not, push any new components to the components array\n      const currentStack =\n        parenthesisStack.length === 0\n          ? components\n          : parenthesisStack[parenthesisStack.length - 1]\n\n      // If there are operations in the operationStack, and if the latest operation\n      // matches the parenthesis level, pop most recent one\n      if (\n        operationStack.length > 0 &&\n        operationStack[operationStack.length - 1].level ===\n          parenthesisStack.length\n      ) {\n        const operation = operationStack.pop() as Operation\n\n        //\n        if (operation.code === \"/\") {\n          const numerator = currentStack.pop() as string | JSX.Element\n          currentStack.push(\n            <Division\n              numerator={numerator}\n              denominator={<Parenthesis elements={parenthesis} />}\n            />\n          )\n        } else if (operation.code === \"^\") {\n          const base = currentStack.pop() as string | JSX.Element\n          currentStack.push(\n            <Power base={base} power={<Parenthesis elements={parenthesis} />} />\n          )\n        } else if (operation.code === \"-\" || operation.code === \"+\") {\n          currentStack.push(operation.code)\n          currentStack.push(<Parenthesis elements={parenthesis} />)\n        }\n      } else {\n        // No *valid* operations in operationStack, simply push component\n        currentStack.push(<Parenthesis elements={parenthesis} />)\n      }\n    }\n    //\n    /**\n     * Variables and parameters are easy to treat.\n     *\n     * The only considerations are to push to the parenthesis stack\n     * if a buffer is present, and to build Division and Power components if\n     * necessary.\n     */\n    else if (\n      token.type === TokenTypes.Parameter ||\n      token.type === TokenTypes.Variable\n    ) {\n      /**\n       * Push to parenthesis stack if one is present\n       */\n      if (parenthesisStack.length > 0) {\n        parenthesisStack[parenthesisStack.length - 1].push(\n          <SymbolComponent\n            symbol={(token.value as string).replace(/<|>|{|}/g, \"\")}\n          />\n        )\n      }\n      //\n      /**\n       * Then, check if division or power are present in the stack\n       *  */\n      else if (operationStack.length > 0) {\n        /**\n         * Pop most recent operation from stack\n         */\n        const operation = operationStack.pop() as Operation\n        //\n        if (operation.code === \"/\") {\n          const numerator = components.pop() as string | JSX.Element\n          components.push(\n            <Division\n              numerator={numerator}\n              denominator={\n                <SymbolComponent\n                  symbol={(token.value as string).replace(/<|>|{|}/g, \"\")}\n                />\n              }\n            />\n          )\n        } else if (operation.code === \"^\") {\n          const base = components.pop() as string | JSX.Element\n          components.push(\n            <Power\n              base={base}\n              power={\n                <SymbolComponent\n                  symbol={(token.value as string).replace(/<|>|{|}/g, \"\")}\n                />\n              }\n            />\n          )\n        }\n      }\n      //\n      /**\n       * Next steps are easier: close parenthesis or just push to components\n       */\n      else {\n        components.push(\n          <SymbolComponent\n            symbol={(token.value as string).replace(/<|>|{|}/g, \"\")}\n          />\n        )\n      }\n    }\n    //\n    /**\n     * Division and power are special in that they need the previous\n     * element in components. For this reason, the use a stack.\n     * */\n    else if (token.type === TokenTypes.Operator) {\n      if (token.value === \"/\" || token.value === \"^\") {\n        //\n        operationStack.push({\n          code: token.value,\n          level: parenthesisStack.length,\n        })\n      }\n      //\n      else if (parenthesisStack.length > 0) {\n        if (token.value === \"+\" || token.value === \"-\") {\n          parenthesisStack[parenthesisStack.length - 1].push(<>{token.value}</>)\n        } else if (token.value === \"*\") {\n          parenthesisStack[parenthesisStack.length - 1].push(<>.</>)\n        }\n      } else {\n        if (token.value === \"+\" || token.value === \"-\") {\n          components.push(<>{token.value}</>)\n        } else if (token.value === \"*\") {\n          components.push(<>.</>)\n        }\n      }\n    }\n  })\n\n  return (\n    <>\n      {components.map((component, index) => (\n        <Fragment key={index}>{component}</Fragment>\n      ))}\n    </>\n  )\n}\n\n// ----------------------------------------------------------------\n/**\n * Symbol Component\n * For alphanumeric expressions such as variables or parameters\n */\ninterface ISymbolComponent {\n  symbol: string\n}\n\nexport const SymbolComponent: React.FC<ISymbolComponent> = (props) => {\n  const { symbol } = props\n\n  /**\n   * Expressions may have subindices\n   * For now, they may not have superindices (TODO: maybe?)\n   * TODO: Support commas for subindex separation?\n   */\n  const separatedTerms: (string | JSX.Element)[] = symbol.split(\"_\")\n\n  // Replace symbols represented as strings for components\n  separatedTerms.forEach((term, index) => {\n    switch (term) {\n      case \"\\\\alpha\":\n        separatedTerms[index] = <GreekAlpha />\n        break\n      case \"\\\\beta\":\n        separatedTerms[index] = <GreekBeta />\n        break\n      case \"\\\\mu\":\n        separatedTerms[index] = <GreekMu />\n        break\n      case \"\\\\inf\":\n        separatedTerms[index] = <SymbolInfinity />\n        break\n      default:\n    }\n  })\n\n  for (let i = separatedTerms.length - 1; i > 0; i--) {\n    // Last term will be the subindex\n    const subindex = separatedTerms.pop() as string | JSX.Element\n    separatedTerms[i - 1] = (\n      <Subindex base={separatedTerms[i - 1]} subindex={subindex} />\n    )\n  }\n\n  // Final result is at separatedTerms[0]\n  return separatedTerms[0] as JSX.Element\n}\n\n// ----------------------------------------------------------------\n/**\n * Parenthesis\n */\n\ninterface IParenthesisProps {\n  elements: (string | JSX.Element)[]\n}\n\nexport const Parenthesis: React.FC<IParenthesisProps> = (props) => {\n  const { elements } = props\n\n  return (\n    <>\n      {elements.map((elem, index) => (\n        <Fragment key={index}>{elem}</Fragment>\n      ))}\n    </>\n  )\n}\n\n// ----------------------------------------------------------------\n/**\n * Division\n */\n\ninterface IDivisionProps {\n  numerator: string | JSX.Element\n  denominator: string | JSX.Element\n}\n\nexport const Division: React.FC<IDivisionProps> = (props) => {\n  const { numerator, denominator } = props\n\n  return (\n    <DivisionWrapper>\n      <div>{numerator}</div>\n      <div></div>\n      <div>{denominator}</div>\n    </DivisionWrapper>\n  )\n}\n\nconst DivisionWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n\n  & > div:not(:nth-child(2)) {\n    display: flex;\n    padding: 0.5rem;\n    position: relative;\n  }\n\n  & > div:nth-child(2) {\n    width: 100%;\n    height: 2px;\n    background-color: var(--color-grey-dark);\n  }\n`\n\n// ----------------------------------------------------------------\n/**\n * Power\n *  */\n\ninterface IPowerProps {\n  base: string | JSX.Element\n  power: string | JSX.Element\n}\n\nexport const Power: React.FC<IPowerProps> = (props) => {\n  const { base, power } = props\n  return (\n    <PowerWrapper>\n      <div>{base}</div>\n      <div className=\"exponent\">{power}</div>\n    </PowerWrapper>\n  )\n}\n\nconst PowerWrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n\n  & > .exponent {\n    transform: translateY(-30%) scale(0.7);\n  }\n`\n\n// ----------------------------------------------------------------\n/**\n * Subindex\n *  */\n\ninterface ISubindexProps {\n  base: string | JSX.Element\n  subindex: string | JSX.Element\n}\n\nexport const Subindex: React.FC<ISubindexProps> = (props) => {\n  const { base, subindex } = props\n  return (\n    <SubindexWrapper>\n      <div>{base}</div>\n      <div className=\"subindex\">{subindex}</div>\n    </SubindexWrapper>\n  )\n}\n\nconst SubindexWrapper = styled.div`\n  position: relative;\n  display: flex;\n\n  & > .subindex {\n    transform: translateY(30%) scale(0.75);\n  }\n`\n\n// ----------------------------------------------------------------\n/**\n * Greek letters\n */\n\nexport const GreekAlpha = () => <span>&alpha;</span>\nexport const GreekBeta = () => <span>&beta;</span>\nexport const GreekMu = () => <span>&mu;</span>\n\n// ----------------------------------------------------------------\n/**\n * Other Symbols\n */\nexport const SymbolInfinity = () => <span>&infin;</span>\n","import styled from \"styled-components\"\n\n/* Components */\nimport { Equation, Subindex } from \"../MathExpressions\"\n\n/* Hooks */\nimport useCompounds from \"../../hooks/useCompounds\"\n\n/* Types */\nimport { Reaction } from \"../../types/Reaction\"\n\ninterface IReactionEquationProps {\n  reaction: Reaction\n  keyCompoundSymbol?: string\n}\n\nconst ReactionEquation: React.FC<IReactionEquationProps> = (props) => {\n  const { reaction } = props\n  const { findCompound } = useCompounds()\n\n  const keyCompound = findCompound(reaction.keyCompound)\n  const keyCompoundSymbol: string | undefined = keyCompound?.symbol || undefined\n\n  return (\n    <EquationWrapper>\n      {keyCompoundSymbol && (\n        <>\n          <Subindex base=\"r\" subindex={keyCompoundSymbol} />\n          &nbsp;=&nbsp;\n        </>\n      )}\n      <Equation tokenizedEquation={reaction.kineticEquation} />\n    </EquationWrapper>\n  )\n}\n\nexport default ReactionEquation\n\n//\n\nconst EquationWrapper = styled.div`\n  align-items: center;\n  align-self: stretch;\n  background-color: var(--color-grey-lightest);\n  border: 1px solid var(--color-grey-light);\n  border-radius: 5px;\n  box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n  color: var(--color-grey-dark);\n  display: flex;\n  font-size: 1.8rem;\n  justify-content: center;\n  padding: 1.5rem;\n  margin: 1.5rem 0 1rem;\n\n  span {\n    font-family: \"Comfortaa\", symbol;\n  }\n`\n","import styled from \"styled-components\"\n\n/* Components */\nimport InfoTooltip from \"../forms/InfoTooltip\"\n\n/* Helpers */\nimport { validateNotEmpty } from \"../../helpers/validators\"\n\n/* Hooks */\nimport { useState } from \"react\"\n\ninterface IReactionParamInputCardProps {\n  paramSymbol: string | JSX.Element | JSX.Element[]\n  units?: JSX.Element\n  value: number\n  updateValue: (value: number) => void\n}\n\nconst ReactionParamInputCard: React.FC<IReactionParamInputCardProps> = (\n  props\n) => {\n  const { paramSymbol, value, units, updateValue } = props\n  const [valueInput, setValueInput] = useState<number | \"\">(value)\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.value === \"\") {\n      setValueInput(\"\")\n      return\n    }\n    setValueInput(parseFloat(event.target.value))\n  }\n\n  const validateAndUpdateConstant = () => {\n    if (validateNotEmpty(valueInput)) {\n      updateValue(valueInput as number)\n      return\n    }\n    setValueInput(value)\n  }\n\n  return (\n    <ParamInputWrapper>\n      <ParamInputInner>\n        <h1>{paramSymbol}</h1>\n        <input\n          value={valueInput}\n          type=\"number\"\n          onChange={handleChange}\n          onBlur={validateAndUpdateConstant}\n        />\n        {units && <InfoTooltip text={units} />}\n      </ParamInputInner>\n    </ParamInputWrapper>\n  )\n}\n\nexport default ReactionParamInputCard\n\nconst ParamInputWrapper = styled.div`\n  flex-basis: 25%;\n  position: relative;\n  z-index: 2;\n\n  &:hover {\n    z-index: 3;\n  }\n`\n\nconst ParamInputInner = styled.div`\n  position: relative;\n  align-items: center;\n  background-color: var(--color-grey-light);\n  border-radius: 5px;\n  cursor: pointer;\n  display: flex;\n  margin: 0.5rem;\n  padding: 1.3rem;\n  transition: all 0.15s ease-in-out;\n\n  &:hover {\n    box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.15);\n    transform: translateY(-2px);\n  }\n\n  h1 {\n    color: var(--color-grey-dark);\n    font-size: 1.6rem;\n    margin: 0;\n    margin-right: 1rem;\n\n    span {\n      /* Greek symbols */\n      font-family: \"Comfortaa\", symbol;\n    }\n  }\n\n  input {\n    font-size: 1.4rem;\n  }\n`\n","import styled from \"styled-components\"\n\n/* Hooks */\nimport useSettings from \"../../hooks/useSettings\"\n\n/* Components */\nimport ReactionParamInputCard from \"./ReactionParamInputCard\"\nimport { Equation, SymbolComponent } from \"../MathExpressions\"\n\n/* Types */\nimport { Token, TokenTypes } from \"../../helpers/tokenization\"\nimport { Reaction, KineticModel } from \"../../types/Reaction\"\nimport type { Compound } from \"../../types/Compound\"\n\ninterface IReactionKineticParametersProps {\n  compounds: Compound[]\n  reaction: Reaction\n  updateKineticConstant: (key: string, value: number) => void\n}\n\nconst ReactionKineticParameters: React.FC<IReactionKineticParametersProps> = (\n  props\n) => {\n  const { reaction, updateKineticConstant } = props\n  const { settings } = useSettings()\n  const kineticModel: KineticModel = reaction.kineticModel\n\n  const tokenizedMuUnits = [\n    new Token(TokenTypes.Parameter, `${settings.timeUnits}`),\n    new Token(TokenTypes.Operator, \"^\"),\n    new Token(TokenTypes.Parameter, `-1`),\n  ]\n\n  const tokenizedKUnits = [\n    new Token(TokenTypes.Parameter, `${settings.timeUnits}`),\n    new Token(TokenTypes.Operator, \"^\"),\n    new Token(TokenTypes.Parameter, `-1`),\n  ]\n\n  const globalOrder = Object.entries(reaction?.kineticConstants).reduce(\n    (accumulator, [key, value]) => {\n      if (key === \"preExponential\" || key === \"activationEnergy\")\n        return accumulator\n      return accumulator + value\n    },\n    -reaction?.kineticConstants.k || 0\n  )\n\n  if (globalOrder !== 1) {\n    tokenizedKUnits.push(new Token(TokenTypes.Operator, \"*\"))\n    tokenizedKUnits.push(\n      new Token(TokenTypes.Parameter, `${settings.volumeUnits}`)\n    )\n    tokenizedKUnits.push(new Token(TokenTypes.Operator, \"^\"))\n    tokenizedKUnits.push(new Token(TokenTypes.Parameter, `${globalOrder - 1}`))\n    tokenizedKUnits.push(new Token(TokenTypes.Operator, \"*\"))\n    tokenizedKUnits.push(\n      new Token(TokenTypes.Parameter, `${settings.molarUnits}`)\n    )\n    tokenizedKUnits.push(new Token(TokenTypes.Operator, \"^\"))\n    tokenizedKUnits.push(\n      new Token(TokenTypes.Parameter, `${-(globalOrder - 1)}`)\n    )\n  }\n\n  return (\n    <KineticParamsWrapper>\n      {Object.entries(reaction.kineticConstants).map(([param, value]) => {\n        let units, symbol\n\n        if (\"k_\\\\inf\") {\n          if (kineticModel === KineticModel.hyperbolic) {\n            units = <Equation tokenizedEquation={tokenizedMuUnits} />\n          } else {\n            units = <Equation tokenizedEquation={tokenizedKUnits} />\n          }\n        }\n        symbol = param\n\n        return (\n          <ReactionParamInputCard\n            key={param}\n            paramSymbol={<SymbolComponent symbol={symbol} />}\n            value={value as number}\n            units={units}\n            updateValue={(value: number) => {\n              updateKineticConstant(param, value)\n            }}\n          />\n        )\n      })}\n    </KineticParamsWrapper>\n  )\n}\n\nexport default ReactionKineticParameters\n\nconst KineticParamsWrapper = styled.div`\n  align-self: stretch;\n  background-color: var(--color-grey-lightest);\n  border-radius: 5px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  margin-top: 0.5rem;\n  padding: 0.5rem;\n\n  input {\n    margin-left: 0;\n  }\n`\n","/* Helpers */\nimport { Token, TokenTypes } from \"../helpers/tokenization\"\nimport { KineticModel } from \"../types/Reaction\"\nimport type { Compound } from \"../types/Compound\"\nimport type { Reaction, ReactionCompound } from \"../types/Reaction\"\n\nconst serializeKineticEquation = (\n  reaction: Reaction,\n  compounds: Compound[]\n): Token[] => {\n  const findCompound = (id: string): Compound | undefined => {\n    return compounds.find((c) => c.id === id)\n  }\n\n  const equationTokens: Token[] = []\n  /**\n   * TODO: this is just a placeholder for a future serialization system, maybe\n   * with direct user input!\n   *\n   * Returns tokenized equation with standard notation\n   */\n  switch (reaction.kineticModel) {\n    case KineticModel.hyperbolic:\n      equationTokens.push(new Token(TokenTypes.Parameter, `<k_\\\\inf>`))\n      addArrheniusExponential(equationTokens)\n\n      reaction.reactants.forEach((reactionCompound) => {\n        const { symbol } = findCompound(reactionCompound.compoundId) as Compound\n        addHyperbolicTerm(equationTokens, symbol)\n      })\n      return equationTokens\n\n    //\n\n    case KineticModel.autocatalytic:\n      equationTokens.push(new Token(TokenTypes.Parameter, `<k_\\\\inf>`))\n      addArrheniusExponential(equationTokens)\n\n      reaction.reactants.forEach((reactionCompound) => {\n        const { symbol } = findCompound(reactionCompound.compoundId) as Compound\n        addReactantWithExponent(equationTokens, symbol)\n      })\n      reaction.products.forEach((reactionCompound) => {\n        const { symbol } = findCompound(reactionCompound.compoundId) as Compound\n        addProductWithExponent(equationTokens, symbol)\n      })\n      return equationTokens\n\n    //\n\n    default:\n      equationTokens.push(new Token(TokenTypes.Parameter, `<k_\\\\inf>`))\n      addArrheniusExponential(equationTokens)\n\n      reaction.reactants.forEach((reactionCompound: ReactionCompound) => {\n        const { symbol } = findCompound(reactionCompound.compoundId) as Compound\n        addReactantWithExponent(equationTokens, symbol)\n      })\n      return equationTokens\n  }\n}\n\nexport default serializeKineticEquation\n\n// Helpers\n\nconst addArrheniusExponential = (equationTokens: Token[]): void => {\n  equationTokens.push(new Token(TokenTypes.Operator, \"*\"))\n  equationTokens.push(new Token(TokenTypes.Parameter, \"e\"))\n  equationTokens.push(new Token(TokenTypes.Operator, \"^\"))\n  equationTokens.push(new Token(TokenTypes.LeftParenthesis, \"(\"))\n  equationTokens.push(new Token(TokenTypes.LeftParenthesis, \"(\"))\n  equationTokens.push(new Token(TokenTypes.Operator, \"-\"))\n  equationTokens.push(new Token(TokenTypes.Parameter, \"<E_A>\"))\n  equationTokens.push(new Token(TokenTypes.RightParenthesis, \")\"))\n  equationTokens.push(new Token(TokenTypes.Operator, \"/\"))\n  equationTokens.push(new Token(TokenTypes.LeftParenthesis, \"(\"))\n  equationTokens.push(new Token(TokenTypes.Parameter, \"<R>\"))\n  equationTokens.push(new Token(TokenTypes.Operator, \"*\"))\n  equationTokens.push(new Token(TokenTypes.Variable, \"{T}\"))\n  equationTokens.push(new Token(TokenTypes.RightParenthesis, \")\"))\n  equationTokens.push(new Token(TokenTypes.RightParenthesis, \")\"))\n}\n\nconst addReactantWithExponent = (\n  equationTokens: Token[],\n  symbol: string\n): void => {\n  equationTokens.push(new Token(TokenTypes.Operator, \"*\"))\n  equationTokens.push(new Token(TokenTypes.Variable, `{[${symbol}]}`))\n  equationTokens.push(new Token(TokenTypes.Operator, \"^\"))\n  equationTokens.push(new Token(TokenTypes.Parameter, `<\\\\alpha_${symbol}>`))\n}\n\nconst addProductWithExponent = (\n  equationTokens: Token[],\n  symbol: string\n): void => {\n  equationTokens.push(new Token(TokenTypes.Operator, \"*\"))\n  equationTokens.push(new Token(TokenTypes.Variable, `{[${symbol}]}`))\n  equationTokens.push(new Token(TokenTypes.Operator, \"^\"))\n  equationTokens.push(new Token(TokenTypes.Parameter, `<\\\\beta_${symbol}>`))\n}\n\nconst addHyperbolicTerm = (equationTokens: Token[], symbol: string): void => {\n  equationTokens.push(new Token(TokenTypes.Operator, \"*\"))\n  equationTokens.push(new Token(TokenTypes.Variable, `{[${symbol}]}`))\n  equationTokens.push(new Token(TokenTypes.Operator, \"/\"))\n  equationTokens.push(new Token(TokenTypes.LeftParenthesis, \"(\"))\n  equationTokens.push(new Token(TokenTypes.Parameter, `<K_${symbol}>`))\n  equationTokens.push(new Token(TokenTypes.Operator, \"+\"))\n  equationTokens.push(new Token(TokenTypes.Variable, `{[${symbol}]}`))\n  equationTokens.push(new Token(TokenTypes.RightParenthesis, \")\"))\n}\n","import styled from \"styled-components\"\n\n/* Constants */\nimport {\n  KINETIC_MODELS,\n  generateKineticConstants,\n} from \"../../constants/kineticModels\"\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\n\n/* Components */\nimport EditModal from \"../EditModal\"\nimport FieldInput from \"../forms/FieldInput\"\nimport Notice from \"../Notice\"\nimport Select from \"../Select\"\nimport SubmitButton from \"../SubmitButton\"\nimport {\n  ModalInputSection,\n  ModalColumnInputSection,\n} from \"../ModalInputSection\"\nimport { FiPlus } from \"react-icons/fi\"\nimport ReactionCompoundList from \"./ReactionCompoundList\"\nimport ReactionEquation from \"./ReactionEquation\"\nimport ReactionKineticParameters from \"./ReactionKineticParameters\"\nimport ReactionPreview from \"./ReactionPreview\"\n\n/* Helpers */\nimport serializeKineticEquation from \"../../helpers/serializeKineticEquation\"\n\n/* Hooks */\nimport { useMemo, useState, useRef } from \"react\"\nimport useCompounds from \"../../hooks/useCompounds\"\nimport useReactions from \"../../hooks/useReactions\"\n\n/* Types */\nimport { Compound } from \"../../types/Compound\"\nimport { Reaction, ReactionCompound, CompoundType } from \"../../types/Reaction\"\n\ninterface IReactionEditModalProps {\n  compounds: Compound[]\n  reaction: Reaction\n  closeModal: () => void\n}\n\nconst ReactionEditModal: React.FC<IReactionEditModalProps> = (props) => {\n  const { compounds, reaction, closeModal } = props\n  const { findCompound } = useCompounds()\n  const { reactions, updateReaction } = useReactions()\n  const [closing, setClosing] = useState<boolean>(false)\n  const reactionIndex = reactions.findIndex((rea) => rea.id === reaction.id)\n  /**\n   * Copied state for reaction editing\n   */\n  const [modalReaction, setModalReaction] = useState<Reaction>(\n    JSON.parse(JSON.stringify(reaction))\n  )\n\n  /* Keep a reference to scrolled element */\n  const scrollRef = useRef(document.getElementById(\"scroll-target\"))\n\n  /* For the select input, both for reactants and products */\n  const [selectReactantIndex, setSelectReactantIndex] = useState<\n    number | undefined\n  >(undefined)\n  const [selectProductIndex, setSelectProductIndex] = useState<\n    number | undefined\n  >(undefined)\n\n  /**\n   * Select options\n   */\n  const reactantOptions = useMemo(() => {\n    return compounds\n      .filter((compound) => {\n        for (const reactant of modalReaction.reactants) {\n          if (reactant.compoundId === compound.id) {\n            return false\n          }\n        }\n        return true\n      })\n      .map((compound) => {\n        const index = compounds.findIndex((c) => c.id === compound.id)\n        return {\n          value: index,\n          displayText: compound.symbol,\n          collapsedDisplayText: compound.symbol,\n          hoverBackgroundColor:\n            COMPOUND_COLORS[compound.color as keyof typeof COMPOUND_COLORS],\n        }\n      })\n    // eslint-disable-next-line\n  }, [modalReaction.reactants])\n\n  const productOptions = useMemo(() => {\n    return compounds\n      .filter((compound) => {\n        for (const product of modalReaction.products) {\n          if (product.compoundId === compound.id) {\n            return false\n          }\n        }\n        return true\n      })\n      .map((compound) => {\n        const index = compounds.findIndex((c) => c.id === compound.id)\n        return {\n          value: index,\n          displayText: compound.symbol,\n          collapsedDisplayText: compound.symbol,\n          hoverBackgroundColor:\n            COMPOUND_COLORS[compound.color as keyof typeof COMPOUND_COLORS],\n        }\n      })\n    // eslint-disable-next-line\n  }, [modalReaction.products])\n\n  /**\n   * Handle compound form updates\n   */\n  const getCompoundKey = (\n    compoundType: CompoundType\n  ): \"products\" | \"reactants\" => {\n    if (compoundType === CompoundType.Reactant) return \"reactants\"\n    return \"products\"\n  }\n\n  const addCompound = (\n    compoundId: string,\n    compoundType: CompoundType\n  ): void => {\n    /* Determine which array to push to */\n    const key = getCompoundKey(compoundType)\n    const updatedReaction = JSON.parse(JSON.stringify(modalReaction))\n\n    updatedReaction[key].push({\n      compoundId,\n      stoichiometricCoefficient: 1,\n    })\n\n    /* Recalculate kinetic constants */\n    const kineticConstants = generateKineticConstants(\n      updatedReaction.kineticModel,\n      updatedReaction,\n      compounds\n    )\n    updatedReaction.kineticConstants = kineticConstants\n    updatedReaction.kineticEquation = serializeKineticEquation(\n      updatedReaction,\n      compounds\n    )\n\n    setModalReaction(updatedReaction)\n  }\n\n  const updateCompound = (\n    compoundIndex: number,\n    compoundType: CompoundType,\n    updatedCompound: ReactionCompound\n  ): void => {\n    /* Determine which array to push to */\n    const key = getCompoundKey(compoundType)\n    const updatedReaction = { ...modalReaction }\n\n    updatedReaction[key][compoundIndex] = updatedCompound\n\n    setModalReaction(updatedReaction)\n  }\n\n  const removeCompound = (\n    compoundIndex: number,\n    compoundType: CompoundType\n  ) => {\n    /* Determine which array to push to */\n    const key = getCompoundKey(compoundType)\n    const updatedReaction = { ...modalReaction }\n    const deletedCompound = updatedReaction[key][compoundIndex]\n\n    /* Update reaction compounds */\n    updatedReaction[key] = [\n      ...updatedReaction[key].slice(0, compoundIndex),\n      ...updatedReaction[key].slice(\n        compoundIndex + 1,\n        updatedReaction[key].length\n      ),\n    ]\n\n    /* Set keyCompound to undefined if deleted compound is keyCompound */\n    if (deletedCompound.compoundId === modalReaction.keyCompound) {\n      updatedReaction.keyCompound = undefined\n    }\n\n    /* Recalculate kinetic constants and equation */\n    const kineticConstants = generateKineticConstants(\n      updatedReaction.kineticModel,\n      updatedReaction,\n      compounds\n    )\n    updatedReaction.kineticConstants = kineticConstants\n    updatedReaction.kineticEquation = serializeKineticEquation(\n      updatedReaction,\n      compounds\n    )\n\n    setModalReaction(updatedReaction)\n  }\n\n  /**\n   * Handle kinetic constant change\n   */\n\n  const handleKineticConstantUpdate = (key: string, value: number) => {\n    const updatedReaction = JSON.parse(JSON.stringify(modalReaction))\n    updatedReaction.kineticConstants[key] = value\n    setModalReaction(updatedReaction)\n  }\n\n  /* For select state */\n  const selectReactantInitialValue = selectReactantIndex\n    ? {\n        value: selectReactantIndex,\n        displayText: compounds[selectReactantIndex].symbol,\n        collapsedDisplayText: compounds[selectReactantIndex].symbol,\n      }\n    : undefined\n\n  const selectProductInitialValue = selectProductIndex\n    ? {\n        value: selectProductIndex,\n        displayText: compounds[selectProductIndex].symbol,\n        collapsedDisplayText: compounds[selectProductIndex].symbol,\n      }\n    : undefined\n\n  return (\n    <EditModal\n      closing={closing}\n      setClosing={setClosing}\n      handleClose={closeModal}\n    >\n      <ReactionPreview reaction={modalReaction} />\n      <br />\n      <FieldInput\n        fieldName=\"name\"\n        label=\"Reaction name:\"\n        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n          setModalReaction({\n            ...modalReaction,\n            name: event.target.value,\n          })\n        }}\n        value={modalReaction.name}\n      />\n\n      {/* Compounds input */}\n      <ModalInputSection>\n        <CompoundInputWrapper>\n          <h2>Reactants</h2>\n          <AddCompound>\n            <Select\n              defaultDisplayValue=\"Compound...\"\n              hoverIcon={<FiPlus />}\n              initialValue={selectReactantInitialValue}\n              selectOptions={reactantOptions}\n              onSelectionChange={(index: number | undefined) => {\n                if (index !== undefined) {\n                  addCompound(compounds[index].id, CompoundType.Reactant)\n                }\n                setSelectReactantIndex(undefined)\n              }}\n            />\n          </AddCompound>\n          <CompoundInputInner>\n            {modalReaction.reactants.length !== 0 ? (\n              <ReactionCompoundList\n                reactionIndex={reactionIndex}\n                reactionCompounds={modalReaction.reactants}\n                removeCompound={removeCompound}\n                updateCompound={updateCompound}\n                compoundType={CompoundType.Reactant}\n              />\n            ) : (\n              <Notice>No compounds...</Notice>\n            )}\n          </CompoundInputInner>\n        </CompoundInputWrapper>\n\n        <CompoundInputWrapper>\n          <h2>Products</h2>\n          <AddCompound>\n            <Select\n              defaultDisplayValue=\"Compound...\"\n              hoverIcon={<FiPlus />}\n              initialValue={selectProductInitialValue}\n              selectOptions={productOptions}\n              onSelectionChange={(index: number | undefined) => {\n                if (index !== undefined) {\n                  addCompound(compounds[index].id, CompoundType.Product)\n                }\n                setSelectProductIndex(undefined)\n              }}\n            />\n          </AddCompound>\n          <CompoundInputInner>\n            {modalReaction.products.length !== 0 ? (\n              <ReactionCompoundList\n                reactionIndex={reactionIndex}\n                reactionCompounds={modalReaction.products}\n                removeCompound={removeCompound}\n                updateCompound={updateCompound}\n                compoundType={CompoundType.Product}\n              />\n            ) : (\n              <Notice>No compounds...</Notice>\n            )}\n          </CompoundInputInner>\n        </CompoundInputWrapper>\n      </ModalInputSection>\n\n      {/* Kinetics input */}\n      <ModalColumnInputSection>\n        <h2>Kinetics</h2>\n        <SelectField>\n          <p>Kinetic model</p>\n          <Select\n            initialValue={{\n              value: modalReaction.kineticModel,\n              displayText: KINETIC_MODELS[modalReaction.kineticModel],\n              collapsedDisplayText: KINETIC_MODELS[modalReaction.kineticModel],\n            }}\n            selectOptions={KINETIC_MODELS.map((model, index) => ({\n              value: index,\n              displayText: model,\n              collapsedDisplayText: model,\n            }))}\n            onSelectionChange={(value) => {\n              const updatedReaction = JSON.parse(JSON.stringify(modalReaction))\n\n              updatedReaction.kineticConstants = generateKineticConstants(\n                value as number,\n                modalReaction,\n                compounds\n              )\n              updatedReaction.kineticModel = value\n              updatedReaction.kineticEquation = serializeKineticEquation(\n                updatedReaction,\n                compounds\n              )\n\n              setModalReaction(updatedReaction)\n            }}\n          />\n        </SelectField>\n        <SelectField>\n          <p>Key compound</p>\n          <Select\n            defaultDisplayValue=\"Reactant...\"\n            initialValue={\n              modalReaction.keyCompound !== undefined\n                ? {\n                    value: modalReaction.keyCompound,\n                    displayText: (\n                      findCompound(modalReaction.keyCompound) as Compound\n                    ).symbol,\n                    collapsedDisplayText: (\n                      findCompound(modalReaction.keyCompound) as Compound\n                    ).symbol,\n                  }\n                : undefined\n            }\n            selectOptions={modalReaction.reactants.map((reactionCompound) => ({\n              value: reactionCompound.compoundId,\n              displayText: (\n                findCompound(reactionCompound.compoundId) as Compound\n              ).symbol,\n              collapsedDisplayText: (\n                findCompound(reactionCompound.compoundId) as Compound\n              ).symbol,\n            }))}\n            onSelectionChange={(value: string | undefined) => {\n              const updatedReaction = JSON.parse(JSON.stringify(modalReaction))\n              updatedReaction.keyCompound = value\n              setModalReaction(updatedReaction)\n            }}\n          />\n        </SelectField>\n        <ReactionEquation reaction={modalReaction} />\n        <ReactionKineticParameters\n          reaction={modalReaction}\n          compounds={compounds}\n          updateKineticConstant={handleKineticConstantUpdate}\n        />\n      </ModalColumnInputSection>\n\n      <SubmitButton\n        color=\"green\"\n        onClick={() => {\n          updateReaction(reaction.id, modalReaction)\n          scrollRef?.current?.scrollTo({ top: 0, behavior: \"smooth\" })\n          setClosing(true)\n        }}\n      >\n        Done\n      </SubmitButton>\n    </EditModal>\n  )\n}\n\nexport default ReactionEditModal\n\nconst SelectField = styled.div`\n  display: flex;\n  align-items: center;\n  width: 50%;\n\n  p {\n    color: var(--color-grey-dark);\n    flex-grow: 1;\n    font-size: 1rem;\n    margin-right: 1.4rem;\n  }\n\n  div {\n    flex-basis: 45%;\n  }\n`\n\nconst CompoundInputWrapper = styled.div`\n  flex-basis: 50%;\n\n  @media (max-width: 700px) {\n    flex-basis: 100%;\n  }\n`\n\nconst CompoundInputInner = styled.div`\n  background-color: var(--color-grey-lightest);\n  border-radius: 5px;\n  margin: 0.5rem 0.3rem;\n  padding: 0.5rem;\n`\n\nconst AddCompound = styled.div`\n  display: flex;\n  margin: 0.3rem;\n\n  & > button {\n    margin-left: 0.5rem;\n  }\n`\n","/* Components */\nimport ReactionCard from \"./ReactionCard\"\nimport ReactionEditModal from \"./ReactionEditModal\"\nimport NoResource from \"../NoResource\"\n\n/* Hooks */\nimport { useMemo, useState } from \"react\"\nimport useCompounds from \"../../hooks/useCompounds\"\nimport useReactions from \"../../hooks/useReactions\"\n\n/* Types */\nimport { Reaction } from \"../../types/Reaction\"\n\nconst ReactionList: React.FC = () => {\n  const { compounds } = useCompounds()\n  const { reactions, removeReaction } = useReactions()\n  const [editedReactionId, setEditedReactionId] = useState<string | undefined>(\n    undefined\n  )\n\n  const editReaction = (id?: string) => setEditedReactionId(id)\n  const editedReaction = useMemo(\n    () =>\n      editedReactionId\n        ? reactions.find((r) => r.id === editedReactionId)\n        : undefined,\n    [reactions, editedReactionId]\n  )\n\n  return (\n    <>\n      {reactions.length === 0 && (\n        <NoResource>No reactions added yet</NoResource>\n      )}\n\n      {reactions.map((reaction, index) => (\n        <ReactionCard\n          reaction={reaction}\n          reactionIndex={index}\n          editReaction={(): void => {\n            editReaction(reaction.id)\n          }}\n          removeReaction={(): void => {\n            removeReaction(reaction.id)\n          }}\n          key={index}\n        >\n          Reaction\n        </ReactionCard>\n      ))}\n\n      {/* Edit modal */}\n      {editedReactionId && (\n        <ReactionEditModal\n          compounds={compounds}\n          reaction={editedReaction as Reaction}\n          closeModal={() => editReaction()}\n        />\n      )}\n    </>\n  )\n}\n\nexport default ReactionList\n","/* Components */\nimport Button from \"../components/Button\"\nimport PageTitle from \"../components/PageTitle\"\nimport ReactionList from \"../components/reactions/ReactionList\"\nimport { FiPlus, FiTrash2 } from \"react-icons/fi\"\n\n/* Hooks */\nimport useReactions from \"../hooks/useReactions\"\n\nconst deleteButtonStyle = `\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  padding: 0.6rem 1rem;\n`\n\nconst ReactionsPage: React.FC = () => {\n  const { addReaction, resetReactions } = useReactions()\n\n  const handleResetReactions = () => {\n    const confirmation = window.confirm(\n      \"Are you sure you want to delete all reactions?\"\n    )\n    if (confirmation) resetReactions()\n  }\n\n  return (\n    <>\n      <PageTitle>Reactions</PageTitle>\n      <Button color=\"green\" onClick={addReaction}>\n        Add <FiPlus />\n      </Button>\n      <Button\n        color=\"red\"\n        buttonStyle={deleteButtonStyle}\n        onClick={handleResetReactions}\n      >\n        <FiTrash2 size={20} />\n      </Button>\n      <ReactionList />\n    </>\n  )\n}\n\nexport default ReactionsPage\n","import type { Point } from \"../hooks/useGetData\"\n\ninterface Ticks {\n  tickDistance: number\n  totalTicks: number\n}\n\nconst DISTANCE_FROM_CORNER = 30\nconst AVERAGE_TICK_DISTANCE = 50\n\n/**\n * Main function to be exported an used in /components/Plot.tsx\n * @param canvas\n */\n\ninterface DrawPlotParams {\n  canvas: HTMLCanvasElement\n  data: Point[][]\n  colors: string[]\n}\n\nexport const drawPlot = ({ canvas, data, colors }: DrawPlotParams) => {\n  const context = canvas.getContext(\"2d\")\n  if (!context) return\n\n  context.clearRect(0, 0, context.canvas.width, context.canvas.height)\n  context.lineWidth = 1\n\n  const yAxisTicks = getTicksYAxis({ height: context.canvas.height, data })\n\n  drawVerticalAxis({ context, ticks: yAxisTicks })\n  drawHorizontalAxis({ context, ticks: yAxisTicks }) // TODO: Change for x axis ticks\n  drawPlotCurve({\n    context,\n    data,\n    colors,\n    yAxisTicks,\n  })\n}\n\n/**\n * Auxiliary draw functions\n */\ninterface DrawAxisParams {\n  context: CanvasRenderingContext2D\n  ticks: Ticks\n}\n\nconst drawVerticalAxis = ({ context, ticks }: DrawAxisParams) => {\n  const width = context.canvas.width\n  const height = context.canvas.height\n  const effectiveHeight = height - DISTANCE_FROM_CORNER * 2\n\n  const { totalTicks, tickDistance } = ticks\n\n  // Once we get the total ticks, it's time to draw them.\n  // We use the entire canvas height for the ticks, so that the\n  // plot always fits in the designated area.\n  for (let i = 1; i <= totalTicks; i++) {\n    const yPosition =\n      height - DISTANCE_FROM_CORNER - (effectiveHeight * i) / totalTicks\n\n    context.beginPath()\n    context.strokeStyle = \"hsl(213, 20%, 20%)\"\n    context.moveTo(10, yPosition)\n    context.lineTo(DISTANCE_FROM_CORNER, yPosition)\n    context.stroke()\n\n    context.beginPath()\n    context.strokeStyle = \"hsl(213, 20%, 85%)\"\n    context.moveTo(DISTANCE_FROM_CORNER, yPosition)\n    context.lineTo(width - DISTANCE_FROM_CORNER, yPosition)\n    context.stroke()\n\n    context.font = \"16px Mulish\"\n    context.fillStyle = \"hsl(213, 20%, 80%)\"\n    context.textAlign = \"right\"\n    context.fillText(\n      formatTickValue(i * tickDistance),\n      width - DISTANCE_FROM_CORNER,\n      yPosition + 18\n    )\n  }\n\n  // Draw actual axis line\n  context.strokeStyle = \"hsl(213, 20%, 20%)\"\n  context.beginPath()\n  context.moveTo(DISTANCE_FROM_CORNER, DISTANCE_FROM_CORNER)\n  context.lineTo(DISTANCE_FROM_CORNER, height - DISTANCE_FROM_CORNER)\n  context.stroke()\n}\n\nconst drawHorizontalAxis = ({ context, ticks }: DrawAxisParams) => {\n  const height = context.canvas.height\n  const width = context.canvas.width\n\n  context.strokeStyle = \"hsl(213, 20%, 30%)\"\n  context.beginPath()\n  context.moveTo(DISTANCE_FROM_CORNER, height - DISTANCE_FROM_CORNER)\n  context.lineTo(width - DISTANCE_FROM_CORNER, height - DISTANCE_FROM_CORNER)\n  context.stroke()\n}\n\ninterface DrawPlotCurveParams {\n  context: CanvasRenderingContext2D\n  data: Point[][]\n  colors: string[]\n  yAxisTicks: Ticks\n}\n\nconst drawPlotCurve = (params: DrawPlotCurveParams) => {\n  const { colors, context, data, yAxisTicks } = params\n  const maxTimeValue = data.length !== 0 ? data[0][data[0].length - 1]?.x : 10\n  const maxYAxisValue = yAxisTicks.tickDistance * yAxisTicks.totalTicks\n\n  const plotAreaWidth = context.canvas.width - DISTANCE_FROM_CORNER * 2\n  const plotAreaHeight = context.canvas.height - DISTANCE_FROM_CORNER * 2\n\n  for (let j = 0; j < data.length; j++) {\n    context.beginPath()\n    const plotPath = new Path2D()\n    const points = data[j]\n    const color = colors[j]\n    for (let i = 1; i < points.length; i++) {\n      plotPath.moveTo(\n        DISTANCE_FROM_CORNER + (plotAreaWidth * points[i - 1].x) / maxTimeValue,\n        DISTANCE_FROM_CORNER +\n          plotAreaHeight * (1 - points[i - 1].y / maxYAxisValue)\n      )\n      plotPath.lineTo(\n        DISTANCE_FROM_CORNER + (plotAreaWidth * points[i].x) / maxTimeValue,\n        DISTANCE_FROM_CORNER +\n          plotAreaHeight * (1 - points[i].y / maxYAxisValue)\n      )\n    }\n    context.lineWidth = 4\n    context.strokeStyle = color\n    context.stroke(plotPath)\n  }\n}\n\n/**\n * Other auxiliary functions\n */\n\ninterface GetTicksYAxisParams {\n  height: number\n  data: Point[][]\n}\n\n// Gets total ticks and tick distance for y axis\nconst getTicksYAxis = (params: GetTicksYAxisParams): Ticks => {\n  const { data, height } = params\n\n  const targetTicks =\n    Math.floor((height - DISTANCE_FROM_CORNER) / AVERAGE_TICK_DISTANCE) || 10\n  const maxValue = maxFunctionalValue(data) || 10\n  const tickDistance = getTickDistance(maxValue, targetTicks)\n  const totalTicks = Math.ceil(maxValue / tickDistance)\n\n  return { tickDistance, totalTicks }\n}\n\n// Gets max functional value to set axis values correctly\nconst maxFunctionalValue = (data: Point[][]) => {\n  const maxValuesForEachVariable: number[] = []\n\n  if (data.length === 0) return 10\n\n  data.forEach((points: Point[]) => {\n    maxValuesForEachVariable.push(\n      Math.max(...points.map((point: Point) => point.y))\n    )\n  })\n\n  return Math.max(...maxValuesForEachVariable)\n}\n\n// Gets tick distance given a max value and a target tick amount\nconst getTickDistance = (maxValue: number, targetTickAmount: number) => {\n  const powerOfTen = getPowerOfTen(maxValue)\n\n  if (maxValue / 10 ** powerOfTen < 3) {\n    return 10 ** (powerOfTen - 1)\n  }\n  return 10 ** powerOfTen\n\n  // if (Math.ceil(maxValue / baseTickDistance) < targetTickAmount) {\n\n  // }\n\n  // while ()\n  // const rawDistance = maxValue / (targetTickAmount + 1)\n\n  // let multiplier = 1\n  // if (rawDistance > 1) {\n  //   while (rawDistance / (multiplier * 10) > 1) {\n  //     multiplier = multiplier * 10\n  //   }\n  // } else {\n  //   multiplier = 0.1\n  //   while (rawDistance / (multiplier * 0.1) < 1) {\n  //     multiplier = multiplier * 0.1\n  //   }\n  // }\n\n  // return Math.floor(rawDistance / multiplier) * multiplier\n}\n\n// Format tick value to 1 decimals and scientific notation if needed\nconst formatTickValue = (value: number) => {\n  if (value >= 100 || value < 0.1) {\n    const stringValue = value.toString()\n    return `${stringValue[0]}.${stringValue[1]}e${getPowerOfTen(value)}`\n  }\n\n  if (value < 100 && value >= 10) return value.toFixed(0)\n  if (value < 10 && value >= 1) return value.toFixed(1)\n  return value.toFixed(2) // if (value < 1 && value >= 0.1)\n}\n\n// Get power of ten for scientific notation\nconst getPowerOfTen = (value: number) => {\n  let power = 0\n\n  if (value > 1) {\n    while (value / 10 ** power >= 10) {\n      power++\n    }\n    return power\n  }\n\n  while (value * 10 ** power <= 0.1) {\n    power++\n  }\n  if (power === 0) return power\n  return power * -1\n}\n","import { useEffect, useCallback, useRef, useState } from \"react\"\nimport styled from \"styled-components\"\nimport type { Point } from \"../hooks/useGetData\"\nimport { drawPlot } from \"../helpers/drawPlot\"\n\ninterface PlotProps {\n  data: Point[][]\n  colors: string[]\n}\n\nconst Plot = (props: PlotProps) => {\n  const { colors, data } = props\n\n  // See this article for more reference:\n  // https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n\n  const canvasRef = useRef<HTMLCanvasElement | null>(null)\n  const [canvasWidth, setCanvasWidth] = useState(window.innerWidth - 130)\n  const [canvasHeight, setCanvasHeight] = useState(window.innerHeight - 80)\n\n  const resizeHandler = useCallback(() => {\n    setCanvasWidth(window.innerWidth - 130)\n    setCanvasHeight(window.innerHeight - 120)\n\n    // Re-draw plot\n    drawPlot({\n      canvas: canvasRef.current as HTMLCanvasElement,\n      data,\n      colors,\n    })\n    // eslint-disable-next-line\n  }, [data])\n\n  useEffect(() => {\n    // Event listener to set width and height of canvas programatically\n    window.addEventListener(\"resize\", resizeHandler)\n    drawPlot({\n      canvas: canvasRef.current as HTMLCanvasElement,\n      data,\n      colors,\n    })\n\n    // Cleanup for resize handler\n    return () => window.removeEventListener(\"resize\", resizeHandler)\n\n    // eslint-disable-next-line\n  }, [resizeHandler, data])\n\n  return <Canvas ref={canvasRef} height={canvasHeight} width={canvasWidth} />\n}\n\nexport default Plot\n\nconst Canvas = styled.canvas`\n  border-radius: 5px;\n  background-color: var(--color-grey-lightest);\n`\n","import styled from \"styled-components\"\nimport useCompounds from \"../../hooks/useCompounds\"\nimport { FaCheck } from \"react-icons/fa\"\nimport { COMPOUND_COLORS } from \"../../constants/compoundColors\"\nimport type { Dispatch, SetStateAction } from \"react\"\n\ninterface VariableCheckboxesProps {\n  selectedVariables: number[]\n  setSelectedVariables: Dispatch<SetStateAction<number[]>>\n}\n\nconst VariableCheckboxes = (props: VariableCheckboxesProps) => {\n  const { selectedVariables, setSelectedVariables } = props\n  const { compounds } = useCompounds()\n\n  const isToggled = (compoundIndex: number): boolean => {\n    const foundIndex = selectedVariables.findIndex(\n      (value) => value === compoundIndex\n    )\n    if (foundIndex === -1) return false\n    return true\n  }\n\n  const toggleIndex = (compoundIndex: number): void => {\n    const foundIndex = selectedVariables.findIndex(\n      (value) => value === compoundIndex\n    )\n    if (foundIndex === -1) {\n      // Add variable to selected ones\n      setSelectedVariables([...selectedVariables, compoundIndex])\n      return\n    }\n\n    // Remove from selected ones if found\n    setSelectedVariables([\n      ...selectedVariables.slice(0, foundIndex),\n      ...selectedVariables.slice(foundIndex + 1, selectedVariables.length),\n    ])\n  }\n\n  return (\n    <Wrapper>\n      {compounds.map((compound, index) => {\n        const color =\n          COMPOUND_COLORS[compound.color as keyof typeof COMPOUND_COLORS]\n        return (\n          <CheckboxWrapper\n            onClick={() => toggleIndex(index)}\n            toggled={isToggled(index)}\n            key={compound.id}\n            color={color}\n          >\n            <ColorBadge color={color} toggled={isToggled(index)} />\n            <CompoundSymbol>{compound.symbol}</CompoundSymbol>\n            <Checkbox>\n              {selectedVariables.includes(index) ? <FaCheck /> : null}\n            </Checkbox>\n          </CheckboxWrapper>\n        )\n      })}\n    </Wrapper>\n  )\n}\n\nexport default VariableCheckboxes\ninterface CheckboxProps {\n  color: string\n  toggled: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`\n\nconst CheckboxWrapper = styled.button<CheckboxProps>`\n  background-color: ${(props) =>\n    props.toggled ? props.color : \"var(--color-grey-lighter)\"};\n  border-radius: 5px;\n  border: none;\n  margin-bottom: 0.5rem;\n  padding: 0.5rem;\n  display: flex;\n  align-items: center;\n\n  &:hover {\n    ${(props) =>\n      props.toggled\n        ? \"opacity: 0.8\"\n        : \"background-color: var(--color-grey-lightest)\"};\n  }\n`\n\nconst ColorBadge = styled.div<CheckboxProps>`\n  width: 1rem;\n  height: 1rem;\n  border-radius: 50%;\n  background-color: ${(props) => props.color};\n  margin-right: 1rem;\n  box-shadow: ${(props) =>\n    props.toggled ? \"\" : \"0 2px 5px -2px var(--color-grey-normal)\"};\n`\n\nconst CompoundSymbol = styled.span`\n  flex-grow: 1;\n  text-align: left;\n  font-size: 1rem;\n`\n\nconst Checkbox = styled.div`\n  width: 1.1rem;\n  height: 1.1rem;\n  border: 2px solid var(--color-grey-darker);\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  svg {\n    fill: var(--color-grey-darker);\n  }\n`\n","import styled from \"styled-components\"\nimport { FiX } from \"react-icons/fi\"\nimport VariableCheckboxes from \"./VariableCheckboxes\"\nimport type { Dispatch, SetStateAction } from \"react\"\n\ninterface SidebarOptionsProps {\n  optionsVisible: boolean\n  toggleOptionsVisible: () => void\n  selectedVariables: number[]\n  setSelectedVariables: Dispatch<SetStateAction<number[]>>\n}\n\nconst SidebarOptions = (props: SidebarOptionsProps) => {\n  const {\n    optionsVisible,\n    toggleOptionsVisible,\n    selectedVariables,\n    setSelectedVariables,\n  } = props\n\n  return (\n    <SidebarOptionsWrapper visible={optionsVisible}>\n      <CloseButton onClick={toggleOptionsVisible}>\n        <FiX size={20} />\n      </CloseButton>\n      <h3>Variables</h3>\n      <VariableCheckboxes {...{ selectedVariables, setSelectedVariables }} />\n    </SidebarOptionsWrapper>\n  )\n}\n\nexport default SidebarOptions\n\ninterface SidebarWrapperProps {\n  visible: boolean\n}\n\nconst SidebarOptionsWrapper = styled.div<SidebarWrapperProps>`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  width: calc(300px - 2rem);\n  padding: 1rem;\n  padding-top: 2rem;\n  transform: ${(props) =>\n    props.visible ? \"translateX(0px)\" : \"translateX(300px)\"};\n  background-color: var(--color-grey-light);\n  transition: all 0.15s ease-in-out;\n  box-shadow: ${(props) =>\n    props.visible ? \"0 0 20px -5px var(--color-grey-normal)\" : \"unset\"};\n`\n\nconst CloseButton = styled.div`\n  position: absolute;\n  top: 0.5rem;\n  left: 0.5rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0.5rem;\n  border-radius: 5px;\n  transition: background-color 0.15s ease-in-out;\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`\n","import useSimulationResults from \"../hooks/useSimulationResults\"\n\n/* Types */\nimport { TimePoint } from \"../types/SimulationResults\"\n\nexport interface Point {\n  x: number\n  y: number\n}\n\nconst useGetData = () => {\n  const { simulationResults } = useSimulationResults()\n\n  /**\n   * Maps requested variable data to Victory-readable data\n   */\n  const variableData = (variable: string): Point[] => {\n    return simulationResults?.map((data: TimePoint) => {\n      return {\n        x: data.t,\n        y: data[variable],\n      }\n    }) as Point[]\n  }\n\n  return { variableData }\n}\n\nexport default useGetData\n","import styled from \"styled-components\"\n\n/* Components */\nimport PageTitle from \"../components/PageTitle\"\nimport Plot from \"../components/Plot\"\nimport SidebarOptions from \"../components/results/SidebarOptions\"\n\n/* Constants */\nimport { COMPOUND_COLORS } from \"../constants/compoundColors\"\n\n/* Hooks */\nimport { useMemo, useState } from \"react\"\nimport useCompounds from \"../hooks/useCompounds\"\nimport useGetData from \"../hooks/useGetData\"\n\nimport type { Point } from \"../hooks/useGetData\"\n\nconst ResultsPage: React.FC = () => {\n  const { variableData } = useGetData()\n  const { compounds } = useCompounds()\n  const [selectedVariables, setSelectedVariables] = useState<number[]>([0])\n  const [optionsVisible, setOptionsVisible] = useState<boolean>(false)\n\n  const toggleOptionsVisible = () => setOptionsVisible(!optionsVisible)\n\n  /* Derived state from selectedVariable */\n\n  const [data, colors] = useMemo(() => {\n    const data: Point[][] = []\n    const colors: string[] = []\n\n    selectedVariables.forEach((compoundIndex: number) => {\n      const selectedCompound = compounds[compoundIndex]\n      const compoundData: Point[] = variableData(`[${selectedCompound.symbol}]`)\n      data.push(compoundData)\n      colors.push(\n        COMPOUND_COLORS[selectedCompound.color as keyof typeof COMPOUND_COLORS]\n      )\n    })\n\n    return [data, colors]\n    // eslint-disable-next-line\n  }, [selectedVariables])\n\n  return (\n    <>\n      <PageTitle>Results</PageTitle>\n      <OptionsButton onClick={toggleOptionsVisible}>Options</OptionsButton>\n      <SidebarOptions\n        {...{\n          optionsVisible,\n          toggleOptionsVisible,\n          selectedVariables,\n          setSelectedVariables,\n        }}\n      />\n      <Plot data={data} colors={colors} />\n    </>\n  )\n}\n\nexport default ResultsPage\n\nconst OptionsButton = styled.button`\n  float: right;\n  margin-bottom: 0.5rem;\n  padding: 0.8rem;\n  background-color: var(--color-grey-lighter);\n  border: none;\n  font-size: 1rem;\n  border-radius: 5px;\n\n  &:hover {\n    background-color: var(--color-grey-lightest);\n  }\n`\n","import { Switch, Redirect, Route } from \"react-router-dom\"\n\n/* Hooks */\nimport useSimulationResults from \"./hooks/useSimulationResults\"\n\n/* Pages */\nimport CompoundsPage from \"./pages/CompoundsPage\"\nimport SettingsPage from \"./pages/SettingsPage\"\nimport ReactionsPage from \"./pages/ReactionsPage\"\nimport ResultsPage from \"./pages/ResultsPage\"\n\nconst Routes = () => {\n  const { simulationResults } = useSimulationResults()\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={CompoundsPage} />\n      <Route path=\"/compounds\" component={CompoundsPage} />\n      <Route path=\"/reactions\" component={ReactionsPage} />\n      <Route path=\"/settings\" component={SettingsPage} />\n\n      {/* Redirect for deployed URL */}\n      <Route path=\"/batch-simulator\">\n        <Redirect\n          to={{\n            pathname: \"/\",\n          }}\n        />\n      </Route>\n\n      {/* Redirect /results to / if no data is available */}\n      <Route path=\"/results\" component={ResultsPage}>\n        {simulationResults?.length ? (\n          <ResultsPage />\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/\",\n            }}\n          />\n        )}\n      </Route>\n    </Switch>\n  )\n}\n\nexport default Routes\n","import { BrowserRouter as Router } from \"react-router-dom\"\nimport { Provider } from \"react-redux\"\nimport store from \"./store\"\nimport GlobalStyles from \"./GlobalStyles\"\n\n/* Layouts */\nimport MainLayout from \"./layouts/MainLayout\"\n\n/* Components */\nimport Routes from \"./Routes\"\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Router>\n        <GlobalStyles />\n        <MainLayout>\n          <Routes />\n        </MainLayout>\n      </Router>\n    </Provider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}